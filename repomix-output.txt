This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: {node_modules, .expo, server/LinguaReadApi/bin/**, server/LinguaReadApi/obj/**, *.csproj.user, *.DS_Store, *.suo, *.user, *.cache, server/LinguaReadApi/Migrations, LinguaReadApi.http, .vs, client/lingua-read-client/.expo/web/cache/**, **/package.json}
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.gitignore
client/lingua-read-client/.expo/devices.json
client/lingua-read-client/.expo/README.md
client/lingua-read-client/App.js
client/lingua-read-client/app.json
client/lingua-read-client/package.json
client/lingua-read-client/public/index.html
client/lingua-read-client/public/manifest.json
client/lingua-read-client/public/robots.txt
client/lingua-read-client/README.md
client/lingua-read-client/src/App.js
client/lingua-read-client/src/components/auth/Login.js
client/lingua-read-client/src/components/auth/Register.js
client/lingua-read-client/src/components/Navigation.js
client/lingua-read-client/src/components/texts/TextCreate.js
client/lingua-read-client/src/components/texts/TextDisplay.css
client/lingua-read-client/src/components/texts/TextList.js
client/lingua-read-client/src/components/TranslationPopup.js
client/lingua-read-client/src/index.css
client/lingua-read-client/src/index.js
client/lingua-read-client/src/pages/BookCreate.js
client/lingua-read-client/src/pages/BookDetail.js
client/lingua-read-client/src/pages/BookList.js
client/lingua-read-client/src/pages/Home.js
client/lingua-read-client/src/pages/Login.js
client/lingua-read-client/src/pages/Register.js
client/lingua-read-client/src/pages/Statistics.js
client/lingua-read-client/src/pages/TextCreate.js
client/lingua-read-client/src/pages/TextDisplay.js
client/lingua-read-client/src/pages/TextList.js
client/lingua-read-client/src/reportWebVitals.js
client/lingua-read-client/src/utils/api.js
client/lingua-read-client/src/utils/helpers.js
client/lingua-read-client/src/utils/storage.js
client/lingua-read-client/src/utils/store.js
server/LinguaReadApi/appsettings.Development.json
server/LinguaReadApi/appsettings.json
server/LinguaReadApi/Controllers/AdminController.cs
server/LinguaReadApi/Controllers/AuthController.cs
server/LinguaReadApi/Controllers/BooksController.cs
server/LinguaReadApi/Controllers/HealthController.cs
server/LinguaReadApi/Controllers/LanguagesController.cs
server/LinguaReadApi/Controllers/SentenceTranslationController.cs
server/LinguaReadApi/Controllers/TextsController.cs
server/LinguaReadApi/Controllers/TranslationController.cs
server/LinguaReadApi/Controllers/UsersController.cs
server/LinguaReadApi/Controllers/WordsController.cs
server/LinguaReadApi/Data/AppDbContext.cs
server/LinguaReadApi/Data/ApplicationDbContext.cs
server/LinguaReadApi/Data/DbInitializer.cs
server/LinguaReadApi/LinguaReadApi.csproj
server/LinguaReadApi/LinguaReadApi.http
server/LinguaReadApi/Models/Book.cs
server/LinguaReadApi/Models/Language.cs
server/LinguaReadApi/Models/Text.cs
server/LinguaReadApi/Models/User.cs
server/LinguaReadApi/Models/UserActivity.cs
server/LinguaReadApi/Models/Word.cs
server/LinguaReadApi/Models/WordTranslation.cs
server/LinguaReadApi/package.json
server/LinguaReadApi/Program.cs
server/LinguaReadApi/Properties/launchSettings.json
server/LinguaReadApi/Services/GeminiTranslationService.cs
server/LinguaReadApi/Services/TranslationService.cs
server/LinguaReadApi/Utilities/WordCountUtility.cs

================================================================
Files
================================================================

================
File: .gitignore
================
node_modules/

================
File: client/lingua-read-client/.expo/devices.json
================
{
  "devices": []
}

================
File: client/lingua-read-client/.expo/README.md
================
> Why do I have a folder named ".expo" in my project?
The ".expo" folder is created when an Expo project is started using "expo start" command.
> What do the files contain?
- "devices.json": contains information about devices that have recently opened this project. This is used to populate the "Development sessions" list in your development builds.
- "settings.json": contains the server configuration that is used to serve the application manifest.
> Should I commit the ".expo" folder?
No, you should not share the ".expo" folder. It does not contain any information that is relevant for other developers working on the project, it is specific to your machine.
Upon project creation, the ".expo" folder is already added to your ".gitignore" file.

================
File: client/lingua-read-client/App.js
================
import React from 'react';
import { registerRootComponent } from 'expo';
import { Platform } from 'react-native';
import WebApp from './src/App'; // Import your existing React web app
import NativeApp from './src/NativeApp'; // Import the native version

// Choose the appropriate app version based on platform
const App = () => {
  return Platform.OS === 'web' ? <WebApp /> : <NativeApp />;
};

// Register the root component
registerRootComponent(App);

// Export default for compatibility
export default App;

================
File: client/lingua-read-client/app.json
================
{
  "expo": {
    "name": "Lingua Read",
    "slug": "lingua-read",
    "version": "1.0.0",
    "orientation": "portrait",
    "icon": "./src/assets/icon.png",
    "splash": {
      "image": "./src/assets/splash.png",
      "resizeMode": "contain",
      "backgroundColor": "#ffffff"
    },
    "updates": {
      "fallbackToCacheTimeout": 0
    },
    "assetBundlePatterns": [
      "**/*"
    ],
    "ios": {
      "supportsTablet": true
    },
    "android": {
      "adaptiveIcon": {
        "foregroundImage": "./src/assets/adaptive-icon.png",
        "backgroundColor": "#FFFFFF"
      }
    },
    "web": {
      "favicon": "./src/assets/favicon.png"
    }
  }
}

================
File: client/lingua-read-client/package.json
================
{
  "name": "lingua-read-client",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@react-native-async-storage/async-storage": "^2.1.2",
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "bootstrap": "^5.3.2",
    "expo": "^52.0.37",
    "expo-cli": "^6.3.12",
    "jwt-decode": "^4.0.0",
    "react": "^18.2.0",
    "react-bootstrap": "^2.10.1",
    "react-dom": "^18.2.0",
    "react-native": "^0.78.0",
    "react-native-web": "^0.19.13",
    "react-router-dom": "^6.22.1",
    "react-scripts": "5.0.1",
    "recharts": "^2.15.1",
    "web-vitals": "^2.1.4",
    "zustand": "^4.5.1"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

================
File: client/lingua-read-client/public/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="LinguaRead - Language learning through reading"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>LinguaRead</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

================
File: client/lingua-read-client/public/manifest.json
================
{
  "short_name": "LinguaRead",
  "name": "LinguaRead - Language Learning App",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

================
File: client/lingua-read-client/public/robots.txt
================
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

================
File: client/lingua-read-client/README.md
================
# LinguaRead - Frontend

This is the frontend application for LinguaRead, a language learning tool that helps users improve their vocabulary by reading texts in foreign languages.

## Features

- User authentication (login/register)
- Add and manage texts in different languages
- Interactive reading experience with word highlighting
- Mark words as "learning" or "known"
- Add translations to words
- Track vocabulary progress

## Technologies Used

- React 18
- React Router for navigation
- Zustand for state management
- React Bootstrap for UI components
- Axios for API requests

## Getting Started

### Prerequisites

- Node.js (v14 or higher)
- npm or yarn
- LinguaRead backend server running

### Installation

1. Clone the repository
2. Navigate to the client directory:
   ```
   cd client/lingua-read-client
   ```
3. Install dependencies:
   ```
   npm install
   ```
   or
   ```
   yarn install
   ```
4. Start the development server:
   ```
   npm start
   ```
   or
   ```
   yarn start
   ```

The application will be available at `http://localhost:3000`.

## Project Structure

```
src/
├── components/         # React components
│   ├── auth/           # Authentication components
│   ├── texts/          # Text-related components
│   └── ...
├── utils/              # Utility functions
│   ├── api.js          # API service functions
│   └── store.js        # Zustand stores
├── App.js              # Main application component
├── index.js            # Application entry point
└── index.css           # Global styles
```

## Usage

1. Register a new account or login with existing credentials
2. Add a new text in your target language
3. Click on words in the text to mark them as "learning" or "known"
4. Add translations to words for future reference
5. Track your vocabulary progress over time

## API Integration

The frontend communicates with the LinguaRead backend API. Make sure the backend server is running and the API URL in `src/utils/api.js` is correctly configured.

## License

This project is licensed under the MIT License.

================
File: client/lingua-read-client/src/App.js
================
import React, { useEffect } from 'react';
import { Routes, Route, Navigate } from 'react-router-dom';
import { Container } from 'react-bootstrap';
import { useAuthStore } from './utils/store';
import { jwtDecode } from 'jwt-decode';

// Components
import Navigation from './components/Navigation';

// Pages
import Home from './pages/Home';
import Login from './pages/Login';
import Register from './pages/Register';
import TextList from './pages/TextList';
import TextCreate from './pages/TextCreate';
import TextDisplay from './pages/TextDisplay';
import BookList from './pages/BookList';
import BookCreate from './pages/BookCreate';
import BookDetail from './pages/BookDetail';
import Statistics from './pages/Statistics';

function App() {
  const { token, setToken, clearToken } = useAuthStore();

  // Check if token is valid on app load
  useEffect(() => {
    const storedToken = localStorage.getItem('token');
    if (storedToken) {
      try {
        const decodedToken = jwtDecode(storedToken);
        const currentTime = Date.now() / 1000;
        
        if (decodedToken.exp < currentTime) {
          // Token has expired
          clearToken();
        } else {
          // Token is valid
          setToken(storedToken);
        }
      } catch (error) {
        // Invalid token
        clearToken();
      }
    }
  }, [setToken, clearToken]);

  return (
    <div className="App">
      <Navigation />
      <Container className="py-4">
        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/login" element={!token ? <Login /> : <Navigate to="/books" />} />
          <Route path="/register" element={!token ? <Register /> : <Navigate to="/books" />} />
          
          {/* Book routes */}
          <Route path="/books" element={token ? <BookList /> : <Navigate to="/login" />} />
          <Route path="/books/create" element={token ? <BookCreate /> : <Navigate to="/login" />} />
          <Route path="/books/:bookId" element={token ? <BookDetail /> : <Navigate to="/login" />} />
          
          {/* Text routes */}
          <Route path="/texts" element={token ? <TextList /> : <Navigate to="/login" />} />
          <Route path="/texts/create" element={token ? <TextCreate /> : <Navigate to="/login" />} />
          <Route path="/texts/:textId" element={token ? <TextDisplay /> : <Navigate to="/login" />} />
          
          {/* Statistics route */}
          <Route path="/statistics" element={token ? <Statistics /> : <Navigate to="/login" />} />
        </Routes>
      </Container>
    </div>
  );
}

export default App;

================
File: client/lingua-read-client/src/components/auth/Login.js
================
import React, { useState } from 'react';
import { Container, Row, Col, Form, Button, Alert, Card } from 'react-bootstrap';
import { Link, useNavigate } from 'react-router-dom';
import { loginUser } from '../../utils/api';
import { useAuthStore } from '../../utils/store';

const Login = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  
  const navigate = useNavigate();
  const { setToken } = useAuthStore();

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setLoading(true);
    
    try {
      const data = await loginUser(email, password);
      setToken(data.token, data.user);
      navigate('/texts');
    } catch (err) {
      setError(err.message || 'Failed to login. Please check your credentials.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <Container className="py-5">
      <Row className="justify-content-center">
        <Col md={6}>
          <Card className="shadow-sm">
            <Card.Body className="p-4">
              <h2 className="text-center mb-4">Login to LinguaRead</h2>
              
              {error && <Alert variant="danger">{error}</Alert>}
              
              <Form onSubmit={handleSubmit} className="auth-form">
                <Form.Group className="mb-3" controlId="email">
                  <Form.Label>Email address</Form.Label>
                  <Form.Control
                    type="email"
                    placeholder="Enter your email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    required
                  />
                </Form.Group>

                <Form.Group className="mb-4" controlId="password">
                  <Form.Label>Password</Form.Label>
                  <Form.Control
                    type="password"
                    placeholder="Enter your password"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    required
                  />
                </Form.Group>

                <div className="d-grid gap-2">
                  <Button variant="primary" type="submit" disabled={loading}>
                    {loading ? 'Logging in...' : 'Login'}
                  </Button>
                </div>
              </Form>
              
              <div className="text-center mt-4">
                <p>
                  Don't have an account?{' '}
                  <Link to="/register">Register here</Link>
                </p>
              </div>
            </Card.Body>
          </Card>
        </Col>
      </Row>
    </Container>
  );
};

export default Login;

================
File: client/lingua-read-client/src/components/auth/Register.js
================
import React, { useState } from 'react';
import { Container, Row, Col, Form, Button, Alert, Card } from 'react-bootstrap';
import { Link, useNavigate } from 'react-router-dom';
import { registerUser } from '../../utils/api';
import { useAuthStore } from '../../utils/store';

const Register = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  
  const navigate = useNavigate();
  const { setToken } = useAuthStore();

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    
    // Validate passwords match
    if (password !== confirmPassword) {
      setError('Passwords do not match');
      return;
    }
    
    // Validate password strength
    if (password.length < 6) {
      setError('Password must be at least 6 characters long');
      return;
    }
    
    setLoading(true);
    
    try {
      const data = await registerUser(email, password);
      setToken(data.token, data.user);
      navigate('/texts');
    } catch (err) {
      setError(err.message || 'Failed to register. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <Container className="py-5">
      <Row className="justify-content-center">
        <Col md={6}>
          <Card className="shadow-sm">
            <Card.Body className="p-4">
              <h2 className="text-center mb-4">Create an Account</h2>
              
              {error && <Alert variant="danger">{error}</Alert>}
              
              <Form onSubmit={handleSubmit} className="auth-form">
                <Form.Group className="mb-3" controlId="email">
                  <Form.Label>Email address</Form.Label>
                  <Form.Control
                    type="email"
                    placeholder="Enter your email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    required
                  />
                  <Form.Text className="text-muted">
                    We'll never share your email with anyone else.
                  </Form.Text>
                </Form.Group>

                <Form.Group className="mb-3" controlId="password">
                  <Form.Label>Password</Form.Label>
                  <Form.Control
                    type="password"
                    placeholder="Create a password"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    required
                  />
                  <Form.Text className="text-muted">
                    Password must be at least 6 characters long.
                  </Form.Text>
                </Form.Group>

                <Form.Group className="mb-4" controlId="confirmPassword">
                  <Form.Label>Confirm Password</Form.Label>
                  <Form.Control
                    type="password"
                    placeholder="Confirm your password"
                    value={confirmPassword}
                    onChange={(e) => setConfirmPassword(e.target.value)}
                    required
                  />
                </Form.Group>

                <div className="d-grid gap-2">
                  <Button variant="primary" type="submit" disabled={loading}>
                    {loading ? 'Creating Account...' : 'Register'}
                  </Button>
                </div>
              </Form>
              
              <div className="text-center mt-4">
                <p>
                  Already have an account?{' '}
                  <Link to="/login">Login here</Link>
                </p>
              </div>
            </Card.Body>
          </Card>
        </Col>
      </Row>
    </Container>
  );
};

export default Register;

================
File: client/lingua-read-client/src/components/Navigation.js
================
import React from 'react';
import { Navbar, Nav, Container, Button, NavDropdown } from 'react-bootstrap';
import { Link, useNavigate } from 'react-router-dom';
import { useAuthStore } from '../utils/store';

const Navigation = () => {
  const { token, user, clearToken } = useAuthStore();
  const navigate = useNavigate();

  const handleLogout = () => {
    clearToken();
    navigate('/login');
  };

  return (
    <Navbar bg="dark" variant="dark" expand="lg">
      <Container>
        <Navbar.Brand as={Link} to="/">LinguaRead</Navbar.Brand>
        <Navbar.Toggle aria-controls="basic-navbar-nav" />
        <Navbar.Collapse id="basic-navbar-nav">
          <Nav className="me-auto">
            <Nav.Link as={Link} to="/">Home</Nav.Link>
            {token && (
              <>
                <NavDropdown title="Books" id="books-dropdown">
                  <NavDropdown.Item as={Link} to="/books">My Books</NavDropdown.Item>
                  <NavDropdown.Item as={Link} to="/books/create">Add New Book</NavDropdown.Item>
                </NavDropdown>
                
                <NavDropdown title="Texts" id="texts-dropdown">
                  <NavDropdown.Item as={Link} to="/texts">My Texts</NavDropdown.Item>
                  <NavDropdown.Item as={Link} to="/texts/create">Add Individual Text</NavDropdown.Item>
                </NavDropdown>
                
                <Nav.Link as={Link} to="/statistics">Statistics</Nav.Link>
              </>
            )}
          </Nav>
          <Nav>
            {token ? (
              <>
                <Navbar.Text className="me-3">
                  Signed in as: {user?.email}
                </Navbar.Text>
                <Button variant="outline-light" onClick={handleLogout}>Logout</Button>
              </>
            ) : (
              <>
                <Nav.Link as={Link} to="/login">Login</Nav.Link>
                <Nav.Link as={Link} to="/register">Register</Nav.Link>
              </>
            )}
          </Nav>
        </Navbar.Collapse>
      </Container>
    </Navbar>
  );
};

export default Navigation;

================
File: client/lingua-read-client/src/components/texts/TextCreate.js
================
import React, { useState, useEffect } from 'react';
import { Container, Form, Button, Card, Alert, Spinner } from 'react-bootstrap';
import { useNavigate } from 'react-router-dom';
import { createText, getLanguages } from '../../utils/api';

const TextCreate = () => {
  const [title, setTitle] = useState('');
  const [content, setContent] = useState('');
  const [languageId, setLanguageId] = useState('');
  const [languages, setLanguages] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [loadingLanguages, setLoadingLanguages] = useState(true);
  
  const navigate = useNavigate();

  useEffect(() => {
    const fetchLanguages = async () => {
      try {
        const data = await getLanguages();
        setLanguages(data);
        if (data.length > 0) {
          setLanguageId(data[0].id);
        }
      } catch (err) {
        setError('Failed to load languages. Please try again later.');
      } finally {
        setLoadingLanguages(false);
      }
    };

    fetchLanguages();
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!title.trim()) {
      setError('Please enter a title');
      return;
    }
    
    if (!content.trim()) {
      setError('Please enter some content');
      return;
    }
    
    if (!languageId) {
      setError('Please select a language');
      return;
    }
    
    setLoading(true);
    setError('');
    
    try {
      const newText = await createText(title, content, languageId);
      navigate(`/texts/${newText.id}`);
    } catch (err) {
      setError(err.message || 'Failed to create text. Please try again.');
      setLoading(false);
    }
  };

  if (loadingLanguages) {
    return (
      <Container className="py-5 text-center">
        <Spinner animation="border" role="status">
          <span className="visually-hidden">Loading languages...</span>
        </Spinner>
      </Container>
    );
  }

  return (
    <Container className="py-5">
      <Card className="shadow-sm">
        <Card.Body className="p-4">
          <h2 className="mb-4">Add New Text</h2>
          
          {error && <Alert variant="danger">{error}</Alert>}
          
          <Form onSubmit={handleSubmit}>
            <Form.Group className="mb-3" controlId="title">
              <Form.Label>Title</Form.Label>
              <Form.Control
                type="text"
                placeholder="Enter a title for your text"
                value={title}
                onChange={(e) => setTitle(e.target.value)}
                required
              />
            </Form.Group>

            <Form.Group className="mb-3" controlId="language">
              <Form.Label>Language</Form.Label>
              <Form.Select
                value={languageId}
                onChange={(e) => setLanguageId(e.target.value)}
                required
              >
                {languages.length === 0 ? (
                  <option value="">No languages available</option>
                ) : (
                  languages.map((language) => (
                    <option key={language.id} value={language.id}>
                      {language.name}
                    </option>
                  ))
                )}
              </Form.Select>
            </Form.Group>

            <Form.Group className="mb-4" controlId="content">
              <Form.Label>Text Content</Form.Label>
              <Form.Control
                as="textarea"
                rows={10}
                placeholder="Paste or type your text here"
                value={content}
                onChange={(e) => setContent(e.target.value)}
                required
              />
              <Form.Text className="text-muted">
                Paste text in your target language that you want to read and learn from.
              </Form.Text>
            </Form.Group>

            <div className="d-grid gap-2">
              <Button variant="primary" type="submit" disabled={loading || languages.length === 0}>
                {loading ? 'Creating...' : 'Create Text'}
              </Button>
            </div>
          </Form>
        </Card.Body>
      </Card>
    </Container>
  );
};

export default TextCreate;

================
File: client/lingua-read-client/src/components/texts/TextDisplay.css
================
.text-content {
  font-size: 1.2rem;
  line-height: 1.7;
  padding: 10px;
}

.text-content span {
  cursor: pointer;
}

.text-content-col {
  height: calc(100vh - 100px);
  overflow-y: auto;
}

.word-editing-col {
  height: calc(100vh - 100px);
  position: sticky;
  top: 20px;
}

.word-editing-col .card {
  height: 100%;
  display: flex;
  flex-direction: column;
}

.word-editing-col .card-body {
  overflow-y: auto;
}

.status-buttons {
  margin-top: 20px;
}

.status-button {
  font-weight: bold;
  font-size: 1.1rem;
  padding: 10px 0;
}

/* Status button colors */
.status-button.btn-danger {
  background-color: #dc3545;
}

.status-button.btn-warning {
  background-color: #ffc107;
  color: #000;
}

.status-button.btn-info {
  background-color: #17a2b8;
}

.status-button.btn-primary {
  background-color: #0d6efd;
}

.status-button.btn-success {
  background-color: #198754;
}

@media (max-width: 767px) {
  .text-content-col {
    height: auto;
  }
}

================
File: client/lingua-read-client/src/components/texts/TextList.js
================
import React, { useEffect } from 'react';
import { Container, Row, Col, Card, Button, Spinner, Alert } from 'react-bootstrap';
import { Link } from 'react-router-dom';
import { useTextsStore } from '../../utils/store';
import { getTexts } from '../../utils/api';

const TextList = () => {
  const { texts, loading, error, setTexts, setLoading, setError } = useTextsStore();

  useEffect(() => {
    const fetchTexts = async () => {
      setLoading(true);
      try {
        const data = await getTexts();
        setTexts(data);
      } catch (err) {
        setError(err.message || 'Failed to load texts');
      } finally {
        setLoading(false);
      }
    };

    fetchTexts();
  }, [setTexts, setLoading, setError]);

  if (loading) {
    return (
      <Container className="py-5 text-center">
        <Spinner animation="border" role="status">
          <span className="visually-hidden">Loading...</span>
        </Spinner>
      </Container>
    );
  }

  return (
    <Container className="py-5">
      <div className="d-flex justify-content-between align-items-center mb-4">
        <h1>My Texts</h1>
        <Button as={Link} to="/texts/create" variant="success">
          Add New Text
        </Button>
      </div>

      {error && <Alert variant="danger">{error}</Alert>}

      {texts.length === 0 ? (
        <Card className="text-center p-5">
          <Card.Body>
            <h3>You don't have any texts yet</h3>
            <p className="mb-4">Add your first text to start learning vocabulary</p>
            <Button as={Link} to="/texts/create" variant="primary">
              Add Your First Text
            </Button>
          </Card.Body>
        </Card>
      ) : (
        <Row>
          {texts.map((text) => (
            <Col md={4} key={text.id} className="mb-4">
              <Card className="h-100 text-card shadow-sm">
                <Card.Body>
                  <Card.Title>{text.title}</Card.Title>
                  <Card.Subtitle className="mb-2 text-muted">
                    {text.language.name}
                  </Card.Subtitle>
                  <Card.Text>
                    {text.content.substring(0, 100)}...
                  </Card.Text>
                  <div className="mt-3">
                    <small className="text-muted">
                      Words: {text.wordCount || 'N/A'} | 
                      Learning: {text.learningWords || 0} | 
                      Known: {text.knownWords || 0}
                    </small>
                  </div>
                </Card.Body>
                <Card.Footer className="bg-white border-top-0">
                  <Button 
                    as={Link} 
                    to={`/texts/${text.id}`} 
                    variant="outline-primary" 
                    className="w-100"
                  >
                    Continue Reading
                  </Button>
                </Card.Footer>
              </Card>
            </Col>
          ))}
        </Row>
      )}
    </Container>
  );
};

export default TextList;

================
File: client/lingua-read-client/src/components/TranslationPopup.js
================
import React from 'react';
import { Modal, Button, Spinner } from 'react-bootstrap';

const TranslationPopup = ({ 
  show, 
  handleClose, 
  originalText, 
  translatedText, 
  isTranslating,
  sourceLanguage,
  targetLanguage
}) => {
  return (
    <Modal
      show={show}
      onHide={handleClose}
      size="lg"
      aria-labelledby="translation-popup"
      centered
    >
      <Modal.Header closeButton>
        <Modal.Title id="translation-popup">
          Translation ({sourceLanguage} → {targetLanguage})
        </Modal.Title>
      </Modal.Header>
      <Modal.Body>
        <div className="mb-3">
          <h6>Original Text:</h6>
          <div className="p-3 border rounded">
            {originalText}
          </div>
        </div>
        
        <div>
          <h6>Translation:</h6>
          {isTranslating ? (
            <div className="d-flex justify-content-center align-items-center p-4">
              <Spinner animation="border" className="me-2" />
              <span>Translating text...</span>
            </div>
          ) : (
            <div className="p-3 border rounded bg-light">
              {translatedText}
            </div>
          )}
        </div>
      </Modal.Body>
      <Modal.Footer>
        <Button variant="secondary" onClick={handleClose}>
          Close
        </Button>
      </Modal.Footer>
    </Modal>
  );
};

export default TranslationPopup;

================
File: client/lingua-read-client/src/index.css
================
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background-color: #f8f9fa;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

/* Text display word styles */
.untracked-word {
  color: #0066ff !important; 
  cursor: pointer;
}

.highlighted-word {
  cursor: pointer;
  padding: 2px 0;
  margin: 0 2px;
  border-radius: 3px;
}

/* Status color scheme */
.word-status-1 {
  background-color: #ff6666 !important; /* Red for new words */
  color: white !important;
}

.word-status-2 {
  background-color: #ff9933 !important; /* Orange for learning words */
  color: #333 !important;
}

.word-status-3 {
  background-color: #ffdd66 !important; /* Yellow for familiar words */
  color: #333 !important;
}

.word-status-4 {
  background-color: #99dd66 !important; /* Light green for advanced words */
  color: #333 !important;
}

.word-status-5 {
  background-color: #66cc66 !important; /* Green for known words */
  color: #333 !important;
}

.text-content {
  font-size: 1.2rem;
  line-height: 1.7;
}

.auth-form {
  max-width: 400px;
  margin: 0 auto;
  padding: 20px;
  background-color: white;
  border-radius: 5px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

.text-card {
  transition: transform 0.2s;
}

.text-card:hover {
  transform: translateY(-5px);
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
}

================
File: client/lingua-read-client/src/index.js
================
import React from 'react';
import ReactDOM from 'react-dom/client';
import { BrowserRouter } from 'react-router-dom';
import 'bootstrap/dist/css/bootstrap.min.css';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <BrowserRouter>
      <App />
    </BrowserRouter>
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

================
File: client/lingua-read-client/src/pages/BookCreate.js
================
import React, { useState, useEffect } from 'react';
import { Container, Form, Button, Card, Alert, Spinner, Row, Col } from 'react-bootstrap';
import { useNavigate } from 'react-router-dom';
import { createBook, getLanguages } from '../utils/api';

const BookCreate = () => {
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [content, setContent] = useState('');
  const [languageId, setLanguageId] = useState('');
  const [splitMethod, setSplitMethod] = useState('paragraph');
  const [maxSegmentSize, setMaxSegmentSize] = useState(3000);
  const [languages, setLanguages] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [loadingLanguages, setLoadingLanguages] = useState(true);
  
  const navigate = useNavigate();

  useEffect(() => {
    const fetchLanguages = async () => {
      try {
        const data = await getLanguages();
        setLanguages(data);
        if (data.length > 0) {
          setLanguageId(data[0].languageId.toString());
        }
      } catch (err) {
        setError('Failed to load languages. Please try again later.');
      } finally {
        setLoadingLanguages(false);
      }
    };

    fetchLanguages();
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!title.trim()) {
      setError('Please enter a title');
      return;
    }
    
    if (!content.trim()) {
      setError('Please enter some content');
      return;
    }
    
    if (!languageId) {
      setError('Please select a language');
      return;
    }
    
    setLoading(true);
    setError('');
    
    try {
      const newBook = await createBook(
        title, 
        description, 
        parseInt(languageId, 10), 
        content,
        splitMethod,
        parseInt(maxSegmentSize, 10)
      );
      navigate(`/books/${newBook.bookId}`);
    } catch (err) {
      setError(err.message || 'Failed to create book. Please try again.');
      setLoading(false);
    }
  };

  if (loadingLanguages) {
    return (
      <Container className="py-5 text-center">
        <Spinner animation="border" role="status">
          <span className="visually-hidden">Loading languages...</span>
        </Spinner>
      </Container>
    );
  }

  return (
    <Container className="py-5">
      <Card className="shadow-sm">
        <Card.Body className="p-4">
          <h2 className="mb-4">Create New Book</h2>
          
          {error && <Alert variant="danger">{error}</Alert>}
          
          <Form onSubmit={handleSubmit}>
            <Row>
              <Col md={6}>
                <Form.Group className="mb-3" controlId="title">
                  <Form.Label>Book Title</Form.Label>
                  <Form.Control
                    type="text"
                    placeholder="Enter a title for your book"
                    value={title}
                    onChange={(e) => setTitle(e.target.value)}
                    required
                  />
                </Form.Group>
              </Col>
              
              <Col md={6}>
                <Form.Group className="mb-3" controlId="language">
                  <Form.Label>Language</Form.Label>
                  <Form.Select
                    value={languageId}
                    onChange={(e) => setLanguageId(e.target.value)}
                    required
                  >
                    {languages.length === 0 ? (
                      <option value="">No languages available</option>
                    ) : (
                      languages.map((language) => (
                        <option key={language.languageId} value={language.languageId.toString()}>
                          {language.name}
                        </option>
                      ))
                    )}
                  </Form.Select>
                </Form.Group>
              </Col>
            </Row>

            <Form.Group className="mb-3" controlId="description">
              <Form.Label>Description (Optional)</Form.Label>
              <Form.Control
                as="textarea"
                rows={2}
                placeholder="Brief description of the book"
                value={description}
                onChange={(e) => setDescription(e.target.value)}
              />
            </Form.Group>

            <Row className="mb-3">
              <Col md={6}>
                <Form.Group controlId="splitMethod">
                  <Form.Label>Split Method</Form.Label>
                  <Form.Select
                    value={splitMethod}
                    onChange={(e) => setSplitMethod(e.target.value)}
                    required
                  >
                    <option value="paragraph">By Paragraphs</option>
                    <option value="sentence">By Sentences</option>
                    <option value="length">By Character Length</option>
                  </Form.Select>
                  <Form.Text className="text-muted">
                    Choose how to split the book into smaller sections.
                  </Form.Text>
                </Form.Group>
              </Col>
              
              <Col md={6}>
                <Form.Group controlId="maxSegmentSize">
                  <Form.Label>Maximum Size Per Section</Form.Label>
                  <Form.Control
                    type="number"
                    min="500"
                    max="50000"
                    value={maxSegmentSize}
                    onChange={(e) => setMaxSegmentSize(e.target.value)}
                    required
                  />
                  <Form.Text className="text-muted">
                    Maximum characters per section (500-50,000)
                  </Form.Text>
                </Form.Group>
              </Col>
            </Row>

            <Form.Group className="mb-4" controlId="content">
              <Form.Label>Book Content</Form.Label>
              <Form.Control
                as="textarea"
                rows={12}
                placeholder="Paste or type your book content here"
                value={content}
                onChange={(e) => setContent(e.target.value)}
                required
              />
              <Form.Text className="text-muted">
                Paste the full text of your book or story. It will be automatically split into smaller, 
                manageable sections for easier reading and vocabulary learning.
              </Form.Text>
            </Form.Group>

            <div className="d-grid gap-2">
              <Button variant="primary" type="submit" disabled={loading || languages.length === 0}>
                {loading ? 'Creating...' : 'Create Book with Auto-Split Sections'}
              </Button>
              <Button 
                variant="outline-secondary" 
                onClick={() => navigate('/books')}
                disabled={loading}
              >
                Cancel
              </Button>
            </div>
          </Form>
        </Card.Body>
      </Card>
    </Container>
  );
};

export default BookCreate;

================
File: client/lingua-read-client/src/pages/BookDetail.js
================
import React, { useState, useEffect } from 'react';
import { Container, Row, Col, Card, Button, Alert, Spinner, ListGroup, Badge, ProgressBar, Modal } from 'react-bootstrap';
import { useParams, useNavigate, Link } from 'react-router-dom';
import { getBook, finishBook } from '../utils/api';
import { formatDate, calculateReadingTime } from '../utils/helpers';

const BookDetail = () => {
  const { bookId } = useParams();
  const [book, setBook] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const navigate = useNavigate();
  const [finishingBook, setFinishingBook] = useState(false);
  const [showStatsModal, setShowStatsModal] = useState(false);
  const [stats, setStats] = useState(null);

  useEffect(() => {
    const fetchBook = async () => {
      try {
        const data = await getBook(bookId);
        setBook(data);
        setError('');
      } catch (err) {
        setError(err.message || 'Failed to load book details');
      } finally {
        setLoading(false);
      }
    };

    fetchBook();
  }, [bookId]);

  const handleFinishBook = async () => {
    if (window.confirm('Are you sure you want to mark this book as finished? This will mark all words in the book as known.')) {
      setFinishingBook(true);
      try {
        const updatedStats = await finishBook(bookId);
        setStats(updatedStats);
        setShowStatsModal(true);
        
        // Update book with finished status
        setBook(prev => ({
          ...prev,
          isFinished: true
        }));
      } catch (err) {
        alert(`Failed to mark book as finished: ${err.message}`);
      } finally {
        setFinishingBook(false);
      }
    }
  };

  if (loading) {
    return (
      <Container className="py-5 text-center">
        <Spinner animation="border" role="status">
          <span className="visually-hidden">Loading...</span>
        </Spinner>
      </Container>
    );
  }

  if (error) {
    return (
      <Container className="py-5">
        <Alert variant="danger">
          {error}
          <div className="mt-3">
            <Button variant="outline-primary" onClick={() => navigate('/books')}>
              Back to Books
            </Button>
          </div>
        </Alert>
      </Container>
    );
  }

  if (!book) {
    return (
      <Container className="py-5">
        <Alert variant="warning">
          Book not found
          <div className="mt-3">
            <Button variant="outline-primary" onClick={() => navigate('/books')}>
              Back to Books
            </Button>
          </div>
        </Alert>
      </Container>
    );
  }

  return (
    <Container className="py-5">
      <div className="d-flex justify-content-between align-items-center mb-4">
        <div>
          <h1 className="mb-1">{book.title}</h1>
          <p className="text-muted mb-2">
            Language: {book.languageName} | 
            Parts: {book.parts.length} | 
            Added: {formatDate(book.createdAt)}
          </p>
          {book.description && (
            <p className="lead">{book.description}</p>
          )}
        </div>
        <div className="d-flex flex-column gap-2">
          {/* Add prominent reading button */}
          {book.parts.length > 0 && (
            book.lastReadTextId ? (
              <Button 
                variant="primary" 
                size="lg"
                onClick={() => navigate(`/texts/${book.lastReadTextId}`)}
              >
                Continue Reading
              </Button>
            ) : (
              <Button 
                variant="primary" 
                size="lg"
                onClick={() => navigate(`/texts/${book.parts[0].textId}`)}
              >
                Start Reading
              </Button>
            )
          )}
          <Button 
            variant="outline-secondary" 
            onClick={() => navigate('/books')}
          >
            Back to Books
          </Button>
        </div>
      </div>

      <Card className="shadow-sm mb-4">
        <Card.Header as="h5">Book Sections</Card.Header>
        <ListGroup variant="flush">
          {book.parts.map((part, index) => (
            <ListGroup.Item 
              key={part.textId}
              className="d-flex justify-content-between align-items-center"
              action
              as={Link}
              to={`/texts/${part.textId}`}
            >
              <div>
                <h6 className="mb-0">{part.title}</h6>
                <small className="text-muted">Added: {formatDate(part.createdAt)}</small>
              </div>
              <div>
                <Badge bg="primary" pill>
                  Part {part.partNumber}
                </Badge>
              </div>
            </ListGroup.Item>
          ))}
        </ListGroup>
      </Card>

      {book.parts.length === 0 && (
        <Alert variant="info">
          This book doesn't have any parts yet.
        </Alert>
      )}

      <div className="d-flex justify-content-between mb-4">
        {!book.isFinished && (
          <Button 
            variant="success" 
            onClick={handleFinishBook} 
            disabled={finishingBook}
          >
            {finishingBook ? <Spinner size="sm" animation="border" /> : null}
            {' '}
            Mark Book as Finished
          </Button>
        )}
      </div>

      {/* Stats Modal */}
      <Modal show={showStatsModal} onHide={() => setShowStatsModal(false)}>
        <Modal.Header closeButton>
          <Modal.Title>Book Completed!</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          {stats && (
            <div>
              <p className="mb-3">You've completed the book "<strong>{book.title}</strong>"!</p>
              <p className="mb-2">Progress:</p>
              <ProgressBar now={100} label={`100%`} className="mb-3" />
              
              <Row className="mb-3">
                <Col xs={6}>
                  <div className="d-flex flex-column align-items-center p-2 border rounded">
                    <div className="h2 mb-0">{stats.totalWords}</div>
                    <div>Total Words</div>
                  </div>
                </Col>
                <Col xs={6}>
                  <div className="d-flex flex-column align-items-center p-2 border rounded bg-success text-white">
                    <div className="h2 mb-0">{stats.knownWords}</div>
                    <div>Known Words</div>
                  </div>
                </Col>
              </Row>
              
              <p>All words in this book have been marked as known. Great job!</p>
            </div>
          )}
        </Modal.Body>
        <Modal.Footer>
          <Button variant="primary" onClick={() => setShowStatsModal(false)}>
            Close
          </Button>
        </Modal.Footer>
      </Modal>
    </Container>
  );
};

export default BookDetail;

================
File: client/lingua-read-client/src/pages/BookList.js
================
import React, { useState, useEffect } from 'react';
import { Container, Row, Col, Card, Button, Alert, Spinner, ProgressBar } from 'react-bootstrap';
import { Link, useNavigate } from 'react-router-dom';
import { getBooks } from '../utils/api';
import { formatDate } from '../utils/helpers';

const BookList = () => {
  const [books, setBooks] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const navigate = useNavigate();

  useEffect(() => {
    const fetchBooks = async () => {
      try {
        const data = await getBooks();
        setBooks(data);
        setError('');
      } catch (err) {
        setError(err.message || 'Failed to load books');
      } finally {
        setLoading(false);
      }
    };

    fetchBooks();
  }, []);

  if (loading) {
    return (
      <Container className="py-5 text-center">
        <Spinner animation="border" role="status">
          <span className="visually-hidden">Loading...</span>
        </Spinner>
      </Container>
    );
  }

  return (
    <Container className="py-5">
      <div className="d-flex justify-content-between mb-4">
        <h2>My Books</h2>
        <Button 
          variant="primary" 
          onClick={() => navigate('/books/create')}
        >
          Add New Book
        </Button>
      </div>

      {error && <Alert variant="danger">{error}</Alert>}

      {!loading && books.length === 0 && (
        <Alert variant="info">
          You haven't added any books yet. Click "Add New Book" to get started.
        </Alert>
      )}

      <Row xs={1} md={2} lg={3} className="g-4">
        {books.map((book) => (
          <Col key={book.bookId}>
            <Card className="h-100 shadow-sm book-card">
              <Card.Body>
                <Card.Title as="h5" className="text-truncate">{book.title}</Card.Title>
                <Card.Subtitle className="mb-2 text-muted">
                  {book.languageName}
                </Card.Subtitle>
                <Card.Text className="text-truncate">
                  {book.description || 'No description provided'}
                </Card.Text>
                
                {/* Reading statistics */}
                <div className="mb-2">
                  <small className="text-muted d-block mb-1">Reading progress:</small>
                  <ProgressBar 
                    now={book.completionPercentage} 
                    label={`${book.completionPercentage}%`} 
                    variant={
                      book.completionPercentage < 25 ? 'danger' : 
                      book.completionPercentage < 50 ? 'warning' : 
                      book.completionPercentage < 75 ? 'info' : 'success'
                    }
                  />
                </div>
                
                {book.totalWords > 0 && (
                  <div className="text-muted small mb-2">
                    <Row>
                      <Col>Known: {book.knownWords}</Col>
                      <Col>Learning: {book.learningWords}</Col>
                      <Col>Total: {book.totalWords}</Col>
                    </Row>
                  </div>
                )}
                
                <div className="text-muted small mb-3">
                  Parts: {book.partCount} | Added: {formatDate(book.createdAt)}
                  {book.lastReadAt && (
                    <> | Last read: {formatDate(book.lastReadAt)}</>
                  )}
                </div>
              </Card.Body>
              <Card.Footer className="bg-white d-flex">
                <Link 
                  to={`/books/${book.bookId}`} 
                  className="btn btn-outline-primary flex-grow-1 me-2"
                >
                  View Book
                </Link>
                {book.lastReadTextId ? (
                  <Link 
                    to={`/texts/${book.lastReadTextId}`} 
                    className="btn btn-primary flex-grow-1"
                  >
                    Continue Reading
                  </Link>
                ) : book.partCount > 0 ? (
                  <Button 
                    variant="primary"
                    className="flex-grow-1"
                    onClick={() => navigate(`/texts/${book.parts?.[0]?.textId || ''}`)}
                    disabled={!book.parts?.[0]?.textId}
                  >
                    Start Reading
                  </Button>
                ) : null}
              </Card.Footer>
            </Card>
          </Col>
        ))}
      </Row>

      <div className="mt-4 text-center">
        <Button
          variant="outline-secondary"
          onClick={() => navigate('/texts')}
        >
          View Individual Texts
        </Button>
      </div>
    </Container>
  );
};

export default BookList;

================
File: client/lingua-read-client/src/pages/Home.js
================
import React from 'react';
import { Container, Row, Col, Card, Button } from 'react-bootstrap';
import { Link } from 'react-router-dom';
import { useAuthStore } from '../utils/store';

const Home = () => {
  const { token } = useAuthStore();

  return (
    <Container className="py-5">
      <Row className="justify-content-center">
        <Col md={8} className="text-center">
          <h1 className="display-4 mb-4">Welcome to LinguaRead</h1>
          <p className="lead mb-5">
            Improve your language skills by reading texts and tracking your vocabulary progress.
            LinguaRead helps you learn new words in context and remember them better.
          </p>
          
          {token ? (
            <Row className="justify-content-center">
              <Col md={6} className="mb-4">
                <Card className="h-100 shadow-sm">
                  <Card.Body>
                    <Card.Title>My Texts</Card.Title>
                    <Card.Text>
                      View your saved texts and continue learning where you left off.
                    </Card.Text>
                    <Button as={Link} to="/texts" variant="primary">Go to My Texts</Button>
                  </Card.Body>
                </Card>
              </Col>
              <Col md={6} className="mb-4">
                <Card className="h-100 shadow-sm">
                  <Card.Body>
                    <Card.Title>Add New Text</Card.Title>
                    <Card.Text>
                      Import a new text in your target language to start learning new vocabulary.
                    </Card.Text>
                    <Button as={Link} to="/texts/create" variant="success">Add Text</Button>
                  </Card.Body>
                </Card>
              </Col>
            </Row>
          ) : (
            <Row className="justify-content-center">
              <Col md={6} className="mb-4">
                <Card className="h-100 shadow-sm">
                  <Card.Body>
                    <Card.Title>Get Started</Card.Title>
                    <Card.Text>
                      Create an account to start tracking your language learning progress.
                    </Card.Text>
                    <Button as={Link} to="/register" variant="primary">Register</Button>
                  </Card.Body>
                </Card>
              </Col>
              <Col md={6} className="mb-4">
                <Card className="h-100 shadow-sm">
                  <Card.Body>
                    <Card.Title>Already a User?</Card.Title>
                    <Card.Text>
                      Log in to access your saved texts and continue learning.
                    </Card.Text>
                    <Button as={Link} to="/login" variant="outline-primary">Login</Button>
                  </Card.Body>
                </Card>
              </Col>
            </Row>
          )}
          
          <Row className="mt-5">
            <Col>
              <h2 className="mb-4">How It Works</h2>
              <Row className="text-start">
                <Col md={4} className="mb-4">
                  <h4>1. Add Texts</h4>
                  <p>Import texts in your target language that interest you.</p>
                </Col>
                <Col md={4} className="mb-4">
                  <h4>2. Mark Words</h4>
                  <p>Highlight words you're learning and track your progress.</p>
                </Col>
                <Col md={4} className="mb-4">
                  <h4>3. Review & Learn</h4>
                  <p>See your vocabulary growth over time as you read more texts.</p>
                </Col>
              </Row>
            </Col>
          </Row>
        </Col>
      </Row>
    </Container>
  );
};

export default Home;

================
File: client/lingua-read-client/src/pages/Login.js
================
import React, { useState } from 'react';
import { Container, Row, Col, Form, Button, Alert, Card } from 'react-bootstrap';
import { Link, useNavigate } from 'react-router-dom';
import { login } from '../utils/api';
import { useAuthStore } from '../utils/store';

const Login = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  
  const navigate = useNavigate();
  const { setToken } = useAuthStore();

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setLoading(true);
    
    try {
      const data = await login(email, password);
      setToken(data.token);
      navigate('/texts');
    } catch (err) {
      setError(err.message || 'Failed to login. Please check your credentials.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <Container className="py-5">
      <Row className="justify-content-center">
        <Col md={6}>
          <Card className="shadow-sm">
            <Card.Body className="p-4">
              <h2 className="text-center mb-4">Login to LinguaRead</h2>
              
              {error && <Alert variant="danger">{error}</Alert>}
              
              <Form onSubmit={handleSubmit} className="auth-form">
                <Form.Group className="mb-3" controlId="email">
                  <Form.Label>Email address</Form.Label>
                  <Form.Control
                    type="email"
                    placeholder="Enter your email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    required
                  />
                </Form.Group>

                <Form.Group className="mb-4" controlId="password">
                  <Form.Label>Password</Form.Label>
                  <Form.Control
                    type="password"
                    placeholder="Enter your password"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    required
                  />
                </Form.Group>

                <div className="d-grid gap-2">
                  <Button variant="primary" type="submit" disabled={loading}>
                    {loading ? 'Logging in...' : 'Login'}
                  </Button>
                </div>
              </Form>
              
              <div className="text-center mt-4">
                <p>
                  Don't have an account?{' '}
                  <Link to="/register">Register here</Link>
                </p>
              </div>
            </Card.Body>
          </Card>
        </Col>
      </Row>
    </Container>
  );
};

export default Login;

================
File: client/lingua-read-client/src/pages/Register.js
================
import React, { useState } from 'react';
import { Container, Row, Col, Form, Button, Alert, Card } from 'react-bootstrap';
import { Link, useNavigate } from 'react-router-dom';
import { register, testApiConnection } from '../utils/api';
import { useAuthStore } from '../utils/store';

const Register = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  
  const navigate = useNavigate();
  const { setToken } = useAuthStore();

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    
    // Validate passwords match
    if (password !== confirmPassword) {
      setError('Passwords do not match');
      return;
    }
    
    // Validate password strength
    if (password.length < 6) {
      setError('Password must be at least 6 characters long');
      return;
    }
    
    setLoading(true);
    
    try {
      // Test API connection first
      const isConnected = await testApiConnection();
      if (!isConnected) {
        throw new Error('Unable to connect to the API server. Please check if the server is running.');
      }

      const data = await register(email, password);
      setToken(data.token);
      navigate('/texts');
    } catch (err) {
      setError(err.message || 'Failed to register. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <Container className="py-5">
      <Row className="justify-content-center">
        <Col md={6}>
          <Card className="shadow-sm">
            <Card.Body className="p-4">
              <h2 className="text-center mb-4">Create an Account</h2>
              
              {error && <Alert variant="danger">{error}</Alert>}
              
              <Form onSubmit={handleSubmit} className="auth-form">
                <Form.Group className="mb-3" controlId="email">
                  <Form.Label>Email address</Form.Label>
                  <Form.Control
                    type="email"
                    placeholder="Enter your email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    required
                  />
                  <Form.Text className="text-muted">
                    We'll never share your email with anyone else.
                  </Form.Text>
                </Form.Group>

                <Form.Group className="mb-3" controlId="password">
                  <Form.Label>Password</Form.Label>
                  <Form.Control
                    type="password"
                    placeholder="Create a password"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    required
                  />
                  <Form.Text className="text-muted">
                    Password must be at least 6 characters long.
                  </Form.Text>
                </Form.Group>

                <Form.Group className="mb-4" controlId="confirmPassword">
                  <Form.Label>Confirm Password</Form.Label>
                  <Form.Control
                    type="password"
                    placeholder="Confirm your password"
                    value={confirmPassword}
                    onChange={(e) => setConfirmPassword(e.target.value)}
                    required
                  />
                </Form.Group>

                <div className="d-grid gap-2">
                  <Button variant="primary" type="submit" disabled={loading}>
                    {loading ? 'Creating Account...' : 'Register'}
                  </Button>
                </div>
              </Form>
              
              <div className="text-center mt-4">
                <p>
                  Already have an account?{' '}
                  <Link to="/login">Login here</Link>
                </p>
              </div>
            </Card.Body>
          </Card>
        </Col>
      </Row>
    </Container>
  );
};

export default Register;

================
File: client/lingua-read-client/src/pages/Statistics.js
================
import React, { useState, useEffect } from 'react';
import { Container, Row, Col, Card, Alert, Spinner, ProgressBar, Table, Badge, Form, Button } from 'react-bootstrap';
import { useNavigate } from 'react-router-dom';
import { getUserStatistics, getReadingActivity } from '../utils/api';
import { formatDate } from '../utils/helpers';
import { 
  BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, 
  PieChart, Pie, Cell, LineChart, Line, ResponsiveContainer 
} from 'recharts';

// Custom colors for charts
const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8', '#82ca9d'];

const Statistics = () => {
  const [stats, setStats] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [selectedLanguage, setSelectedLanguage] = useState('all');
  const [initializingLanguages, setInitializingLanguages] = useState(false);
  const [readingActivity, setReadingActivity] = useState(null);
  const [activityPeriod, setActivityPeriod] = useState('all');
  const [loadingActivity, setLoadingActivity] = useState(false);
  const [usingFallbackData, setUsingFallbackData] = useState(false);
  const [networkStatus, setNetworkStatus] = useState('connecting');
  const navigate = useNavigate();

  // Check API connectivity
  useEffect(() => {
    const checkConnectivity = async () => {
      try {
        const healthUrl = new URL('/api/health', 'http://localhost:5000').toString();
        const response = await fetch(healthUrl, { 
          mode: 'cors',
          headers: { 'Accept': 'application/json' }
        });
        
        if (response.ok) {
          setNetworkStatus('connected');
          setUsingFallbackData(false);
        } else {
          setNetworkStatus('error');
          setUsingFallbackData(true);
        }
      } catch (error) {
        console.error('Network check failed:', error);
        setNetworkStatus('error');
        setUsingFallbackData(true);
      }
    };
    
    checkConnectivity();
  }, []);

  // Helper function to safely calculate total words read
  const calculateTotalWordsRead = (statistics) => {
    if (!statistics) {
      console.log('No statistics provided to calculateTotalWordsRead');
      return 0;
    }
    
    console.log('Calculating total words read from:', statistics);
    
    // First check if we have TotalWordsRead directly on the statistics object
    if (statistics.TotalWordsRead || statistics.totalWordsRead) {
      const directTotal = statistics.TotalWordsRead || statistics.totalWordsRead;
      console.log(`Using direct TotalWordsRead value: ${directTotal}`);
      return directTotal;
    }
    
    // Try to get language statistics, handling different case possibilities
    let langStats = [];
    
    if (Array.isArray(statistics.LanguageStatistics)) {
      langStats = statistics.LanguageStatistics;
      console.log('Using LanguageStatistics array (PascalCase)');
    } else if (Array.isArray(statistics.languageStatistics)) {
      langStats = statistics.languageStatistics;
      console.log('Using languageStatistics array (camelCase)');
    } else {
      console.log('No language statistics array found, trying to convert from object if present');
      // Try to handle if it's an object instead of an array
      if (statistics.LanguageStatistics && typeof statistics.LanguageStatistics === 'object') {
        langStats = Object.values(statistics.LanguageStatistics);
        console.log('Converted LanguageStatistics object to array');
      } else if (statistics.languageStatistics && typeof statistics.languageStatistics === 'object') {
        langStats = Object.values(statistics.languageStatistics);
        console.log('Converted languageStatistics object to array');
      }
    }
    
    // Log for debugging
    console.log('Language statistics for total words calculation:', langStats);
    
    // Handle both camelCase and PascalCase property names
    try {
      const total = langStats.reduce((total, lang) => {
        if (!lang) {
          console.log('Found null/undefined language entry in array');
          return total;
        }
        
        // Check for both camelCase and PascalCase versions of the property
        const wordsRead = lang.TotalWordsRead || 
                        lang.totalWordsRead || 
                        0;
        
        console.log(`Language ${lang.LanguageName || lang.languageName || 'unknown'}: ${wordsRead} words read`);
        return total + wordsRead;
      }, 0);
      
      console.log(`Total words read calculated from language stats: ${total}`);
      return total;
    } catch (err) {
      console.error('Error calculating total words read:', err);
      return 0;
    }
  };

  useEffect(() => {
    const fetchStats = async () => {
      setLoading(true);
      setError(''); // Reset any existing errors
      
      try {
        console.log('Starting statistics fetch in Statistics component...');
        const data = await getUserStatistics();
        
        // Debug output for the raw data
        console.log('Statistics data received in component:', data);
        
        if (!data) {
          console.error('No data returned from getUserStatistics');
          setError('No statistics data available. The server might be offline or experiencing issues.');
          setStats(null);
          return;
        }
        
        // Fix case sensitivity issues - ensure we have properties in both formats
        if (data) {
          // Ensure LanguageStatistics exists in both cases
          if (data.languageStatistics && !data.LanguageStatistics) {
            data.LanguageStatistics = data.languageStatistics;
          } else if (data.LanguageStatistics && !data.languageStatistics) {
            data.languageStatistics = data.LanguageStatistics;
          }
          
          // Ensure we have an array for language statistics
          if (!data.LanguageStatistics) {
            data.LanguageStatistics = [];
          }
          
          // Ensure TotalWords and KnownWords properties exist
          data.TotalWords = data.TotalWords || data.totalWords || 0;
          data.KnownWords = data.KnownWords || data.knownWords || 0;
          data.LearningWords = data.LearningWords || data.learningWords || 0;
          data.TotalBooks = data.TotalBooks || data.totalBooks || 0;
          data.FinishedBooks = data.FinishedBooks || data.finishedBooks || 0;
          
          // Debug logging
          console.log('Normalized language statistics:', data.LanguageStatistics);
          console.log('Total languages:', data.TotalLanguages || data.totalLanguages || 0);
          console.log('Total words read calculation:', calculateTotalWordsRead(data));
        }
        
        setStats(data);
      } catch (err) {
        console.error('Failed to load statistics:', err);
        setError(err.message || 'Failed to load statistics. Please try again later.');
        // Ensure we still show a fallback UI even when error occurs
        setStats({
          TotalWords: 0,
          KnownWords: 0,
          LearningWords: 0,
          TotalBooks: 0,
          FinishedBooks: 0,
          LastActivity: new Date().toISOString(),
          TotalLanguages: 0,
          LanguageStatistics: []
        });
      } finally {
        setLoading(false);
      }
    };

    fetchStats();
  }, []);
  
  useEffect(() => {
    const fetchReadingActivity = async () => {
      setLoadingActivity(true);
      try {
        console.log(`Starting reading activity fetch in Statistics component for period: ${activityPeriod}`);
        const data = await getReadingActivity(activityPeriod);
        
        // Debug output for the raw data
        console.log('Reading activity data received in component:', data);
        
        if (!data) {
          console.error('No activity data returned from getReadingActivity');
          setReadingActivity({
            TotalWordsRead: 0,
            ActivityByDate: {},
            ActivityByLanguage: {}
          });
          return;
        }
        
        // Normalize data if it exists
        if (data) {
          // Ensure ActivityByDate exists
          data.ActivityByDate = data.ActivityByDate || data.activityByDate || {};
          
          // Ensure ActivityByLanguage exists
          data.ActivityByLanguage = data.ActivityByLanguage || data.activityByLanguage || {};
          
          // Ensure TotalWordsRead exists
          data.TotalWordsRead = data.TotalWordsRead || data.totalWordsRead || 0;
          
          console.log('Normalized reading activity data:', data);
        }
        
        setReadingActivity(data);
      } catch (err) {
        console.error('Failed to load reading activity', err);
        // Provide a fallback data structure
        setReadingActivity({
          TotalWordsRead: 0,
          ActivityByDate: {},
          ActivityByLanguage: {}
        });
      } finally {
        setLoadingActivity(false);
      }
    };
    
    fetchReadingActivity();
  }, [activityPeriod]);

  // Function to initialize languages if none exist
  const handleInitializeLanguages = async () => {
    try {
      setInitializingLanguages(true);
      
      // Call the admin endpoint to initialize languages
      const response = await fetch('http://localhost:5000/api/admin/initialize-languages', {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`,
          'Accept': 'application/json'
        }
      });
      
      if (!response.ok) {
        throw new Error('Failed to initialize languages');
      }
      
      // Refresh the page to reload data
      window.location.reload();
    } catch (error) {
      console.error('Error initializing languages:', error);
      setError('Failed to initialize languages. Please try again.');
    } finally {
      setInitializingLanguages(false);
    }
  };

  // Helper function to prepare activity by date data for charts
  const prepareActivityByDateData = () => {
    if (!readingActivity?.ActivityByDate) return [];
    
    return Object.entries(readingActivity.ActivityByDate)
      .map(([date, count]) => ({
        date,
        wordsRead: count
      }))
      .sort((a, b) => new Date(a.date) - new Date(b.date)); // Sort by date ascending
  };

  // Helper function to prepare activity by language data for charts
  const prepareActivityByLanguageData = () => {
    if (!readingActivity?.ActivityByLanguage) return [];
    
    return Object.entries(readingActivity.ActivityByLanguage)
      .map(([language, count]) => ({
        language,
        wordsRead: count
      }))
      .sort((a, b) => b.wordsRead - a.wordsRead); // Sort by count descending
  };

  // Helper function to prepare language statistics data for charts
  const prepareLanguageStatsData = () => {
    if (!stats?.LanguageStatistics) return [];
    
    return stats.LanguageStatistics.map(lang => {
      const langName = lang.LanguageName || lang.languageName;
      const wordCount = lang.WordCount || lang.wordCount || 0;
      const wordsRead = lang.TotalWordsRead || lang.totalWordsRead || 0;
      
      return {
        name: langName,
        wordCount,
        wordsRead
      };
    }).sort((a, b) => b.wordCount - a.wordCount); // Sort by word count descending
  };

  // Network Status Banner
  const renderNetworkBanner = () => {
    if (networkStatus === 'connected') {
      return null; // Don't show banner when connected
    }
    
    if (networkStatus === 'error') {
      return (
        <Alert variant="danger" className="mb-4">
          <strong>Error:</strong> Unable to connect to server. Some features may be limited.
        </Alert>
      );
    }
    
    // Default connecting message
    return (
      <Alert variant="info" className="mb-4">
        <strong>Connecting:</strong> Establishing connection to the server...
      </Alert>
    );
  };

  // Show appropriate loading UI
  if (loading) {
    return (
      <Container className="mt-4">
        {renderNetworkBanner()}
        <div className="text-center">
          <Spinner animation="border" />
          <p>Loading your statistics...</p>
        </div>
      </Container>
    );
  }

  // Show error UI with more context
  if (error) {
    return (
      <Container className="mt-4">
        {renderNetworkBanner()}
        <Alert variant="danger">
          <Alert.Heading>Error Loading Statistics</Alert.Heading>
          <p>{error}</p>
          {usingFallbackData && (
            <p>
              <strong>Note:</strong> Unable to connect to the statistics API. 
              Try refreshing the page or checking your network connection.
            </p>
          )}
          <div className="d-flex justify-content-end">
            <Button variant="outline-danger" onClick={() => window.location.reload()}>
              Retry
            </Button>
          </div>
        </Alert>
      </Container>
    );
  }

  if (!stats) {
    return (
      <Container className="mt-4">
        {renderNetworkBanner()}
        <Alert variant="warning">
          <Alert.Heading>No Statistics Available</Alert.Heading>
          <p>We couldn't find any statistics data. This could be because:</p>
          <ul>
            <li>You haven't started reading any books yet</li>
            <li>The connection to the statistics server failed</li>
            <li>The statistics service is temporarily unavailable</li>
          </ul>
          <div className="d-flex justify-content-end">
            <Button variant="outline-warning" onClick={() => window.location.reload()}>
              Retry
            </Button>
          </div>
        </Alert>
      </Container>
    );
  }

  // Safely calculate percentages
  const completionPercentage = stats.TotalWords > 0 
    ? Math.round((stats.KnownWords / stats.TotalWords) * 100) 
    : 0;

  // Get language statistics safely
  const languageStats = stats?.LanguageStatistics || [];
  const totalLanguages = stats?.TotalLanguages || stats?.totalLanguages || 0;

  // Calculate total words read safely
  const totalWordsRead = calculateTotalWordsRead(stats);

  // Filter language statistics if a specific language is selected
  const filteredLanguageStats = selectedLanguage === 'all' 
    ? languageStats 
    : languageStats.filter(lang => {
        const langId = lang.LanguageId || lang.languageId;
        return langId && langId.toString() === selectedLanguage;
      });

  // Prepare data for vocabulary chart
  const vocabularyData = [
    { name: 'Known', value: stats.KnownWords },
    { name: 'Learning', value: stats.LearningWords },
    { name: 'Unknown', value: stats.TotalWords - stats.KnownWords - stats.LearningWords }
  ].filter(item => item.value > 0);

  // Prepare data for books chart
  const booksData = [
    { name: 'Finished', value: stats.FinishedBooks },
    { name: 'In Progress', value: stats.TotalBooks - stats.FinishedBooks }
  ].filter(item => item.value > 0);

  // Activity by date data
  const activityByDateData = prepareActivityByDateData();
  
  // Activity by language data
  const activityByLanguageData = prepareActivityByLanguageData();
  
  // Language statistics data for chart
  const languageStatsData = prepareLanguageStatsData();

  return (
    <Container className="mt-4">
      {renderNetworkBanner()}
      <h1 className="mb-4">Learning Statistics</h1>
      
      <Row className="mb-4">
        <Col md={8} className="mb-4">
          <Card>
            <Card.Header as="h4">Overall Progress</Card.Header>
            <Card.Body>
              <h5>Vocabulary Knowledge</h5>
              <ProgressBar now={completionPercentage} label={`${completionPercentage}%`} className="mb-3" />
              
              <Row className="text-center mt-4">
                <Col xs={4}>
                  <div className="border rounded p-3 h-100">
                    <h2 className="mb-0">{stats.TotalWords}</h2>
                    <p className="text-muted">Total Words</p>
                  </div>
                </Col>
                <Col xs={4}>
                  <div className="border rounded p-3 h-100 bg-success bg-opacity-10">
                    <h2 className="mb-0">{stats.KnownWords}</h2>
                    <p className="text-muted">Known Words</p>
                  </div>
                </Col>
                <Col xs={4}>
                  <div className="border rounded p-3 h-100 bg-warning bg-opacity-10">
                    <h2 className="mb-0">{stats.LearningWords}</h2>
                    <p className="text-muted">Learning Words</p>
                  </div>
                </Col>
              </Row>
              
              {/* Vocabulary Pie Chart */}
              {vocabularyData.length > 0 && (
                <div className="mt-4">
                  <h5>Vocabulary Distribution</h5>
                  <ResponsiveContainer width="100%" height={250}>
                    <PieChart>
                      <Pie
                        data={vocabularyData}
                        cx="50%"
                        cy="50%"
                        labelLine={true}
                        label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
                        outerRadius={80}
                        fill="#8884d8"
                        dataKey="value"
                      >
                        {vocabularyData.map((entry, index) => (
                          <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                        ))}
                      </Pie>
                      <Tooltip formatter={(value) => value} />
                      <Legend />
                    </PieChart>
                  </ResponsiveContainer>
                </div>
              )}
            </Card.Body>
          </Card>
        </Col>
        
        <Col md={4} className="mb-4">
          <Card>
            <Card.Header as="h4">Reading Summary</Card.Header>
            <Card.Body>
              <Row className="text-center">
                <Col xs={6} className="mb-3">
                  <div className="border rounded p-3">
                    <h2 className="mb-0">{stats.TotalBooks}</h2>
                    <p className="text-muted">Total Books</p>
                  </div>
                </Col>
                <Col xs={6} className="mb-3">
                  <div className="border rounded p-3 bg-success bg-opacity-10">
                    <h2 className="mb-0">{stats.FinishedBooks}</h2>
                    <p className="text-muted">Finished Books</p>
                  </div>
                </Col>
              </Row>
              
              {/* Total Words Read section - using the safe calculation function */}
              <div className="mt-3 border rounded p-3 bg-info bg-opacity-10">
                <p className="mb-1 text-muted">Total Words Read:</p>
                <h3 className="mb-0">
                  {totalWordsRead}
                </h3>
              </div>
              
              <div className="mt-3">
                <p className="mb-1">Last activity:</p>
                <p className="fw-bold">{formatDate(stats.LastActivity || stats.lastActivity)}</p>
              </div>
              
              <div className="mt-3">
                <p className="mb-1">Languages:</p>
                <p className="fw-bold">{totalLanguages}</p>
              </div>
              
              {/* Books Pie Chart */}
              {booksData.length > 0 && stats.TotalBooks > 0 && (
                <div className="mt-4">
                  <h5>Books Status</h5>
                  <ResponsiveContainer width="100%" height={200}>
                    <PieChart>
                      <Pie
                        data={booksData}
                        cx="50%"
                        cy="50%"
                        labelLine={true}
                        label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
                        outerRadius={70}
                        fill="#8884d8"
                        dataKey="value"
                      >
                        {booksData.map((entry, index) => (
                          <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                        ))}
                      </Pie>
                      <Tooltip />
                      <Legend />
                    </PieChart>
                  </ResponsiveContainer>
                </div>
              )}
            </Card.Body>
          </Card>
        </Col>
      </Row>
      
      <Card>
        <Card.Header as="h4">
          <div className="d-flex justify-content-between align-items-center">
            <span>Language Statistics</span>
            {languageStats && languageStats.length > 0 ? (
              <Form.Select 
                style={{ width: 'auto' }} 
                value={selectedLanguage}
                onChange={(e) => setSelectedLanguage(e.target.value)}
              >
                <option value="all">All Languages</option>
                {languageStats.map(lang => {
                  const langId = lang.LanguageId || lang.languageId;
                  const langName = lang.LanguageName || lang.languageName;
                  return langId && langName ? (
                    <option 
                      key={langId} 
                      value={langId.toString()}
                    >
                      {langName}
                    </option>
                  ) : null;
                }).filter(Boolean)}
              </Form.Select>
            ) : (
              <Button 
                variant="primary" 
                size="sm"
                onClick={handleInitializeLanguages}
                disabled={initializingLanguages}
              >
                {initializingLanguages ? 'Initializing...' : 'Initialize Languages'}
              </Button>
            )}
          </div>
        </Card.Header>
        <Card.Body>
          {filteredLanguageStats && filteredLanguageStats.length > 0 ? (
            <>
              <Table responsive striped hover>
                <thead>
                  <tr>
                    <th>Language</th>
                    <th>Word Count</th>
                    <th>Total Words Read</th>
                    <th>Books</th>
                    <th>Completed Books</th>
                    <th>Completion Rate</th>
                  </tr>
                </thead>
                <tbody>
                  {filteredLanguageStats.map(lang => {
                    // Get values safely using both camelCase and PascalCase properties
                    const langId = lang.LanguageId || lang.languageId;
                    const langName = lang.LanguageName || lang.languageName;
                    const wordCount = lang.WordCount || lang.wordCount || 0;
                    const wordsRead = lang.TotalWordsRead || lang.totalWordsRead || 0;
                    const bookCount = lang.BookCount || lang.bookCount || 0;
                    const finishedBookCount = lang.FinishedBookCount || lang.finishedBookCount || 0;
                    
                    const bookCompletionRate = bookCount > 0 
                      ? Math.round((finishedBookCount / bookCount) * 100) 
                      : 0;
                    
                    return langId ? (
                      <tr key={langId}>
                        <td>{langName}</td>
                        <td>{wordCount}</td>
                        <td>{wordsRead}</td>
                        <td>{bookCount}</td>
                        <td>{finishedBookCount}</td>
                        <td>
                          <div className="d-flex align-items-center">
                            <ProgressBar 
                              now={bookCompletionRate} 
                              style={{ width: '100px', height: '10px' }} 
                              className="me-2" 
                            />
                            <span>{bookCompletionRate}%</span>
                          </div>
                        </td>
                      </tr>
                    ) : null;
                  })}
                </tbody>
              </Table>
              
              {/* Language Statistics Chart */}
              {languageStatsData.length > 0 && (
                <div className="mt-4">
                  <h5>Language Comparison</h5>
                  <ResponsiveContainer width="100%" height={300}>
                    <BarChart
                      data={languageStatsData}
                      margin={{ top: 20, right: 30, left: 20, bottom: 70 }}
                    >
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis dataKey="name" angle={-45} textAnchor="end" height={70} />
                      <YAxis />
                      <Tooltip />
                      <Legend />
                      <Bar dataKey="wordCount" name="Total Words" fill="#8884d8" />
                      <Bar dataKey="wordsRead" name="Words Read" fill="#82ca9d" />
                    </BarChart>
                  </ResponsiveContainer>
                </div>
              )}
            </>
          ) : (
            <div className="text-center">
              <p>No language statistics available.</p>
              <p>This could be because no languages exist in the database or you haven't logged any reading activity yet.</p>
              {(!languageStats || languageStats.length === 0) && (
                <Button 
                  variant="primary"
                  onClick={handleInitializeLanguages}
                  disabled={initializingLanguages}
                >
                  {initializingLanguages ? 'Initializing...' : 'Initialize Languages'}
                </Button>
              )}
            </div>
          )}
        </Card.Body>
      </Card>
      
      <Card className="mt-4">
        <Card.Header as="h4">
          <div className="d-flex justify-content-between align-items-center">
            <span>Reading Activity Over Time</span>
            <Form.Select 
              style={{ width: 'auto' }} 
              value={activityPeriod}
              onChange={(e) => setActivityPeriod(e.target.value)}
            >
              <option value="all">All Time</option>
              <option value="today">Today</option>
              <option value="week">Last 7 Days</option>
              <option value="month">Last 30 Days</option>
              <option value="3months">Last 3 Months</option>
              <option value="6months">Last 6 Months</option>
              <option value="year">Last Year</option>
            </Form.Select>
          </div>
        </Card.Header>
        <Card.Body>
          {loadingActivity ? (
            <div className="text-center">
              <Spinner animation="border" size="sm" />
              <p>Loading activity data...</p>
            </div>
          ) : !readingActivity ? (
            <Alert variant="info">No reading activity data available.</Alert>
          ) : (
            <>
              <Row className="mb-4">
                <Col md={12}>
                  <div className="border rounded p-3 bg-light">
                    <h4 className="text-center">Total Words Read: {readingActivity?.TotalWordsRead || 0}</h4>
                  </div>
                </Col>
              </Row>
              
              <Row>
                <Col md={6} className="mb-4">
                  <h5>Activity by Date</h5>
                  {!readingActivity?.ActivityByDate || Object.keys(readingActivity.ActivityByDate).length === 0 ? (
                    <p>No data available for the selected period.</p>
                  ) : (
                    <>
                      {/* Activity by Date Line Chart */}
                      <ResponsiveContainer width="100%" height={300}>
                        <LineChart
                          data={activityByDateData}
                          margin={{ top: 5, right: 30, left: 20, bottom: 70 }}
                        >
                          <CartesianGrid strokeDasharray="3 3" />
                          <XAxis 
                            dataKey="date" 
                            angle={-45} 
                            textAnchor="end" 
                            height={70} 
                          />
                          <YAxis />
                          <Tooltip />
                          <Legend />
                          <Line 
                            type="monotone" 
                            dataKey="wordsRead" 
                            name="Words Read" 
                            stroke="#8884d8" 
                            activeDot={{ r: 8 }} 
                          />
                        </LineChart>
                      </ResponsiveContainer>
                      
                      <div className="mt-4">
                        <Table responsive striped hover>
                          <thead>
                            <tr>
                              <th>Date</th>
                              <th>Words Read</th>
                            </tr>
                          </thead>
                          <tbody>
                            {Object.entries(readingActivity.ActivityByDate)
                              .map(([date, count]) => (
                                <tr key={date}>
                                  <td>{date}</td>
                                  <td>{count}</td>
                                </tr>
                              ))}
                          </tbody>
                        </Table>
                      </div>
                    </>
                  )}
                </Col>
                
                <Col md={6}>
                  <h5>Activity by Language</h5>
                  {!readingActivity?.ActivityByLanguage || Object.keys(readingActivity.ActivityByLanguage).length === 0 ? (
                    <p>No data available for the selected period.</p>
                  ) : (
                    <>
                      {/* Activity by Language Bar Chart */}
                      <ResponsiveContainer width="100%" height={300}>
                        <BarChart
                          data={activityByLanguageData}
                          margin={{ top: 5, right: 30, left: 20, bottom: 70 }}
                        >
                          <CartesianGrid strokeDasharray="3 3" />
                          <XAxis 
                            dataKey="language" 
                            angle={-45} 
                            textAnchor="end" 
                            height={70} 
                          />
                          <YAxis />
                          <Tooltip />
                          <Legend />
                          <Bar 
                            dataKey="wordsRead" 
                            name="Words Read" 
                            fill="#82ca9d"
                          >
                            {activityByLanguageData.map((entry, index) => (
                              <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                            ))}
                          </Bar>
                        </BarChart>
                      </ResponsiveContainer>
                      
                      <div className="mt-4">
                        <Table responsive striped hover>
                          <thead>
                            <tr>
                              <th>Language</th>
                              <th>Words Read</th>
                            </tr>
                          </thead>
                          <tbody>
                            {Object.entries(readingActivity.ActivityByLanguage)
                              .map(([language, count]) => (
                                <tr key={language}>
                                  <td>{language}</td>
                                  <td>{count}</td>
                                </tr>
                              ))}
                          </tbody>
                        </Table>
                      </div>
                    </>
                  )}
                </Col>
              </Row>
            </>
          )}
        </Card.Body>
      </Card>
    </Container>
  );
};

export default Statistics;

================
File: client/lingua-read-client/src/pages/TextCreate.js
================
import React, { useState, useEffect } from 'react';
import { Container, Form, Button, Card, Alert, Spinner } from 'react-bootstrap';
import { useNavigate } from 'react-router-dom';
import { createText, getLanguages } from '../utils/api';

const TextCreate = () => {
  const [title, setTitle] = useState('');
  const [content, setContent] = useState('');
  const [languageId, setLanguageId] = useState('');
  const [languages, setLanguages] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [loadingLanguages, setLoadingLanguages] = useState(true);
  
  const navigate = useNavigate();

  useEffect(() => {
    const fetchLanguages = async () => {
      try {
        const data = await getLanguages();
        setLanguages(data);
        if (data.length > 0) {
          setLanguageId(data[0].languageId.toString());
        }
      } catch (err) {
        setError('Failed to load languages. Please try again later.');
      } finally {
        setLoadingLanguages(false);
      }
    };

    fetchLanguages();
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!title.trim()) {
      setError('Please enter a title');
      return;
    }
    
    if (!content.trim()) {
      setError('Please enter some content');
      return;
    }
    
    if (!languageId) {
      setError('Please select a language');
      return;
    }
    
    setLoading(true);
    setError('');
    
    try {
      const newText = await createText(title, content, parseInt(languageId, 10));
      navigate(`/texts/${newText.textId}`);
    } catch (err) {
      setError(err.message || 'Failed to create text. Please try again.');
      setLoading(false);
    }
  };

  if (loadingLanguages) {
    return (
      <Container className="py-5 text-center">
        <Spinner animation="border" role="status">
          <span className="visually-hidden">Loading languages...</span>
        </Spinner>
      </Container>
    );
  }

  return (
    <Container className="py-5">
      <Card className="shadow-sm">
        <Card.Body className="p-4">
          <h2 className="mb-4">Add New Text</h2>
          
          {error && <Alert variant="danger">{error}</Alert>}
          
          <Form onSubmit={handleSubmit}>
            <Form.Group className="mb-3" controlId="title">
              <Form.Label>Title</Form.Label>
              <Form.Control
                type="text"
                placeholder="Enter a title for your text"
                value={title}
                onChange={(e) => setTitle(e.target.value)}
                required
              />
            </Form.Group>

            <Form.Group className="mb-3" controlId="language">
              <Form.Label>Language</Form.Label>
              <Form.Select
                value={languageId}
                onChange={(e) => setLanguageId(e.target.value)}
                required
              >
                {languages.length === 0 ? (
                  <option value="">No languages available</option>
                ) : (
                  languages.map((language) => (
                    <option key={language.languageId} value={language.languageId.toString()}>
                      {language.name}
                    </option>
                  ))
                )}
              </Form.Select>
            </Form.Group>

            <Form.Group className="mb-4" controlId="content">
              <Form.Label>Text Content</Form.Label>
              <Form.Control
                as="textarea"
                rows={10}
                placeholder="Paste or type your text here"
                value={content}
                onChange={(e) => setContent(e.target.value)}
                required
              />
              <Form.Text className="text-muted">
                Paste text in your target language that you want to read and learn from.
              </Form.Text>
            </Form.Group>

            <div className="d-grid gap-2">
              <Button variant="primary" type="submit" disabled={loading || languages.length === 0}>
                {loading ? 'Creating...' : 'Create Text'}
              </Button>
            </div>
          </Form>
        </Card.Body>
      </Card>
    </Container>
  );
};

export default TextCreate;

================
File: client/lingua-read-client/src/pages/TextDisplay.js
================
import React, { useEffect, useState, useCallback, useRef } from 'react';
import { Container, Card, Spinner, Alert, Button, Modal, Form, Row, Col, Badge, ProgressBar } from 'react-bootstrap';
import { useParams, useNavigate } from 'react-router-dom';
import { getText, createWord, updateWord, updateLastRead, completeLesson, getBook, translateText, translateSentence, translateFullText } from '../utils/api';
import TranslationPopup from '../components/TranslationPopup';

// CSS for word highlighting
const styles = {
  highlightedWord: {
    cursor: 'pointer',
    padding: '0 2px',
    margin: '0 1px',
    borderRadius: '3px',
  },
  wordStatus0: { color: '#000', backgroundColor: 'transparent' }, // Not tracked yet
  wordStatus1: { color: '#fff', backgroundColor: '#ff6666' },     // New (red)
  wordStatus2: { color: '#333', backgroundColor: '#ff9933' },     // Learning (orange)
  wordStatus3: { color: '#333', backgroundColor: '#ffdd66' },     // Familiar (yellow)
  wordStatus4: { color: '#333', backgroundColor: '#99dd66' },     // Advanced (light green)
  wordStatus5: { color: '#333', backgroundColor: '#66cc66' },     // Known (green)
  untrackedWord: {
    cursor: 'pointer',
    color: '#007bff',
    textDecoration: 'underline',
  },
  textContainer: {
    height: 'calc(100vh - 120px)',
    overflowY: 'auto',
    padding: '15px',
    borderRight: '1px solid #eee'
  },
  translationPanel: {
    height: 'calc(100vh - 120px)',
    padding: '15px',
  },
  wordPanel: {
    marginTop: '20px',
    padding: '15px',
    backgroundColor: '#f8f9fa',
    borderRadius: '8px',
  },
  // Modal header styling
  modalHeader: {
    backgroundColor: '#f8f9fa',
    borderBottom: '1px solid #dee2e6',
  }
};

const TextDisplay = () => {
  const { textId } = useParams();
  const navigate = useNavigate();
  const textContentRef = useRef(null);
  
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [text, setText] = useState(null);
  const [book, setBook] = useState(null);
  const [words, setWords] = useState([]);
  
  // Word editing state
  const [selectedWord, setSelectedWord] = useState('');
  const [translation, setTranslation] = useState('');
  const [isTranslating, setIsTranslating] = useState(false);
  const [processingWord, setProcessingWord] = useState(false);
  // State to track the currently displayed word in the side panel
  const [displayedWord, setDisplayedWord] = useState(null);
  
  // Add success message state
  const [saveSuccess, setSaveSuccess] = useState(false);
  
  // Add states for lesson completion
  const [completing, setCompleting] = useState(false);
  const [stats, setStats] = useState(null);
  const [showStatsModal, setShowStatsModal] = useState(false);
  const [nextTextId, setNextTextId] = useState(null);

  // States for sentence translation
  const [selectedSentence, setSelectedSentence] = useState('');
  const [sentenceTranslation, setSentenceTranslation] = useState('');
  const [isSentenceTranslating, setIsSentenceTranslating] = useState(false);
  
  // States for full text translation popup
  const [showTranslationPopup, setShowTranslationPopup] = useState(false);
  const [fullTextTranslation, setFullTextTranslation] = useState('');
  const [isFullTextTranslating, setIsFullTextTranslating] = useState(false);

  useEffect(() => {
    const fetchText = async () => {
      setLoading(true);
      try {
        const data = await getText(textId);
        setText(data);
        setBook(data.book);
        
        // Initialize with words from the text
        setWords(data.words || []);
        
        // Now also fetch words for this language globally
        if (data.languageId) {
          await fetchAllLanguageWords(data.languageId);
        }
        
        // Update last read position if this text is part of a book
        if (data.bookId) {
          try {
            await updateLastRead(data.bookId, data.textId);
            
            // Find the next text in the book if there is one
            const bookData = await getBook(data.bookId);
            if (bookData && bookData.parts) {
              const currentPartIndex = bookData.parts.findIndex(part => part.textId === parseInt(textId));
              if (currentPartIndex >= 0 && currentPartIndex < bookData.parts.length - 1) {
                // There is a next part
                setNextTextId(bookData.parts[currentPartIndex + 1].textId);
              }
            }
          } catch (err) {
            console.error('Failed to update last read position:', err);
            // Non-critical error, so don't display to user
          }
        }
      } catch (err) {
        setError(err.message || 'Failed to load text');
      } finally {
        setLoading(false);
      }
    };

    fetchText();
    
    // Clear state when component unmounts
    return () => {
      setText(null);
      setWords([]);
      setError('');
      setNextTextId(null);
    };
  }, [textId]);
  
  // Fetch all words for the current language
  const fetchAllLanguageWords = async (languageId) => {
    try {
      // Call a new API endpoint to get all words for a language
      const response = await fetch(`http://localhost:5000/api/words/language/${languageId}`, {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`,
          'Accept': 'application/json'
        }
      });
      
      if (!response.ok) {
        throw new Error('Failed to fetch language words');
      }
      
      const allLanguageWords = await response.json();
      
      // Merge with existing words, avoiding duplicates
      setWords(prevWords => {
        const existingWordIds = new Set(prevWords.map(w => w.wordId));
        const newWords = allLanguageWords.filter(w => !existingWordIds.has(w.wordId));
        return [...prevWords, ...newWords];
      });
      
    } catch (error) {
      console.error('Error fetching language words:', error);
      // Don't set error state here as it's not critical
    }
  };

  const handleWordClick = async (word) => {
    console.log(`Word clicked: "${word}"`);
    console.log(`Character codes: ${Array.from(word).map(c => c.charCodeAt(0))}`);
    setSelectedWord(word);
    
    // Find if the word exists in our words list - use direct comparison instead of normalization
    // which can potentially modify special characters
    const wordLower = word.toLowerCase();
    const existingWord = words.find(w => 
      w.term && 
      w.term.toLowerCase() === wordLower
    );
    
    if (existingWord) {
      console.log(`Word exists in database: ${existingWord.term}, translation: ${existingWord.translation || 'none'}`);
      // If word exists, set its translation in the form and side panel
      setTranslation(existingWord.translation || '');
      setDisplayedWord({
        term: existingWord.term,
        translation: existingWord.translation || '',
        status: existingWord.status
      });
      
      // If no translation exists for this word, try to translate it automatically
      if (!existingWord.translation) {
        try {
          // Access the book's language code from the state
          const bookLanguage = book?.language?.code || 'FR'; // Default to French if language code is not available
          const userLanguage = 'EN'; // Default to English as target language
          
          console.log(`Attempting to translate existing word: ${word} from ${bookLanguage} to ${userLanguage}`);
          setIsTranslating(true);
          const result = await translateText(word, bookLanguage, userLanguage);
          console.log('Translation result:', result);
          
          if (result?.translatedText) {
            console.log(`Translation successful: "${result.translatedText}"`);
            setTranslation(result.translatedText);
            // Update the displayed word with translation
            setDisplayedWord(prev => ({
              ...prev,
              translation: result.translatedText
            }));
          } else {
            console.log('Translation returned empty or undefined result');
          }
        } catch (err) {
          console.error('Translation failed:', err);
          // Don't show error to user, just silently fail and let them input translation manually
        } finally {
          setIsTranslating(false);
        }
      }
    } else {
      console.log(`Word not found in database: ${word}`);
      // For new words, clear translation field first
      setTranslation('');
      setDisplayedWord({
        term: word,
        translation: '',
        status: 0 // Untracked
      });
      
      // Try to translate the new word automatically
      try {
        // Access the book's language code from the state
        const bookLanguage = book?.language?.code || 'FR'; // Default to French if language code is not available
        const userLanguage = 'EN'; // Default to English as target language
        
        console.log(`Attempting to translate new word: ${word} from ${bookLanguage} to ${userLanguage}`);
        setIsTranslating(true);
        const result = await translateText(word, bookLanguage, userLanguage);
        console.log('Translation result:', result);
        
        if (result?.translatedText) {
          console.log(`Translation successful: "${result.translatedText}"`);
          setTranslation(result.translatedText);
          // Update the displayed word with translation
          setDisplayedWord(prev => ({
            ...prev,
            translation: result.translatedText
          }));
        } else {
          console.log('Translation returned empty or undefined result');
        }
      } catch (err) {
        console.error('Translation failed:', err);
        // Don't show error to user, just silently fail and let them input translation manually
      } finally {
        setIsTranslating(false);
      }
    }
  };

  const handleSaveWord = async (status) => {
    if (!selectedWord || processingWord || isTranslating) return;
    
    setSaveSuccess(false); // Reset success message
    setProcessingWord(true);
    
    try {
      // Convert status to numeric value
      const numericStatus = parseInt(status, 10);
      
      if (isNaN(numericStatus) || numericStatus < 1 || numericStatus > 5) {
        throw new Error(`Invalid status: ${status}. Must be a number between 1-5.`);
      }
      
      // Find if the word already exists in our words list - use normalization
      const normalizedWord = selectedWord.normalize('NFC').toLowerCase();
      const existingWord = words.find(w => 
        w.term && 
        w.term.normalize('NFC').toLowerCase() === normalizedWord
      );
      
      if (existingWord) {
        // Update existing word
        const updatedWord = await updateWord(existingWord.wordId, numericStatus, translation);
        
        // Update the words list
        setWords(prevWords => 
          prevWords.map(word => 
            word.wordId === existingWord.wordId 
              ? { ...word, status: numericStatus, translation } 
              : word
          )
        );
        
        // Update the displayed word in the side panel
        setDisplayedWord({
          term: existingWord.term,
          translation: translation,
          status: numericStatus
        });
      } else {
        // Create new word
        const newWord = await createWord(textId, selectedWord, numericStatus, translation);
        
        // Add the new word to the words list
        setWords(prevWords => [...prevWords, newWord]);
        
        // Update the displayed word in the side panel
        setDisplayedWord({
          term: selectedWord,
          translation: translation,
          status: numericStatus
        });
      }
      
      // Show success message
      setSaveSuccess(true);
      
      // Hide success message after 2 seconds
      setTimeout(() => setSaveSuccess(false), 2000);
      
    } catch (error) {
      console.error('Error saving word:', error);
      alert(`Failed to save word: ${error.message}`);
    } finally {
      setProcessingWord(false);
    }
  };

  // Add function to handle sentence selection
  const handleSentenceSelection = () => {
    console.log("Mouse up event detected");
    
    // Get the current selection
    const selection = window.getSelection();
    
    // Skip if the selection is empty or if it's a collapsed selection (just a cursor)
    if (selection.isCollapsed) {
      console.log("Selection is empty or collapsed");
      return;
    }
    
    // Get the selected text with original formatting preserved
    let selectedText = selection.toString();
    
    // Ensure we're getting the raw, unmodified text
    console.log(`Raw selected text: "${selectedText}"`);
    console.log(`Character codes: ${Array.from(selectedText).map(c => c.charCodeAt(0))}`);
    
    if (selectedText.length > 0) {
      // Store the unmodified text
      setSelectedSentence(selectedText);
      
      // Only proceed with translation if we have enough text
      if (selectedText.length >= 1) {
        // Show the translation popup
        setShowTranslationPopup(true);
        setIsFullTextTranslating(true);
        setFullTextTranslation('');
        
        // Use the full text translation API with the selected text
        translateSelectedTextInPopup(selectedText);
      }
    }
  };

  // Function to translate selected text in popup
  const translateSelectedTextInPopup = async (selectedText) => {
    if (!selectedText) {
      console.error("Missing text for translation");
      return;
    }
    
    const sourceLanguageCode = text?.languageCode || 'auto';
    console.log(`Attempting to translate selected text from ${sourceLanguageCode} to en`);
    console.log(`Text to translate: "${selectedText}"`);
    
    try {
      // Use full text translation for consistent experience
      const response = await translateFullText(selectedText, sourceLanguageCode, 'en');
      console.log('Translation response:', response);
      
      if (response && response.translatedText) {
        setFullTextTranslation(response.translatedText);
        console.log(`Translation result: "${response.translatedText}"`);
      } else {
        console.error('Translation response missing translatedText:', response);
        setFullTextTranslation('Translation failed: Invalid response');
      }
    } catch (error) {
      console.error('Error translating text:', error);
      setFullTextTranslation(`Translation failed: ${error.message || 'Unknown error'}`);
    } finally {
      setIsFullTextTranslating(false);
    }
  };

  // Function to request full text translation
  const handleFullTextTranslation = async () => {
    if (!text || !text.content) {
      console.error("No text content available for translation");
      return;
    }
    
    const sourceLanguageCode = text.languageCode || 'auto';
    console.log(`Initiating full text translation from ${sourceLanguageCode} to en`);
    console.log(`Text content length: ${text.content.length} characters`);
    
    // Open popup first, then start translation
    setShowTranslationPopup(true);
    setIsFullTextTranslating(true);
    setFullTextTranslation(''); // Clear any previous translation
    
    try {
      console.log(`Sending text for translation: "${text.content.substring(0, 100)}..."`);
      const response = await translateFullText(text.content, sourceLanguageCode, 'en');
      console.log('Full text translation response:', response);
      
      if (response && response.translatedText) {
        setFullTextTranslation(response.translatedText);
        console.log(`Full translation received, length: ${response.translatedText.length} characters`);
      } else {
        console.error('Translation response missing translatedText:', response);
        setFullTextTranslation('Translation failed: Invalid response');
      }
    } catch (error) {
      console.error('Error translating full text:', error);
      setFullTextTranslation(`Translation failed: ${error.message || 'Unknown error'}`);
    } finally {
      setIsFullTextTranslating(false);
    }
  };

  // Add manual translation for selected text button in the UI
  const handleManualTranslation = () => {
    if (selectedSentence && selectedSentence.length > 0) {
      console.log(`Manually translating selected text: "${selectedSentence}"`);
      setShowTranslationPopup(true);
      setIsFullTextTranslating(true);
      setFullTextTranslation('');
      translateSelectedTextInPopup(selectedSentence);
    } else {
      console.log("No text selected for manual translation");
    }
  };

  // Improved event listener setup
  useEffect(() => {
    console.log("Setting up text selection event listener");
    
    // Function to handle text selection via mouseup event
    const handleMouseUp = (event) => {
      // Give a small delay to ensure selection is complete
      setTimeout(() => {
        const selected = window.getSelection().toString();
        if (selected && selected.length > 0) {
          console.log(`Selection detected: "${selected}" (${selected.length} chars)`);
          handleSentenceSelection();
        }
      }, 100);
    };
    
    // Add the event listener to the document
    document.addEventListener('mouseup', handleMouseUp);
    
    // Cleanup
    return () => {
      console.log("Removing text selection event listener");
      document.removeEventListener('mouseup', handleMouseUp);
    };
  }, [text]); // Only re-attach when text changes

  const renderTextContent = () => {
    if (!text || !text.content) return null;
    
    // Process the content to create formatted text
    const processTextContent = (content) => {
      // Use Unicode-aware regex that includes all letters from any language
      // This regex splits by spaces and punctuation except apostrophes and hyphens,
      // but preserves all Unicode letter characters including accented letters
      const words = content.split(/([^\p{L}''\-]+)/gu);
      
      console.log('Split words:', words);
      
      return words.map((segment, index) => {
        const trimmed = segment.trim();
        if (trimmed.length === 0) {
          return segment; // Return spaces and punctuation as is
        }
        
        // If this is a word (contains letters from any language, apostrophes or hyphens)
        if (/[\p{L}''\-]/u.test(segment)) {
          const wordOnly = segment;
          
          // Skip very short segments that don't contain at least one letter
          if (wordOnly.length <= 1 && !/[\p{L}]/u.test(wordOnly)) {
            return segment;
          }
          
          const wordStatus = getWordStatus(wordOnly);
          
          return (
            <span
              key={index}
              style={getWordStyle(wordStatus)}
              className="clickable-word"
              onClick={() => {
                console.log(`Clicked on word: "${wordOnly}" (${Array.from(wordOnly).map(c => c.charCodeAt(0))})`);
                handleWordClick(wordOnly);
              }}
            >
              {segment}
            </span>
          );
        }
        
        // Return non-word segments as is
        return segment;
      });
    };
    
    return (
      <div>
        <div 
          ref={textContentRef}
          className="text-content" 
          style={{ fontSize: '1.1rem', lineHeight: '1.6', marginBottom: '70px' }}
        >
          {processTextContent(text.content)}
        </div>
      </div>
    );
  };

  // Render the sentence translation panel
  const renderSentenceTranslationPanel = () => {
    if (!selectedSentence) {
      return null;
    }

    return (
      <div className="mt-4 p-3 border rounded">
        <h5>Selected Text:</h5>
        <p>{selectedSentence}</p>
        
        <h5 className="mt-3">Translation:</h5>
        {isSentenceTranslating ? (
          <div className="d-flex align-items-center">
            <Spinner animation="border" size="sm" className="me-2" />
            <span>Translating...</span>
          </div>
        ) : (
          <p>{sentenceTranslation || 'No translation available'}</p>
        )}
      </div>
    );
  };

  // Replacement for the previous modal content in the side panel
  const renderSidePanel = () => {
    if (!displayedWord) {
      return <p>Click on a word in the text to see its information here.</p>;
    }

    return (
      <div>
        <h3>{displayedWord.term}</h3>
        
        {saveSuccess && (
          <Alert variant="success" className="mt-2 mb-3">
            Word saved successfully!
          </Alert>
        )}
        
        {displayedWord.status > 0 ? (
          <div className="mb-3">
            <div 
              className="p-2 rounded mb-2" 
              style={{
                backgroundColor: styles[`wordStatus${displayedWord.status}`]?.backgroundColor || '#f8f9fa',
                color: styles[`wordStatus${displayedWord.status}`]?.color || '#333',
              }}
            >
              Status: {
                displayedWord.status === 1 ? 'New' :
                displayedWord.status === 2 ? 'Learning' :
                displayedWord.status === 3 ? 'Familiar' :
                displayedWord.status === 4 ? 'Advanced' : 'Known'
              }
            </div>
          </div>
        ) : (
          <div className="mb-3">
            <div className="p-2 rounded mb-2 bg-info text-white">
              Status: Not tracked yet
            </div>
          </div>
        )}
        
        <Form>
          <Form.Group className="mb-3">
            <Form.Label>Translation</Form.Label>
            <div className="position-relative">
              <Form.Control
                as="textarea"
                rows={3}
                value={translation}
                onChange={(e) => setTranslation(e.target.value)}
                placeholder="Enter translation or notes"
                disabled={isTranslating}
              />
              {isTranslating && (
                <div className="position-absolute top-50 end-0 translate-middle-y me-3">
                  <Spinner animation="border" size="sm" />
                  <span className="ms-2">Translating...</span>
                </div>
              )}
            </div>
          </Form.Group>
        </Form>
        
        <div className="d-flex flex-wrap gap-2 mt-3">
          <Button 
            variant="danger" 
            onClick={() => handleSaveWord(1)}
            disabled={processingWord || isTranslating || !selectedWord}
            style={{ backgroundColor: styles.wordStatus1.backgroundColor, color: 'white' }}
          >
            {processingWord ? 'Saving...' : 'New (1)'}
          </Button>
          <Button 
            variant="warning" 
            onClick={() => handleSaveWord(2)}
            disabled={processingWord || isTranslating || !selectedWord}
            style={{ backgroundColor: styles.wordStatus2.backgroundColor, color: 'black' }}
          >
            {processingWord ? 'Saving...' : 'Learning (2)'}
          </Button>
          <Button 
            variant="info" 
            onClick={() => handleSaveWord(3)}
            disabled={processingWord || isTranslating || !selectedWord}
            style={{ backgroundColor: styles.wordStatus3.backgroundColor, color: 'black' }}
          >
            {processingWord ? 'Saving...' : 'Familiar (3)'}
          </Button>
          <Button 
            variant="info" 
            onClick={() => handleSaveWord(4)}
            disabled={processingWord || isTranslating || !selectedWord}
            style={{ backgroundColor: styles.wordStatus4.backgroundColor, color: 'black' }}
          >
            {processingWord ? 'Saving...' : 'Advanced (4)'}
          </Button>
          <Button 
            variant="success" 
            onClick={() => handleSaveWord(5)}
            disabled={processingWord || isTranslating || !selectedWord}
            style={{ backgroundColor: styles.wordStatus5.backgroundColor, color: 'black' }}
          >
            {processingWord ? 'Saving...' : 'Known (5)'}
          </Button>
        </div>
      </div>
    );
  };

  const handleCompleteLesson = async () => {
    if (!text?.bookId) return;
    
    setCompleting(true);
    
    try {
      const bookStats = await completeLesson(text.bookId, text.textId);
      setStats(bookStats);
      setShowStatsModal(true);
    } catch (error) {
      console.error('Error completing lesson:', error);
      alert(`Failed to complete lesson: ${error.message}`);
    } finally {
      setCompleting(false);
    }
  };

  // Get style based on word status
  const getWordStyle = (status) => {
    return styles[`wordStatus${status}`] || styles.wordStatus0;
  };

  // Helper function to get the status of a word
  const getWordStatus = (word) => {
    if (!word) return 0;
    
    // Make case-insensitive search without normalization that could alter special characters
    const wordLower = word.toLowerCase();
    const foundWord = words.find(w => 
      w.term && 
      w.term.toLowerCase() === wordLower
    );
    
    return foundWord ? foundWord.status : 0;
  };

  if (loading) {
    return (
      <Container className="py-5 text-center">
        <Spinner animation="border" role="status">
          <span className="visually-hidden">Loading...</span>
        </Spinner>
      </Container>
    );
  }

  if (error) {
    return (
      <Container className="py-5">
        <Alert variant="danger">
          {error}
          <div className="mt-3">
            <Button variant="outline-primary" onClick={() => navigate('/texts')}>
              Back to Texts
            </Button>
          </div>
        </Alert>
      </Container>
    );
  }

  if (!text) {
    return (
      <Container className="py-5">
        <Alert variant="warning">
          Text not found
          <div className="mt-3">
            <Button variant="outline-primary" onClick={() => navigate('/texts')}>
              Back to Texts
            </Button>
          </div>
        </Alert>
      </Container>
    );
  }

  return (
    <Container fluid className="py-3">
      <Card className="shadow-sm mb-3">
        <Card.Body>
          <div className="d-flex justify-content-between align-items-start">
            <div>
              <h2>{text.title}</h2>
              <p className="text-muted">
                Language: {text.languageName || 'Unknown'} | 
                Words: {words.length} | 
                Learning: {words.filter(w => w.status <= 2).length} | 
                Known: {words.filter(w => w.status >= 4).length}
              </p>
            </div>
            <div className="d-flex gap-2">
              {/* If text is part of a book, show complete lesson button and navigation */}
              {text?.bookId && (
                <>
                  <Button 
                    variant="outline-primary" 
                    onClick={() => navigate(`/books/${text.bookId}`)}
                  >
                    Back to Book
                  </Button>
                </>
              )}
              
              {/* If text is standalone (not part of a book) */}
              {!text?.bookId && (
                <Button 
                  variant="outline-secondary" 
                  onClick={() => navigate('/texts')}
                >
                  Back to Texts
                </Button>
              )}
            </div>
          </div>
        </Card.Body>
      </Card>

      <Row>
        {/* Text reading panel (left side) */}
        <Col md={7} style={styles.textContainer}>
          <div className="d-flex flex-column" style={{ minHeight: 'calc(100vh - 140px)' }}>
            <div className="flex-grow-1">
              {renderTextContent()}
            </div>
            
            {/* Complete Lesson button below the text */}
            {text?.bookId && (
              <div className="mt-3 mb-3 pt-2 border-top text-end">
                <Button 
                  variant="success" 
                  onClick={handleCompleteLesson}
                  disabled={completing}
                  size="sm"
                >
                  {completing ? <Spinner animation="border" size="sm" /> : null}
                  {' '}
                  Complete Lesson
                </Button>
              </div>
            )}
          </div>
        </Col>

        {/* Translation panel (right side) */}
        <Col md={5} style={styles.translationPanel}>
          <Card>
            <Card.Body>
              <h4>Word Information</h4>
              {renderSidePanel()}
            </Card.Body>
          </Card>
        </Col>
      </Row>

      {/* Statistics Modal */}
      <Modal 
        show={showStatsModal} 
        onHide={() => setShowStatsModal(false)}
        centered
      >
        <Modal.Header closeButton>
          <Modal.Title>Lesson Completed!</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          {stats && (
            <div className="text-center">
              <h5>Book Progress</h5>
              <div className="mb-3">
                <div className="mb-2">
                  <ProgressBar 
                    now={stats.CompletionPercentage || stats.completionPercentage} 
                    label={`${(stats.CompletionPercentage || stats.completionPercentage || 0).toFixed(2)}%`} 
                    variant={
                      (stats.CompletionPercentage || stats.completionPercentage) < 25 ? 'danger' : 
                      (stats.CompletionPercentage || stats.completionPercentage) < 50 ? 'warning' : 
                      (stats.CompletionPercentage || stats.completionPercentage) < 75 ? 'info' : 'success'
                    }
                  />
                </div>
              </div>
              
              <Row className="text-center mb-3">
                <Col>
                  <h6>Known Words</h6>
                  <Badge bg="success" className="p-2">{stats.knownWords}</Badge>
                </Col>
                <Col>
                  <h6>Learning Words</h6>
                  <Badge bg="warning" className="p-2">{stats.learningWords}</Badge>
                </Col>
                <Col>
                  <h6>Total Words</h6>
                  <Badge bg="info" className="p-2">{stats.totalWords}</Badge>
                </Col>
              </Row>
              
              <p className="mt-3">
                Keep going! You're making great progress with your language learning.
              </p>
            </div>
          )}
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowStatsModal(false)}>
            Close
          </Button>
          {nextTextId && (
            <Button 
              variant="success" 
              onClick={() => {
                setShowStatsModal(false);
                navigate(`/texts/${nextTextId}`);
              }}
            >
              Next Lesson
            </Button>
          )}
          {text?.bookId && (
            <Button 
              variant="primary" 
              onClick={() => navigate(`/books/${text.bookId}`)}
            >
              Back to Book
            </Button>
          )}
        </Modal.Footer>
      </Modal>

      {/* Add the Translate Full Text button */}
      {text && !loading && (
        <div className="mb-3">
          <Button 
            variant="info" 
            onClick={handleFullTextTranslation}
            data-testid="translate-full-text-btn"
          >
            Translate Full Text
          </Button>
        </div>
      )}
      
      {/* Add button to translate selected text manually */}
      {selectedSentence && (
        <div className="mb-3 mt-3">
          <Button 
            variant="outline-primary" 
            onClick={handleManualTranslation}
            data-testid="translate-selected-text-btn"
          >
            Translate Selected Text: "{selectedSentence.length > 20 ? selectedSentence.substring(0, 20) + '...' : selectedSentence}"
          </Button>
        </div>
      )}
      
      {/* Add the sentence translation panel */}
      {renderSentenceTranslationPanel()}
      
      {/* Add the full text translation popup */}
      <TranslationPopup
        show={showTranslationPopup}
        handleClose={() => setShowTranslationPopup(false)}
        originalText={selectedSentence.length > 0 ? selectedSentence : (text?.content || '')}
        translatedText={fullTextTranslation}
        isTranslating={isFullTextTranslating}
        sourceLanguage={text?.languageCode || ''}
        targetLanguage="en"
      />
    </Container>
  );
};

export default TextDisplay;

================
File: client/lingua-read-client/src/pages/TextList.js
================
import React, { useEffect } from 'react';
import { Container, Row, Col, Card, Button, Spinner, Alert } from 'react-bootstrap';
import { Link } from 'react-router-dom';
import { useTextsStore } from '../utils/store';
import { getTexts } from '../utils/api';

const TextList = () => {
  const { texts, loading, error, setTexts, setLoading, setError } = useTextsStore();

  useEffect(() => {
    const fetchTexts = async () => {
      setLoading(true);
      try {
        const data = await getTexts();
        setTexts(data);
      } catch (err) {
        setError(err.message || 'Failed to load texts');
      } finally {
        setLoading(false);
      }
    };

    fetchTexts();
  }, [setTexts, setLoading, setError]);

  if (loading) {
    return (
      <Container className="py-5 text-center">
        <Spinner animation="border" role="status">
          <span className="visually-hidden">Loading...</span>
        </Spinner>
      </Container>
    );
  }

  return (
    <Container className="py-5">
      <div className="d-flex justify-content-between align-items-center mb-4">
        <h1>My Texts</h1>
        <Button as={Link} to="/texts/create" variant="success">
          Add New Text
        </Button>
      </div>

      {error && <Alert variant="danger">{error}</Alert>}

      {texts.length === 0 ? (
        <Card className="text-center p-5">
          <Card.Body>
            <h3>You don't have any texts yet</h3>
            <p className="mb-4">Add your first text to start learning vocabulary</p>
            <Button as={Link} to="/texts/create" variant="primary">
              Add Your First Text
            </Button>
          </Card.Body>
        </Card>
      ) : (
        <Row>
          {texts.map((text) => (
            <Col md={4} key={text.textId} className="mb-4">
              <Card className="h-100 text-card shadow-sm">
                <Card.Body>
                  <Card.Title>{text.title}</Card.Title>
                  <Card.Subtitle className="mb-2 text-muted">
                    {text.languageName}
                  </Card.Subtitle>
                  <Card.Text>
                    {text.content ? text.content.substring(0, 100) + '...' : 'No content preview available'}
                  </Card.Text>
                  <div className="mt-3">
                    <small className="text-muted">
                      Created: {new Date(text.createdAt).toLocaleDateString()}
                    </small>
                  </div>
                </Card.Body>
                <Card.Footer className="bg-white border-top-0">
                  <Button 
                    as={Link} 
                    to={`/texts/${text.textId}`} 
                    variant="outline-primary" 
                    className="w-100"
                  >
                    Continue Reading
                  </Button>
                </Card.Footer>
              </Card>
            </Col>
          ))}
        </Row>
      )}
    </Container>
  );
};

export default TextList;

================
File: client/lingua-read-client/src/reportWebVitals.js
================
const reportWebVitals = (onPerfEntry) => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

================
File: client/lingua-read-client/src/utils/api.js
================
// Import Platform from react-native
import { Platform } from 'react-native';
import storage from './storage';

// Dynamically set API URL based on platform
// For web development use localhost, for mobile use your computer's IP address
const API_URL = Platform.OS === 'web' 
  ? 'http://localhost:5000' 
  : 'http://192.168.0.48:5000'; // Your Ethernet adapter IP address

// Helper function to get token from storage
const getToken = () => {
  try {
    const token = localStorage.getItem('token');
    if (!token) {
      console.log('No token found in storage');
      return null;
    }
    console.log('Token retrieved from storage:', token.length + ' chars');
    return token;
  } catch (error) {
    console.error('Error retrieving token:', error);
    return null;
  }
};

// Helper function to store token
const storeToken = (token) => {
  try {
    if (!token || typeof token !== 'string') {
      console.error('Invalid token provided');
      return false;
    }
    const cleanToken = token.trim();
    localStorage.setItem('token', cleanToken);
    console.log('Token stored successfully:', cleanToken.length + ' chars');
    return true;
  } catch (error) {
    console.error('Error storing token:', error);
    return false;
  }
};

// Enhanced fetch function with debugging
const fetchWithDebug = async (url, options = {}) => {
  console.log(`[API Debug] Fetching from: ${url}`);
  console.log(`[API Debug] Options:`, options);
  
  try {
    // Create the URL object to ensure proper URL construction
    let fullUrl;
    try {
      // Check if the URL is already absolute
      if (url.startsWith('http://') || url.startsWith('https://')) {
        fullUrl = new URL(url);
      } else {
        // Handle relative URLs by joining with API_URL
        fullUrl = new URL(url, API_URL);
      }
      console.log(`[API Debug] Constructed URL: ${fullUrl.toString()}`);
    } catch (urlError) {
      console.error(`[API Error] Invalid URL construction: ${urlError.message}`);
      throw new Error(`Invalid URL: ${url} - ${urlError.message}`);
    }
    
    const response = await fetch(fullUrl.toString(), options);
    console.log(`[API Debug] Response status: ${response.status}`);
    
    if (!response.ok) {
      throw new Error(`HTTP error! Status: ${response.status}`);
    }
    
    // Check if response has content
    const contentType = response.headers.get('content-type');
    if (contentType && contentType.includes('application/json')) {
      const data = await response.json();
      console.log(`[API Debug] Response data:`, data);
      return data;
    } else {
      console.log(`[API Debug] Response is not JSON or empty. Content-Type: ${contentType}`);
      return null;
    }
  } catch (error) {
    console.error(`[API Error] Fetch failed: ${error.message}`);
    throw error;
  }
};

// Helper function for making API requests
const fetchApi = async (endpoint, options = {}) => {
  // Ensure endpoint starts with a slash
  if (!endpoint.startsWith('/')) {
    endpoint = '/' + endpoint;
  }
  
  try {
    const token = getToken();
    console.log('[API Debug] Endpoint:', endpoint);
    console.log('[API Debug] Base URL:', API_URL);
    
    const headers = {
      'Accept': 'application/json',
      'Content-Type': 'application/json'
    };

    // Only add Authorization header if token exists and is a string
    if (token && typeof token === 'string' && token.trim() !== '') {
      const cleanToken = token.trim();
      headers.Authorization = `Bearer ${cleanToken}`;
      console.log('[API Debug] Authorization header added');
    } else {
      console.log('[API Debug] No token available for request');
      if (endpoint !== '/api/auth/login' && endpoint !== '/api/auth/register' && endpoint !== '/api/languages') {
        throw new Error('Authentication required');
      }
    }

    // Add any additional headers from options
    if (options.headers) {
      Object.assign(headers, options.headers);
    }

    const requestConfig = {
      ...options,
      headers,
      credentials: 'include',
      mode: 'cors'
    };

    // Construct the full URL properly
    const fullUrl = new URL(endpoint, API_URL);
    console.log('[API Debug] Full URL:', fullUrl.toString());
    console.log('[API Debug] Request config:', {
      method: requestConfig.method || 'GET',
      headers: requestConfig.headers,
      credentials: requestConfig.credentials,
      mode: requestConfig.mode
    });
    
    const response = await fetch(fullUrl.toString(), requestConfig);
    console.log('[API Debug] Response status:', response.status);
    console.log('[API Debug] Response headers:', Object.fromEntries(response.headers.entries()));

    // Handle response
    if (!response.ok) {
      const contentType = response.headers.get('content-type');
      let errorMessage;
      
      if (contentType && contentType.includes('application/json')) {
        const errorData = await response.json();
        errorMessage = errorData.message || `HTTP error! Status: ${response.status}`;
      } else {
        const text = await response.text();
        errorMessage = text || `HTTP error! Status: ${response.status}`;
      }
      
      console.error('[API Error] Request failed:', {
        status: response.status,
        statusText: response.statusText,
        url: fullUrl.toString(),
        error: errorMessage
      });
      
      throw new Error(errorMessage);
    }

    // Parse successful response
    const contentType = response.headers.get('content-type');
    if (contentType && contentType.includes('application/json')) {
      const data = await response.json();
      console.log('[API Debug] Response data:', data);
      return data;
    } else {
      const text = await response.text();
      console.log('[API Debug] Non-JSON response:', text);
      return { message: text || response.statusText };
    }
  } catch (error) {
    console.error('[API Error] Request failed:', {
      endpoint,
      error: error.message,
      stack: error.stack
    });
    throw error;
  }
};

// Simple test function to check API connectivity
export const testApiConnection = async () => {
  try {
    console.log('Testing API connection to server');
    const response = await fetch(`${API_URL}/api/languages`, {
      method: 'GET',
      headers: {
        'Accept': 'application/json'
      },
      mode: 'cors'
    });
    console.log('API response status:', response.status);
    return response.ok;
  } catch (error) {
    console.error('API connection error:', error);
    return false;
  }
};

// Auth API
export const login = (email, password) => {
  return fetchApi('/api/auth/login', {
    method: 'POST',
    body: JSON.stringify({ email, password })
  });
};

export const register = (email, password) => {
  return fetchApi('/api/auth/register', {
    method: 'POST',
    body: JSON.stringify({ email, password })
  });
};

// Languages API
export const getLanguages = () => {
  return fetchApi('/api/languages');
};

// Texts API
export const getTexts = () => {
  return fetchApi('/api/texts');
};

export const getText = (textId) => {
  return fetchApi(`/api/texts/${textId}`);
};

export const createText = (title, content, languageId) => {
  return fetchApi('/api/texts', {
    method: 'POST',
    body: JSON.stringify({ title, content, languageId })
  });
};

// Books API
export const getBooks = () => {
  return fetchApi('/api/books');
};

export const getBook = (bookId) => {
  return fetchApi(`/api/books/${bookId}`);
};

export const createBook = (title, description, languageId, content, splitMethod = 'paragraph', maxSegmentSize = 3000) => {
  return fetchApi('/api/books', {
    method: 'POST',
    body: JSON.stringify({ 
      title, 
      description, 
      languageId, 
      content,
      splitMethod,
      maxSegmentSize
    })
  });
};

export const updateLastRead = (bookId, textId) => {
  return fetchApi(`/api/books/${bookId}/lastread`, {
    method: 'PUT',
    body: JSON.stringify({ textId })
  });
};

export const completeLesson = (bookId, textId) => {
  return fetchApi(`/api/books/${bookId}/complete-lesson`, {
    method: 'PUT',
    body: JSON.stringify({ textId })
  });
};

export const finishBook = (bookId) => {
  return fetchApi(`/api/books/${bookId}/finish`, {
    method: 'PUT'
  });
};

// User Statistics API
export const getUserStatistics = () => {
  return fetchApi('/api/users/statistics');
};

export const getReadingActivity = async (period = 'all') => {
  try {
    console.log(`[API] Getting reading activity for period: ${period}`);
    const data = await fetchApi(`/api/users/reading-activity?period=${period}`);
    return data;
  } catch (error) {
    console.error('Error getting reading activity:', error);
    return { error: error.message };
  }
};

// Words API
export const createWord = async (textId, term, status, translation) => {
  try {
    // Validate inputs
    if (!textId) throw new Error('Text ID is required');
    if (!term || term.trim() === '') throw new Error('Word term is required');
    if (!status) throw new Error('Word status is required');
    
    console.log(`[API] Creating word: "${term}" with status: ${status}`);
    
    const payload = {
      textId,
      term: term.trim(),
      status,
      translation: translation || null
    };
    
    const response = await fetchApi('/api/words', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json; charset=utf-8'
      },
      body: JSON.stringify(payload)
    });
    
    return response;
  } catch (error) {
    console.error('Error in createWord:', error);
    throw error;
  }
};

export const updateWord = async (wordId, status, translation) => {
  try {
    // Validate inputs
    if (!wordId) throw new Error('Word ID is required');
    if (!status) throw new Error('Word status is required');
    
    const payload = {
      status,
      translation: translation || null
    };
    
    const response = await fetchApi(`/api/words/${wordId}`, {
      method: 'PUT',
      body: JSON.stringify(payload)
    });
    
    return response;
  } catch (error) {
    console.error('Error in updateWord:', error);
    throw error;
  }
};

// Translation API
export const translateText = async (text, sourceLanguageCode, targetLanguageCode) => {
  try {
    const payload = {
      text,
      sourceLanguageCode,
      targetLanguageCode
    };
    return await fetchApi('/api/translation', {
      method: 'POST',
      body: JSON.stringify(payload)
    });
  } catch (error) {
    console.error('Translation failed:', error);
    throw error;
  }
};

export const translateSentence = async (text, sourceLanguageCode, targetLanguageCode) => {
  try {
    console.log('Initiating sentence translation request');
    
    const payload = {
      text,
      sourceLanguageCode,
      targetLanguageCode
    };
    
    const response = await fetchApi('/api/sentencetranslation', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json; charset=utf-8'
      },
      body: JSON.stringify(payload)
    });
    
    return response;
  } catch (error) {
    console.error('Sentence translation failed:', error);
    throw error;
  }
};

export const translateFullText = async (text, sourceLanguageCode, targetLanguageCode) => {
  try {
    console.log('Initiating full text translation request');
    
    const payload = {
      text,
      sourceLanguageCode,
      targetLanguageCode
    };
    
    const response = await fetchApi('/api/sentencetranslation/full-text', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json; charset=utf-8'
      },
      body: JSON.stringify(payload)
    });
    
    return response;
  } catch (error) {
    console.error('Full text translation failed:', error);
    throw error;
  }
};

export const getSupportedLanguages = () => {
  return fetchApi('/api/translation/languages');
};

// Get next lesson from a book
export const getNextLesson = (bookId, currentTextId) => {
  return fetchApi(`/api/books/${bookId}/next-lesson?currentTextId=${currentTextId}`);
};

================
File: client/lingua-read-client/src/utils/helpers.js
================
// Format date to a user-friendly string
export const formatDate = (dateString) => {
  const date = new Date(dateString);
  return date.toLocaleDateString(undefined, {
    year: 'numeric',
    month: 'short',
    day: 'numeric'
  });
};

// Truncate text with ellipsis if it exceeds max length
export const truncateText = (text, maxLength = 100) => {
  if (!text) return '';
  if (text.length <= maxLength) return text;
  
  return text.substring(0, maxLength) + '...';
};

// Calculate reading time estimate based on content length
export const calculateReadingTime = (content) => {
  if (!content) return '< 1 min';
  
  // Average reading speed: 200 words per minute
  const wordCount = content.trim().split(/\s+/).length;
  const minutes = Math.max(1, Math.ceil(wordCount / 200));
  
  return `${minutes} min read`;
};

================
File: client/lingua-read-client/src/utils/storage.js
================
// A storage utility that works across platforms
const storage = {
  getItem: (key) => {
    try {
      return localStorage.getItem(key);
    } catch (error) {
      console.error(`Error getting item ${key}:`, error);
      return null;
    }
  },
  
  setItem: (key, value) => {
    try {
      localStorage.setItem(key, value);
      return true;
    } catch (error) {
      console.error(`Error setting item ${key}:`, error);
      return false;
    }
  },
  
  removeItem: (key) => {
    try {
      localStorage.removeItem(key);
      return true;
    } catch (error) {
      console.error(`Error removing item ${key}:`, error);
      return false;
    }
  },
  
  clear: () => {
    try {
      localStorage.clear();
      return true;
    } catch (error) {
      console.error('Error clearing storage:', error);
      return false;
    }
  }
};

export default storage;

================
File: client/lingua-read-client/src/utils/store.js
================
import { create } from 'zustand';
import { jwtDecode } from 'jwt-decode';

// Auth Store
export const useAuthStore = create((set) => ({
  token: null,
  user: null,
  setToken: (token) => {
    localStorage.setItem('token', token);
    const decodedToken = jwtDecode(token);
    set({ 
      token, 
      user: {
        id: decodedToken.sub,
        email: decodedToken.email
      }
    });
  },
  clearToken: () => {
    localStorage.removeItem('token');
    set({ token: null, user: null });
  }
}));

// Texts Store
export const useTextsStore = create((set) => ({
  texts: [],
  loading: false,
  error: null,
  setTexts: (texts) => set({ texts }),
  addText: (text) => set((state) => ({ texts: [...state.texts, text] })),
  setLoading: (loading) => set({ loading }),
  setError: (error) => set({ error })
}));

// Current Text Store
export const useCurrentTextStore = create((set) => ({
  text: null,
  loading: false,
  error: null,
  setText: (text) => set({ text }),
  setLoading: (loading) => set({ loading }),
  setError: (error) => set({ error }),
  updateWord: (wordId, status) => set((state) => ({
    text: {
      ...state.text,
      words: state.text.words.map(word => 
        word.wordId === wordId 
          ? { ...word, status } 
          : word
      )
    }
  }))
}));

// Word Modal Store
export const useWordModalStore = create((set) => ({
  isOpen: false,
  word: null,
  translation: '',
  openModal: (word, translation = '') => set({ isOpen: true, word, translation }),
  closeModal: () => set({ isOpen: false, word: null, translation: '' }),
  setTranslation: (translation) => set({ translation })
}));

================
File: server/LinguaReadApi/appsettings.Development.json
================
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  }
}

================
File: server/LinguaReadApi/appsettings.json
================
{
  "ConnectionStrings": {
    "DefaultConnection": "Host=localhost;Database=LinguaReadDB;Username=LinguaReadUser;Password=Myspace3331"
  },
  "Jwt": {
    "Key": "YourSuperSecretKeyHereItShouldBeAtLeast32CharactersLong",
    "Issuer": "http://localhost:5000",
    "Audience": "http://localhost:3000",
    "ExpiryInHours": 1
  },
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*",
  "DeepL": {
    "ApiKey": "acd107c9-3465-418f-b3d7-979ba29541ed:fx",
    "BaseUrl": "https://api-free.deepl.com/v2"
  },
  "Gemini": {
    "ApiKey": "AIzaSyCycbptUa5Q0PMlqOGjP1cpwpP6LFkkPMU",
    "BaseUrl": "https://generativelanguage.googleapis.com/v1beta"
  }
}

================
File: server/LinguaReadApi/Controllers/AdminController.cs
================
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System.Threading.Tasks;
using LinguaReadApi.Data;
using LinguaReadApi.Models;
using System.Collections.Generic;
using System.Linq;

namespace LinguaReadApi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class AdminController : ControllerBase
    {
        private readonly AppDbContext _context;

        public AdminController(AppDbContext context)
        {
            _context = context;
        }

        // GET: api/admin/initialize-languages
        [HttpGet("initialize-languages")]
        public async Task<ActionResult<string>> InitializeLanguages()
        {
            // Check if languages already exist
            if (await _context.Languages.AnyAsync())
            {
                return "Languages already exist in the database";
            }

            // Seed languages
            var languages = new Language[]
            {
                new Language { Name = "English", Code = "en", WordsRead = 0 },
                new Language { Name = "Spanish", Code = "es", WordsRead = 0 },
                new Language { Name = "French", Code = "fr", WordsRead = 0 },
                new Language { Name = "German", Code = "de", WordsRead = 0 },
                new Language { Name = "Italian", Code = "it", WordsRead = 0 },
                new Language { Name = "Portuguese", Code = "pt", WordsRead = 0 },
                new Language { Name = "Russian", Code = "ru", WordsRead = 0 },
                new Language { Name = "Japanese", Code = "ja", WordsRead = 0 },
                new Language { Name = "Chinese", Code = "zh", WordsRead = 0 },
                new Language { Name = "Korean", Code = "ko", WordsRead = 0 }
            };

            await _context.Languages.AddRangeAsync(languages);
            await _context.SaveChangesAsync();

            return "Languages initialized successfully";
        }

        // GET: api/admin/fix-language-stats
        [HttpGet("fix-language-stats")]
        public async Task<ActionResult<string>> FixLanguageStats()
        {
            // Get all languages
            var languages = await _context.Languages.ToListAsync();
            
            if (languages == null || !languages.Any())
            {
                return "No languages found in the database";
            }

            // Calculate total words read for each language from texts
            foreach (var language in languages)
            {
                // Get all texts for this language through books
                var texts = await _context.Texts
                    .Where(t => t.Book.LanguageId == language.LanguageId)
                    .ToListAsync();

                int totalWordsRead = 0;
                foreach (var text in texts)
                {
                    // Count words in text content
                    if (!string.IsNullOrEmpty(text.Content))
                    {
                        totalWordsRead += text.Content.Split(new[] { ' ', '\t', '\n', '\r' }, 
                            System.StringSplitOptions.RemoveEmptyEntries).Length;
                    }
                }

                // Update language stats
                language.WordsRead = totalWordsRead;
                // Explicitly mark the language entity as modified
                _context.Entry(language).State = EntityState.Modified;
            }

            await _context.SaveChangesAsync();
            return "Language statistics fixed successfully";
        }
    }
}

================
File: server/LinguaReadApi/Controllers/AuthController.cs
================
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using System;
using System.ComponentModel.DataAnnotations;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using System.Threading.Tasks;
using LinguaReadApi.Data;
using LinguaReadApi.Models;

namespace LinguaReadApi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class AuthController : ControllerBase
    {
        private readonly AppDbContext _context;
        private readonly IConfiguration _configuration;

        public AuthController(AppDbContext context, IConfiguration configuration)
        {
            _context = context;
            _configuration = configuration;
        }

        [HttpPost("register")]
        public async Task<IActionResult> Register([FromBody] RegisterModel model)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            // Check if user already exists
            if (await _context.Users.AnyAsync(u => u.Email == model.Email))
            {
                return Conflict("User with this email already exists");
            }

            // Hash the password
            string passwordHash = BCrypt.Net.BCrypt.HashPassword(model.Password);

            // Create new user
            var user = new User
            {
                UserId = Guid.NewGuid(),
                Email = model.Email,
                PasswordHash = passwordHash,
                CreatedAt = DateTime.UtcNow
            };

            // Save user to database
            _context.Users.Add(user);
            await _context.SaveChangesAsync();

            // Generate JWT token
            var token = GenerateJwtToken(user);

            // Return token along with user info
            return StatusCode(201, new { userId = user.UserId, email = user.Email, token });
        }

        [HttpPost("login")]
        public async Task<IActionResult> Login([FromBody] LoginModel model)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            // Find user by email
            var user = await _context.Users.FirstOrDefaultAsync(u => u.Email == model.Email);
            if (user == null)
            {
                return Unauthorized("Invalid email or password");
            }

            // Verify password
            bool isPasswordValid = BCrypt.Net.BCrypt.Verify(model.Password, user.PasswordHash);
            if (!isPasswordValid)
            {
                return Unauthorized("Invalid email or password");
            }

            // Generate JWT token
            var token = GenerateJwtToken(user);

            // Return token
            return Ok(new { token });
        }

        private string GenerateJwtToken(User user)
        {
            Console.WriteLine($"Generating token for user: {user.Email}");
            Console.WriteLine($"Using issuer: {_configuration["Jwt:Issuer"]}");
            Console.WriteLine($"Using audience: {_configuration["Jwt:Audience"]}");
            
            var securityKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_configuration["Jwt:Key"]));
            var credentials = new SigningCredentials(securityKey, SecurityAlgorithms.HmacSha256);

            var claims = new[]
            {
                new Claim(JwtRegisteredClaimNames.Sub, user.UserId.ToString()),
                new Claim(JwtRegisteredClaimNames.Email, user.Email),
                new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString()),
                new Claim(JwtRegisteredClaimNames.Iat, DateTimeOffset.UtcNow.ToUnixTimeSeconds().ToString(), ClaimValueTypes.Integer64)
            };

            Console.WriteLine("Claims added to token:");
            foreach (var claim in claims)
            {
                Console.WriteLine($"  {claim.Type}: {claim.Value}");
            }

            var token = new JwtSecurityToken(
                issuer: _configuration["Jwt:Issuer"],
                audience: _configuration["Jwt:Audience"],
                claims: claims,
                expires: DateTime.UtcNow.AddHours(Convert.ToDouble(_configuration["Jwt:ExpiryInHours"])),
                signingCredentials: credentials
            );

            var tokenString = new JwtSecurityTokenHandler().WriteToken(token);
            Console.WriteLine($"Generated token length: {tokenString.Length}");
            return tokenString;
        }
    }

    public class RegisterModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        [StringLength(100, MinimumLength = 6)]
        public string Password { get; set; }
    }

    public class LoginModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        public string Password { get; set; }
    }
}

================
File: server/LinguaReadApi/Controllers/BooksController.cs
================
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;
using System.Threading.Tasks;
using System.ComponentModel.DataAnnotations;
using LinguaReadApi.Data;
using LinguaReadApi.Models;
using LinguaReadApi.Utilities;

namespace LinguaReadApi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    [Authorize]
    public class BooksController : ControllerBase
    {
        private readonly AppDbContext _context;

        public BooksController(AppDbContext context)
        {
            _context = context;
        }

        // GET: api/books
        [HttpGet]
        public async Task<ActionResult<IEnumerable<BookDto>>> GetBooks()
        {
            var userId = GetUserId();
            
            var books = await _context.Books
                .Where(b => b.UserId == userId)
                .Include(b => b.Language)
                .Select(b => new BookDto
                {
                    BookId = b.BookId,
                    Title = b.Title,
                    Description = b.Description,
                    LanguageName = b.Language.Name,
                    CreatedAt = b.CreatedAt,
                    PartCount = b.Texts.Count,
                    LastReadTextId = b.LastReadTextId,
                    LastReadAt = b.LastReadAt,
                    TotalWords = b.TotalWords,
                    KnownWords = b.KnownWords,
                    LearningWords = b.LearningWords,
                    IsFinished = b.IsFinished
                })
                .ToListAsync();
                
            return books;
        }

        // GET: api/books/5
        [HttpGet("{id}")]
        public async Task<ActionResult<BookDetailDto>> GetBook(int id)
        {
            var userId = GetUserId();
            
            var book = await _context.Books
                .Where(b => b.BookId == id && b.UserId == userId)
                .Include(b => b.Language)
                .Include(b => b.Texts)
                .FirstOrDefaultAsync();
                
            if (book == null)
            {
                return NotFound();
            }
            
            var bookDetail = new BookDetailDto
            {
                BookId = book.BookId,
                Title = book.Title,
                Description = book.Description,
                LanguageName = book.Language.Name,
                LanguageId = book.LanguageId,
                CreatedAt = book.CreatedAt,
                Parts = book.Texts.OrderBy(t => t.PartNumber).Select(t => new TextPartDto
                {
                    TextId = t.TextId,
                    Title = t.Title,
                    PartNumber = t.PartNumber ?? 0,
                    CreatedAt = t.CreatedAt
                }).ToList()
            };
            
            return bookDetail;
        }

        // POST: api/books
        [HttpPost]
        public async Task<ActionResult<BookDto>> CreateBook([FromBody] CreateBookDto createBookDto)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
            
            var userId = GetUserId();
            
            // Check if language exists
            var languageExists = await _context.Languages.AnyAsync(l => l.LanguageId == createBookDto.LanguageId);
            if (!languageExists)
            {
                return BadRequest("Invalid language ID");
            }
            
            var book = new Book
            {
                Title = createBookDto.Title,
                Description = createBookDto.Description,
                LanguageId = createBookDto.LanguageId,
                UserId = userId,
                CreatedAt = DateTime.UtcNow
            };
            
            _context.Books.Add(book);
            await _context.SaveChangesAsync();
            
            // Create initial text parts
            if (!string.IsNullOrEmpty(createBookDto.Content))
            {
                // Split content into parts according to the settings
                var textParts = SplitContent(createBookDto.Content, createBookDto.SplitMethod, createBookDto.MaxSegmentSize);
                
                for (int i = 0; i < textParts.Count; i++)
                {
                    var text = new Text
                    {
                        Title = $"{book.Title} - Part {i + 1}",
                        Content = textParts[i],
                        LanguageId = book.LanguageId,
                        UserId = userId,
                        BookId = book.BookId,
                        PartNumber = i + 1,
                        CreatedAt = DateTime.UtcNow
                    };
                    
                    _context.Texts.Add(text);
                }
                
                await _context.SaveChangesAsync();
            }
            
            var language = await _context.Languages.FindAsync(book.LanguageId);
            
            var bookDto = new BookDto
            {
                BookId = book.BookId,
                Title = book.Title,
                Description = book.Description,
                LanguageName = language.Name,
                CreatedAt = book.CreatedAt,
                PartCount = await _context.Texts.CountAsync(t => t.BookId == book.BookId),
                LastReadTextId = null,
                LastReadAt = null,
                TotalWords = 0,
                KnownWords = 0,
                LearningWords = 0
            };
            
            return CreatedAtAction(nameof(GetBook), new { id = book.BookId }, bookDto);
        }

        // Helper method to split content into parts
        private List<string> SplitContent(string content, string splitMethod, int maxSegmentSize)
        {
            var result = new List<string>();
            
            switch (splitMethod.ToLower())
            {
                case "paragraph":
                    // Split by paragraphs
                    var paragraphs = content.Split(new[] { "\r\n\r\n", "\n\n" }, StringSplitOptions.RemoveEmptyEntries);
                    
                    // Group paragraphs to respect max size
                    var currentPart = new List<string>();
                    int currentCharCount = 0;
                    
                    foreach (var para in paragraphs)
                    {
                        if (currentCharCount + para.Length > maxSegmentSize && currentPart.Count > 0)
                        {
                            // This paragraph would exceed max size, save current part and start a new one
                            result.Add(string.Join("\n\n", currentPart));
                            currentPart.Clear();
                            currentCharCount = 0;
                        }
                        
                        currentPart.Add(para);
                        currentCharCount += para.Length + 2; // +2 for newlines
                    }
                    
                    // Add the last part if it contains paragraphs
                    if (currentPart.Count > 0)
                    {
                        result.Add(string.Join("\n\n", currentPart));
                    }
                    break;
                    
                case "sentence":
                    // Split by sentences (roughly)
                    var sentences = System.Text.RegularExpressions.Regex.Split(content, @"(?<=[.!?])\s+")
                        .Where(s => !string.IsNullOrWhiteSpace(s))
                        .ToList();
                    
                    // Group sentences to respect max size
                    currentPart = new List<string>();
                    currentCharCount = 0;
                    
                    foreach (var sentence in sentences)
                    {
                        if (currentCharCount + sentence.Length > maxSegmentSize && currentPart.Count > 0)
                        {
                            // This sentence would exceed max size, save current part and start a new one
                            result.Add(string.Join(" ", currentPart));
                            currentPart.Clear();
                            currentCharCount = 0;
                        }
                        
                        currentPart.Add(sentence);
                        currentCharCount += sentence.Length + 1; // +1 for space
                    }
                    
                    // Add the last part if it contains sentences
                    if (currentPart.Count > 0)
                    {
                        result.Add(string.Join(" ", currentPart));
                    }
                    break;
                    
                case "length":
                default:
                    // Split by fixed character length
                    for (int i = 0; i < content.Length; i += maxSegmentSize)
                    {
                        var length = Math.Min(maxSegmentSize, content.Length - i);
                        
                        // Try to find a good breaking point (space, punctuation)
                        if (i + length < content.Length)
                        {
                            // Look for a space or punctuation within the last 20% of the segment
                            int searchStart = i + (int)(length * 0.8);
                            int breakPoint = content.LastIndexOfAny(new[] { ' ', '.', '!', '?', '\n' }, i + length, length - searchStart + i);
                            
                            if (breakPoint > searchStart)
                            {
                                length = breakPoint - i + 1;
                            }
                        }
                        
                        result.Add(content.Substring(i, length));
                    }
                    break;
            }
            
            return result;
        }

        // PUT: api/books/5/lastread
        [HttpPut("{id}/lastread")]
        public async Task<IActionResult> UpdateLastRead(int id, [FromBody] UpdateLastReadDto updateDto)
        {
            var userId = GetUserId();
            
            var book = await _context.Books
                .Where(b => b.BookId == id && b.UserId == userId)
                .FirstOrDefaultAsync();
                
            if (book == null)
            {
                return NotFound();
            }
            
            // Verify the text belongs to this book
            var text = await _context.Texts
                .Where(t => t.TextId == updateDto.TextId && t.BookId == id)
                .FirstOrDefaultAsync();
                
            if (text == null) 
            {
                return BadRequest("The specified text does not belong to this book");
            }
            
            book.LastReadTextId = updateDto.TextId;
            book.LastReadAt = DateTime.UtcNow;
            
            await _context.SaveChangesAsync();
            
            return NoContent();
        }

        // PUT: api/books/5/complete-lesson
        [HttpPut("{id}/complete-lesson")]
        public async Task<ActionResult<BookStatsDto>> CompleteLesson(int id, [FromBody] CompleteLessonDto lessonDto)
        {
            var userId = GetUserId();
            
            var book = await _context.Books
                .Where(b => b.BookId == id && b.UserId == userId)
                .Include(b => b.Language)  // Include the language
                .FirstOrDefaultAsync();
                
            if (book == null)
            {
                return NotFound();
            }
            
            if (book.Language == null)
            {
                return BadRequest("Book language not found");
            }
            
            // Verify the text belongs to this book
            var text = await _context.Texts
                .Include(t => t.TextWords)
                .ThenInclude(tw => tw.Word)
                .Where(t => t.TextId == lessonDto.TextId && t.BookId == id)
                .FirstOrDefaultAsync();
                
            if (text == null)
            {
                return NotFound("Text not found or does not belong to this book");
            }
            
            // Count all words in the text (not just unique words)
            int totalWordCount = WordCountUtility.CountTotalWords(text.Content);
            
            // Get the language directly from the database to update it
            var language = await _context.Languages.FindAsync(book.LanguageId);
            if (language != null)
            {
                // Update the language WordsRead counter
                language.WordsRead += totalWordCount;
                
                // Explicitly mark the language entity as modified
                _context.Entry(language).State = EntityState.Modified;
                
                // Track this reading activity for statistics
                var activity = new UserActivity
                {
                    UserId = userId,
                    LanguageId = language.LanguageId,
                    ActivityType = "LessonCompleted",
                    WordCount = totalWordCount,
                    Timestamp = DateTime.UtcNow
                };
                _context.UserActivities.Add(activity);
                
                // Save the change immediately
                await _context.SaveChangesAsync();
            }
            
            // Get unique words from this text
            var textWords = text.TextWords.Select(tw => tw.Word).ToList();
            var knownWords = textWords.Count(w => w.Status >= 4);
            var learningWords = textWords.Count(w => w.Status >= 2 && w.Status < 4);
            
            // Update user's words
            var userWords = await _context.Words
                .Where(w => w.UserId == userId && textWords.Select(tw => tw.Term.ToLower()).Contains(w.Term.ToLower()))
                .ToListAsync();
            
            foreach (var word in textWords)
            {
                var userWord = userWords.FirstOrDefault(w => w.Term.ToLower() == word.Term.ToLower());
                if (userWord != null)
                {
                    if (userWord.Status < 5) // Only update if not mastered
                    {
                        userWord.Status = Math.Min(userWord.Status + 1, 5);
                    }
                }
            }
            
            // Update book stats
            book.TotalWords = await _context.TextWords
                .Where(tw => tw.Text.BookId == id)
                .Select(tw => tw.Word)
                .Distinct()
                .CountAsync();
            
            book.KnownWords = await _context.TextWords
                .Where(tw => tw.Text.BookId == id)
                .Select(tw => tw.Word)
                .Where(w => w.Status >= 4)
                .Distinct()
                .CountAsync();
            
            book.LearningWords = await _context.TextWords
                .Where(tw => tw.Text.BookId == id)
                .Select(tw => tw.Word)
                .Where(w => w.Status >= 2 && w.Status < 4)
                .Distinct()
                .CountAsync();
            
            book.LastReadAt = DateTime.UtcNow;
            book.LastReadTextId = text.TextId;
            book.LastReadPartId = text.PartNumber;
            
            await _context.SaveChangesAsync();
            
            // Calculate completion percentage based on text position, not word knowledge
            // Get total number of texts/parts in this book
            int totalTexts = await _context.Texts
                .Where(t => t.BookId == id)
                .CountAsync();
                
            // Calculate progress based on current part number and format to 2 decimal places
            double completionPercentage = totalTexts > 0 
                ? Math.Round(((double)text.PartNumber / totalTexts) * 100, 2) 
                : 0;
            
            return new BookStatsDto
            {
                TotalWords = book.TotalWords,
                KnownWords = book.KnownWords,
                LearningWords = book.LearningWords,
                CompletionPercentage = completionPercentage,
                IsFinished = book.IsFinished
            };
        }

        // PUT: api/books/5/finish
        [HttpPut("{id}/finish")]
        public async Task<ActionResult<BookStatsDto>> FinishBook(int id)
        {
            var userId = GetUserId();
            
            var book = await _context.Books
                .Where(b => b.BookId == id && b.UserId == userId)
                .Include(b => b.Language)  // Include the language
                .Include(b => b.Texts)
                .FirstOrDefaultAsync();
                
            if (book == null)
            {
                return NotFound("Book not found");
            }
            
            if (book.Language == null)
            {
                return BadRequest("Book language not found");
            }
            
            // Count all words in all texts of the book
            int totalWordCount = WordCountUtility.CountWordsInTexts(book.Texts);
            
            // Update the language WordsRead counter
            WordCountUtility.UpdateLanguageWordCount(book.Language, totalWordCount);
            // Explicitly mark the language entity as modified
            _context.Entry(book.Language).State = EntityState.Modified;
            
            // Track this reading activity for statistics
            var activity = new UserActivity
            {
                UserId = userId,
                LanguageId = book.LanguageId,
                ActivityType = "BookFinished",
                WordCount = totalWordCount,
                Timestamp = DateTime.UtcNow
            };
            _context.UserActivities.Add(activity);
            
            // Get all unique words from all texts in the book
            var textWords = await _context.TextWords
                .Where(tw => tw.Text.BookId == id)
                .Include(tw => tw.Word)
                .ToListAsync();
            
            var uniqueWords = textWords.Select(tw => tw.Word).GroupBy(w => w.Term.ToLower()).Select(g => g.First()).ToList();
            
            // Mark all words as known
            foreach (var word in uniqueWords)
            {
                word.Status = 5; // Mastered
            }
            
            // Update book stats
            book.TotalWords = uniqueWords.Count;
            book.KnownWords = uniqueWords.Count; // All words are now known
            book.LearningWords = 0;
            book.LastReadAt = DateTime.UtcNow;
            book.IsFinished = true;
            
            await _context.SaveChangesAsync();
            
            return new BookStatsDto
            {
                TotalWords = book.TotalWords,
                KnownWords = book.KnownWords,
                LearningWords = book.LearningWords,
                CompletionPercentage = 100,
                IsFinished = true
            };
        }

        // GET: api/books/5/next-lesson
        [HttpGet("{id}/next-lesson")]
        public async Task<ActionResult<NextLessonDto>> GetNextLesson(int id, [FromQuery] int currentTextId)
        {
            var userId = GetUserId();
            
            // Retrieve the book and ensure it belongs to the user
            var book = await _context.Books
                .Include(b => b.Texts)
                .Where(b => b.BookId == id && b.UserId == userId)
                .FirstOrDefaultAsync();
                
            if (book == null)
            {
                return NotFound("Book not found");
            }
            
            // Order texts by their part number
            var orderedTexts = book.Texts.OrderBy(t => t.PartNumber).ToList();
            
            // Find the current text index
            var currentIndex = orderedTexts.FindIndex(t => t.TextId == currentTextId);
            
            if (currentIndex == -1)
            {
                return NotFound("Current text not found in this book");
            }
            
            // Check if this is the last text
            if (currentIndex >= orderedTexts.Count - 1)
            {
                return Ok(new NextLessonDto { TextId = null });
            }
            
            // Return the next text
            var nextText = orderedTexts[currentIndex + 1];
            return Ok(new NextLessonDto { TextId = nextText.TextId });
        }

        private Guid GetUserId()
        {
            var userIdClaim = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (string.IsNullOrEmpty(userIdClaim))
            {
                throw new UnauthorizedAccessException("User ID not found in token");
            }
            
            return Guid.Parse(userIdClaim);
        }
    }

    public class BookDto
    {
        public int BookId { get; set; }
        public string Title { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public string LanguageName { get; set; } = string.Empty;
        public DateTime CreatedAt { get; set; }
        public int PartCount { get; set; }
        public int? LastReadTextId { get; set; }
        public DateTime? LastReadAt { get; set; }
        public int TotalWords { get; set; }
        public int KnownWords { get; set; }
        public int LearningWords { get; set; }
        public bool IsFinished { get; set; }
        public double CompletionPercentage => TotalWords > 0 ? 
            Math.Round((double)(KnownWords + LearningWords) / TotalWords * 100, 1) : 0;
    }

    public class BookDetailDto
    {
        public int BookId { get; set; }
        public string Title { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public string LanguageName { get; set; } = string.Empty;
        public int LanguageId { get; set; }
        public DateTime CreatedAt { get; set; }
        public List<TextPartDto> Parts { get; set; } = new List<TextPartDto>();
    }

    public class TextPartDto
    {
        public int TextId { get; set; }
        public string Title { get; set; } = string.Empty;
        public int PartNumber { get; set; }
        public DateTime CreatedAt { get; set; }
    }

    public class CreateBookDto
    {
        [Required]
        [StringLength(200)]
        public string Title { get; set; } = string.Empty;
        
        [StringLength(1000)]
        public string Description { get; set; } = string.Empty;
        
        [Required]
        public int LanguageId { get; set; }
        
        public string Content { get; set; } = string.Empty;
        
        [Required]
        public string SplitMethod { get; set; } = "paragraph"; // paragraph, sentence, length
        
        [Required]
        [Range(500, 50000)]
        public int MaxSegmentSize { get; set; } = 3000; // Default max characters per segment
    }

    public class UpdateLastReadDto
    {
        [Required]
        public int TextId { get; set; }
    }

    public class CompleteLessonDto
    {
        [Required]
        public int TextId { get; set; }
    }

    public class BookStatsDto
    {
        public int TotalWords { get; set; }
        public int KnownWords { get; set; }
        public int LearningWords { get; set; }
        public double CompletionPercentage { get; set; }
        public bool IsFinished { get; set; }
    }

    public class NextLessonDto
    {
        public int? TextId { get; set; }
    }
}

================
File: server/LinguaReadApi/Controllers/HealthController.cs
================
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Cors;
using System;
using System.Collections.Generic;

namespace LinguaReadApi.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    [AllowAnonymous] // Explicitly allow anonymous access to all health endpoints
    [EnableCors("AllowClientApp")] // Enable CORS for this controller
    public class HealthController : ControllerBase
    {
        private readonly ILogger<HealthController> _logger;

        public HealthController(ILogger<HealthController> logger)
        {
            _logger = logger;
        }

        /// <summary>
        /// Basic health check endpoint that returns server status
        /// </summary>
        [HttpGet]
        public IActionResult Get()
        {
            _logger.LogInformation("Health check requested at: {time}", DateTimeOffset.UtcNow);
            
            return Ok(new
            {
                Status = "healthy",
                Timestamp = DateTimeOffset.UtcNow,
                Version = "1.0.0",
                Environment = Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT") ?? "Development"
            });
        }

        /// <summary>
        /// Test endpoint that returns sample statistics data for debugging
        /// </summary>
        [HttpGet("stats")]
        public IActionResult GetTestStats()
        {
            _logger.LogInformation("Test statistics requested at: {time}", DateTimeOffset.UtcNow);
            
            return Ok(new
            {
                TotalBooks = 12,
                FinishedBooks = 8,
                TotalWords = 25000,
                KnownWords = 18750,
                LanguageStats = new Dictionary<string, object>
                {
                    { "English", new { TotalWords = 15000, KnownWords = 12000 } },
                    { "Spanish", new { TotalWords = 10000, KnownWords = 6750 } }
                }
            });
        }
        
        /// <summary>
        /// Test endpoint that returns sample reading activity data for debugging
        /// </summary>
        [HttpGet("activity")]
        public IActionResult GetTestActivity([FromQuery] string period = "all")
        {
            _logger.LogInformation("Test activity data requested for period: {period} at: {time}", 
                period, DateTimeOffset.UtcNow);
            
            // Current date for reference
            var today = DateTime.UtcNow.Date;
            
            // Create sample activity data
            var activityByDate = new Dictionary<string, int>();
            
            // Generate data for the last 30 days with random word counts
            var random = new Random(42); // Fixed seed for consistent results
            for (int i = 0; i < 30; i++)
            {
                var date = today.AddDays(-i).ToString("yyyy-MM-dd");
                activityByDate[date] = random.Next(10, 500);
            }
            
            return Ok(new
            {
                TotalWordsRead = 25000,
                ActivityByDate = activityByDate,
                ActivityByLanguage = new Dictionary<string, int>
                {
                    { "English", 15000 },
                    { "Spanish", 10000 }
                }
            });
        }
        
        /// <summary>
        /// Diagnostic endpoint that returns information about the current request
        /// </summary>
        [HttpGet("diagnostics")]
        public IActionResult GetDiagnostics()
        {
            _logger.LogInformation("Diagnostics endpoint called at {time} from {ip}", 
                DateTime.UtcNow, HttpContext.Connection.RemoteIpAddress);
            
            try
            {
                var headers = new Dictionary<string, string>();
                foreach (var header in Request.Headers)
                {
                    headers[header.Key] = header.Value;
                }
                
                var result = new
                {
                    Timestamp = DateTime.UtcNow,
                    ClientIP = HttpContext.Connection.RemoteIpAddress?.ToString(),
                    Host = Request.Host.ToString(),
                    Path = Request.Path.ToString(),
                    Protocol = Request.Protocol,
                    Headers = headers,
                    QueryString = Request.QueryString.ToString(),
                    ServerVariables = new
                    {
                        ServerName = Environment.MachineName,
                        OSVersion = Environment.OSVersion.ToString(),
                        DotNetVersion = Environment.Version.ToString(),
                        ServerTime = DateTime.Now.ToString()
                    }
                };

                _logger.LogInformation("Successfully returned diagnostics data");
                return Ok(result);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error generating diagnostics data");
                return StatusCode(500, new { message = "Error generating diagnostics data", error = ex.Message });
            }
        }
        
        /// <summary>
        /// Debug endpoint that returns test data for the Statistics component
        /// </summary>
        [HttpGet("debug-stats")]
        public IActionResult GetDebugStats()
        {
            _logger.LogInformation("Debug statistics and activity requested at: {time}", DateTimeOffset.UtcNow);
            
            // Create combined stats and activity data for debugging
            return Ok(new
            {
                ApiVersion = "1.0.0",
                Timestamp = DateTimeOffset.UtcNow,
                Environment = Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT") ?? "Development",
                StatsData = new
                {
                    TotalBooks = 12,
                    FinishedBooks = 8,
                    TotalWords = 25000,
                    KnownWords = 18750,
                    LanguageStats = new Dictionary<string, object>
                    {
                        { "English", new { TotalWords = 15000, KnownWords = 12000 } },
                        { "Spanish", new { TotalWords = 10000, KnownWords = 6750 } }
                    },
                    TotalWordsRead = 25000,
                    ActivityByDate = CreateSampleActivityByDate(),
                    ActivityByLanguage = new Dictionary<string, int>
                    {
                        { "English", 15000 },
                        { "Spanish", 10000 }
                    }
                }
            });
        }

        private Dictionary<string, int> CreateSampleActivityByDate()
        {
            var activityByDate = new Dictionary<string, int>();
            var today = DateTime.UtcNow.Date;
            var random = new Random(42); // Fixed seed for consistent results
            
            for (int i = 0; i < 30; i++)
            {
                var date = today.AddDays(-i).ToString("yyyy-MM-dd");
                activityByDate[date] = random.Next(10, 500);
            }
            
            return activityByDate;
        }
    }
}

================
File: server/LinguaReadApi/Controllers/LanguagesController.cs
================
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using LinguaReadApi.Data;
using LinguaReadApi.Models;

namespace LinguaReadApi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class LanguagesController : ControllerBase
    {
        private readonly AppDbContext _context;

        public LanguagesController(AppDbContext context)
        {
            _context = context;
        }

        // GET: api/languages
        [HttpGet]
        public async Task<ActionResult<IEnumerable<LanguageDto>>> GetLanguages()
        {
            var languages = await _context.Languages
                .Select(l => new LanguageDto
                {
                    LanguageId = l.LanguageId,
                    Name = l.Name,
                    Code = l.Code
                })
                .ToListAsync();
                
            return languages;
        }
        
        // GET: api/languages/5
        [HttpGet("{id}")]
        public async Task<ActionResult<LanguageDto>> GetLanguage(int id)
        {
            var language = await _context.Languages.FindAsync(id);
            
            if (language == null)
            {
                return NotFound();
            }
            
            return new LanguageDto
            {
                LanguageId = language.LanguageId,
                Name = language.Name,
                Code = language.Code
            };
        }
    }
    
    public class LanguageDto
    {
        public int LanguageId { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Code { get; set; } = string.Empty;
    }
}

================
File: server/LinguaReadApi/Controllers/SentenceTranslationController.cs
================
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System.Text.Json.Serialization;
using System.Threading.Tasks;
using System;
using Microsoft.Extensions.Logging;
using LinguaReadApi.Services;

namespace LinguaReadApi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    [Authorize]
    public class SentenceTranslationController : ControllerBase
    {
        private readonly ISentenceTranslationService _translationService;
        private readonly ILogger<SentenceTranslationController> _logger;

        public SentenceTranslationController(
            ISentenceTranslationService translationService,
            ILogger<SentenceTranslationController> logger)
        {
            _translationService = translationService;
            _logger = logger;
        }

        /// <summary>
        /// Translates a sentence or paragraph from one language to another using Gemini API
        /// </summary>
        /// <param name="request">The translation request containing text and language codes</param>
        /// <returns>The translated text</returns>
        [HttpPost]
        public async Task<ActionResult<SentenceTranslationResponse>> TranslateSentence([FromBody] SentenceTranslationRequest request)
        {
            try
            {
                _logger.LogInformation($"Received sentence translation request: {request.Text?.Substring(0, Math.Min(50, request.Text?.Length ?? 0))}...");
                
                if (string.IsNullOrWhiteSpace(request.Text))
                {
                    _logger.LogWarning("Empty text provided for translation");
                    return BadRequest(new { message = "Text to translate cannot be empty" });
                }

                _logger.LogInformation($"Translating from {request.SourceLanguageCode} to {request.TargetLanguageCode}");
                
                var translatedText = await _translationService.TranslateSentenceAsync(
                    request.Text,
                    request.SourceLanguageCode,
                    request.TargetLanguageCode);

                if (string.IsNullOrEmpty(translatedText))
                {
                    _logger.LogWarning("Translation service returned empty result");
                    return StatusCode(500, new { message = "Translation service returned empty result" });
                }

                _logger.LogInformation($"Translation successful, result length: {translatedText.Length}");
                
                return Ok(new SentenceTranslationResponse
                {
                    OriginalText = request.Text,
                    TranslatedText = translatedText,
                    SourceLanguageCode = request.SourceLanguageCode,
                    TargetLanguageCode = request.TargetLanguageCode
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error during sentence translation");
                return StatusCode(500, new { message = $"Translation failed: {ex.Message}" });
            }
        }

        /// <summary>
        /// Translates an entire text for a quick preview
        /// </summary>
        [HttpPost("full-text")]
        public async Task<ActionResult<SentenceTranslationResponse>> TranslateFullText([FromBody] SentenceTranslationRequest request)
        {
            try
            {
                _logger.LogInformation($"Received full text translation request, text length: {request.Text?.Length ?? 0}");
                
                if (string.IsNullOrWhiteSpace(request.Text))
                {
                    _logger.LogWarning("Empty text provided for full text translation");
                    return BadRequest(new { message = "Text to translate cannot be empty" });
                }

                _logger.LogInformation($"Translating full text from {request.SourceLanguageCode} to {request.TargetLanguageCode}");
                
                var translatedText = await _translationService.TranslateSentenceAsync(
                    request.Text,
                    request.SourceLanguageCode,
                    request.TargetLanguageCode);

                if (string.IsNullOrEmpty(translatedText))
                {
                    _logger.LogWarning("Translation service returned empty result for full text");
                    return StatusCode(500, new { message = "Translation service returned empty result" });
                }

                _logger.LogInformation($"Full text translation successful, result length: {translatedText.Length}");
                
                return Ok(new SentenceTranslationResponse
                {
                    OriginalText = request.Text,
                    TranslatedText = translatedText,
                    SourceLanguageCode = request.SourceLanguageCode,
                    TargetLanguageCode = request.TargetLanguageCode
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error during full text translation");
                return StatusCode(500, new { message = $"Translation failed: {ex.Message}" });
            }
        }
    }

    public class SentenceTranslationRequest
    {
        [JsonPropertyName("text")]
        public string Text { get; set; }

        [JsonPropertyName("sourceLanguageCode")]
        public string SourceLanguageCode { get; set; }

        [JsonPropertyName("targetLanguageCode")]
        public string TargetLanguageCode { get; set; }
    }

    public class SentenceTranslationResponse
    {
        [JsonPropertyName("originalText")]
        public string OriginalText { get; set; }

        [JsonPropertyName("translatedText")]
        public string TranslatedText { get; set; }

        [JsonPropertyName("sourceLanguageCode")]
        public string SourceLanguageCode { get; set; }

        [JsonPropertyName("targetLanguageCode")]
        public string TargetLanguageCode { get; set; }
    }
}

================
File: server/LinguaReadApi/Controllers/TextsController.cs
================
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;
using System.Threading.Tasks;
using LinguaReadApi.Data;
using LinguaReadApi.Models;
using System.ComponentModel.DataAnnotations;

namespace LinguaReadApi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    [Authorize]
    public class TextsController : ControllerBase
    {
        private readonly AppDbContext _context;

        public TextsController(AppDbContext context)
        {
            _context = context;
        }

        // GET: api/texts
        [HttpGet]
        public async Task<ActionResult<IEnumerable<TextDto>>> GetTexts()
        {
            var userId = GetUserId();
            
            var texts = await _context.Texts
                .Where(t => t.UserId == userId)
                .Include(t => t.Language)
                .Select(t => new TextDto
                {
                    TextId = t.TextId,
                    Title = t.Title,
                    LanguageName = t.Language.Name,
                    CreatedAt = t.CreatedAt
                })
                .ToListAsync();
                
            return texts;
        }

        // GET: api/texts/5
        [HttpGet("{id}")]
        public async Task<ActionResult<TextDetailDto>> GetText(int id)
        {
            var userId = GetUserId();
            
            var text = await _context.Texts
                .Where(t => t.TextId == id && t.UserId == userId)
                .Include(t => t.Language)
                .Include(t => t.TextWords)
                    .ThenInclude(tw => tw.Word)
                        .ThenInclude(w => w.Translation)
                .FirstOrDefaultAsync();
                
            if (text == null)
            {
                return NotFound();
            }
            
            var textDetail = new TextDetailDto
            {
                TextId = text.TextId,
                Title = text.Title,
                Content = text.Content,
                LanguageName = text.Language.Name,
                LanguageId = text.LanguageId,
                BookId = text.BookId,
                CreatedAt = text.CreatedAt,
                Words = text.TextWords.Select(tw => new WordDto
                {
                    WordId = tw.Word.WordId,
                    Term = tw.Word.Term,
                    Status = tw.Word.Status,
                    Translation = tw.Word.Translation?.Translation,
                    IsNew = false // Words from the text are not new
                }).ToList()
            };
            
            return textDetail;
        }

        // POST: api/texts
        [HttpPost]
        public async Task<ActionResult<TextDto>> CreateText([FromBody] CreateTextDto createTextDto)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
            
            var userId = GetUserId();
            
            // Check if language exists
            var languageExists = await _context.Languages.AnyAsync(l => l.LanguageId == createTextDto.LanguageId);
            if (!languageExists)
            {
                return BadRequest("Invalid language ID");
            }
            
            var text = new Text
            {
                Title = createTextDto.Title,
                Content = createTextDto.Content,
                LanguageId = createTextDto.LanguageId,
                UserId = userId,
                CreatedAt = DateTime.UtcNow
            };
            
            _context.Texts.Add(text);
            await _context.SaveChangesAsync();
            
            var language = await _context.Languages.FindAsync(text.LanguageId);
            
            var textDto = new TextDto
            {
                TextId = text.TextId,
                Title = text.Title,
                LanguageName = language.Name,
                CreatedAt = text.CreatedAt
            };
            
            return CreatedAtAction(nameof(GetText), new { id = text.TextId }, textDto);
        }

        private Guid GetUserId()
        {
            var userIdClaim = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (string.IsNullOrEmpty(userIdClaim))
            {
                throw new UnauthorizedAccessException("User ID not found in token");
            }
            
            return Guid.Parse(userIdClaim);
        }
    }

    public class TextDto
    {
        public int TextId { get; set; }
        public string Title { get; set; } = string.Empty;
        public string LanguageName { get; set; } = string.Empty;
        public DateTime CreatedAt { get; set; }
    }

    public class TextDetailDto
    {
        public int TextId { get; set; }
        public string Title { get; set; } = string.Empty;
        public string Content { get; set; } = string.Empty;
        public string LanguageName { get; set; } = string.Empty;
        public int LanguageId { get; set; }
        public int? BookId { get; set; }
        public DateTime CreatedAt { get; set; }
        public List<WordDto> Words { get; set; } = new List<WordDto>();
    }

    public class WordDto
    {
        public int WordId { get; set; }
        public string Term { get; set; } = string.Empty;
        public int Status { get; set; }
        public string Translation { get; set; } = string.Empty;
        public bool IsNew { get; set; }
    }

    public class CreateTextDto
    {
        [Required]
        [StringLength(200)]
        public string Title { get; set; } = string.Empty;
        
        [Required]
        public string Content { get; set; } = string.Empty;
        
        [Required]
        public int LanguageId { get; set; }
    }
}

================
File: server/LinguaReadApi/Controllers/TranslationController.cs
================
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System.Threading.Tasks;
using LinguaReadApi.Services;
using System.Text.Json.Serialization;
using System;
using System.Collections.Generic;

namespace LinguaReadApi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    [Authorize]
    public class TranslationController : ControllerBase
    {
        private readonly ITranslationService _translationService;

        public TranslationController(ITranslationService translationService)
        {
            _translationService = translationService;
        }

        /// <summary>
        /// Translates text from one language to another
        /// </summary>
        /// <param name="request">The translation request containing text and language codes</param>
        /// <returns>The translated text</returns>
        [HttpPost]
        public async Task<ActionResult<TranslationResponse>> TranslateText([FromBody] TranslationRequest request)
        {
            if (string.IsNullOrEmpty(request.Text))
            {
                return BadRequest("Text to translate cannot be empty");
            }

            if (string.IsNullOrEmpty(request.SourceLanguageCode))
            {
                return BadRequest("Source language code cannot be empty");
            }

            if (string.IsNullOrEmpty(request.TargetLanguageCode))
            {
                return BadRequest("Target language code cannot be empty");
            }

            try
            {
                var translatedText = await _translationService.TranslateTextAsync(
                    request.Text,
                    request.SourceLanguageCode,
                    request.TargetLanguageCode);

                return Ok(new TranslationResponse
                {
                    OriginalText = request.Text,
                    TranslatedText = translatedText,
                    SourceLanguageCode = request.SourceLanguageCode,
                    TargetLanguageCode = request.TargetLanguageCode
                });
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Translation failed: {ex.Message}");
            }
        }

        /// <summary>
        /// Gets the list of supported languages
        /// </summary>
        /// <returns>List of language codes and names</returns>
        [HttpGet("languages")]
        public ActionResult<IEnumerable<LanguageInfo>> GetSupportedLanguages()
        {
            // Return a list of languages supported by DeepL
            var languages = new List<LanguageInfo>
            {
                new LanguageInfo { Code = "EN", Name = "English" },
                new LanguageInfo { Code = "DE", Name = "German" },
                new LanguageInfo { Code = "FR", Name = "French" },
                new LanguageInfo { Code = "ES", Name = "Spanish" },
                new LanguageInfo { Code = "IT", Name = "Italian" },
                new LanguageInfo { Code = "NL", Name = "Dutch" },
                new LanguageInfo { Code = "PL", Name = "Polish" },
                new LanguageInfo { Code = "PT", Name = "Portuguese" },
                new LanguageInfo { Code = "RU", Name = "Russian" },
                new LanguageInfo { Code = "JA", Name = "Japanese" },
                new LanguageInfo { Code = "ZH", Name = "Chinese" }
            };

            return Ok(languages);
        }
    }

    public class TranslationRequest
    {
        [JsonPropertyName("text")]
        public string Text { get; set; } = string.Empty;

        [JsonPropertyName("sourceLanguageCode")]
        public string SourceLanguageCode { get; set; } = string.Empty;

        [JsonPropertyName("targetLanguageCode")]
        public string TargetLanguageCode { get; set; } = string.Empty;
    }

    public class TranslationResponse
    {
        [JsonPropertyName("originalText")]
        public string OriginalText { get; set; } = string.Empty;

        [JsonPropertyName("translatedText")]
        public string TranslatedText { get; set; } = string.Empty;

        [JsonPropertyName("sourceLanguageCode")]
        public string SourceLanguageCode { get; set; } = string.Empty;

        [JsonPropertyName("targetLanguageCode")]
        public string TargetLanguageCode { get; set; } = string.Empty;
    }

    public class LanguageInfo
    {
        [JsonPropertyName("code")]
        public string Code { get; set; } = string.Empty;

        [JsonPropertyName("name")]
        public string Name { get; set; } = string.Empty;
    }
}

================
File: server/LinguaReadApi/Controllers/UsersController.cs
================
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;
using System.Threading.Tasks;
using LinguaReadApi.Data;
using LinguaReadApi.Models;
using Microsoft.Extensions.Logging;

namespace LinguaReadApi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    [Authorize]
    public class UsersController : ControllerBase
    {
        private readonly AppDbContext _context;
        private readonly ILogger<UsersController> _logger;

        public UsersController(AppDbContext context, ILogger<UsersController> logger)
        {
            _context = context;
            _logger = logger;
        }

        // GET: api/users/statistics
        [HttpGet("statistics")]
        public async Task<ActionResult<UserStatisticsDto>> GetUserStatistics()
        {
            var userId = GetUserId();
            
            // Get all user's words
            var words = await _context.Words
                .Where(w => w.UserId == userId)
                .ToListAsync();
                
            // Get user's books
            var books = await _context.Books
                .Where(b => b.UserId == userId)
                .Include(b => b.Language)
                .ToListAsync();
                
            // Get word counts by status and language
            var wordsByStatus = words
                .GroupBy(w => w.Status)
                .ToDictionary(g => g.Key, g => g.Count());
                
            var wordsByLanguage = words
                .GroupBy(w => w.LanguageId)
                .ToDictionary(g => g.Key, g => g.Count());
                
            // Create language statistics
            var languages = await _context.Languages
                .Where(l => wordsByLanguage.Keys.Contains(l.LanguageId))
                .ToListAsync();
                
            var languageStats = languages.Select(l => new LanguageStatisticsDto
            {
                LanguageId = l.LanguageId,
                LanguageName = l.Name,
                WordCount = wordsByLanguage.ContainsKey(l.LanguageId) ? wordsByLanguage[l.LanguageId] : 0,
                TotalWordsRead = l.WordsRead,
                BookCount = books.Count(b => b.LanguageId == l.LanguageId),
                FinishedBookCount = books.Count(b => b.LanguageId == l.LanguageId && b.IsFinished)
            }).ToList();
                
            // Calculate total statistics
            var statistics = new UserStatisticsDto
            {
                TotalWords = words.Count,
                KnownWords = wordsByStatus.ContainsKey(5) ? wordsByStatus[5] : 0,
                LearningWords = words.Count - (wordsByStatus.ContainsKey(5) ? wordsByStatus[5] : 0),
                TotalBooks = books.Count,
                FinishedBooks = books.Count(b => b.IsFinished),
                LastActivity = DateTime.UtcNow, // Default to current time to avoid Invalid Date
                TotalLanguages = languageStats.Count,
                LanguageStatistics = languageStats
            };
            
            // Set LastActivity safely
            if (books.Any(b => b.LastReadAt.HasValue))
            {
                var maxDate = books.Where(b => b.LastReadAt.HasValue)
                                  .Max(b => b.LastReadAt.Value);
                statistics.LastActivity = maxDate;
            }
            
            return statistics;
        }

        [HttpGet("activity")]
        public async Task<IActionResult> GetReadingActivity([FromQuery] string period = "all")
        {
            _logger.LogInformation("Getting reading activity for period: {Period}", period);
            
            try
            {
                // Log more detailed information for debugging
                _logger.LogDebug("Attempting to retrieve reading activity data with period: {Period}", period);
                
                // Create sample activity data
                var activityByDate = new Dictionary<string, int>();
                
                // Current date for reference
                var today = DateTime.UtcNow.Date;
                
                // Generate data for the last 30 days with random word counts
                var random = new Random(42); // Fixed seed for consistent results
                for (int i = 0; i < 30; i++)
                {
                    var date = today.AddDays(-i).ToString("yyyy-MM-dd");
                    activityByDate[date] = random.Next(10, 500);
                }
                
                // Return sample data
                var result = new
                {
                    TotalWordsRead = 25000,
                    ActivityByDate = activityByDate,
                    ActivityByLanguage = new Dictionary<string, int>
                    {
                        { "English", 15000 },
                        { "Spanish", 10000 }
                    }
                };
                
                _logger.LogInformation("Successfully retrieved reading activity data");
                return Ok(result);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving reading activity data");
                return StatusCode(500, new { message = "Error retrieving reading activity data", error = ex.Message });
            }
        }

        private Guid GetUserId()
        {
            var userIdClaim = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (string.IsNullOrEmpty(userIdClaim))
            {
                throw new UnauthorizedAccessException("User ID not found in token");
            }
            
            return Guid.Parse(userIdClaim);
        }
    }

    public class UserStatisticsDto
    {
        public int TotalWords { get; set; }
        public int KnownWords { get; set; }
        public int LearningWords { get; set; }
        public int TotalBooks { get; set; }
        public int FinishedBooks { get; set; }
        public DateTime LastActivity { get; set; }
        public int TotalLanguages { get; set; }
        public List<LanguageStatisticsDto> LanguageStatistics { get; set; } = new List<LanguageStatisticsDto>();
    }

    public class LanguageStatisticsDto
    {
        public int LanguageId { get; set; }
        public string LanguageName { get; set; } = string.Empty;
        public int WordCount { get; set; }
        public int TotalWordsRead { get; set; }
        public int BookCount { get; set; }
        public int FinishedBookCount { get; set; }
    }
}

================
File: server/LinguaReadApi/Controllers/WordsController.cs
================
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using Microsoft.EntityFrameworkCore;
using System;
using System.ComponentModel.DataAnnotations;
using System.Security.Claims;
using System.Threading.Tasks;
using LinguaReadApi.Data;
using LinguaReadApi.Models;
using System.Linq;
using System.Collections.Generic;

namespace LinguaReadApi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    [Authorize]
    public class WordsController : ControllerBase
    {
        private readonly AppDbContext _context;

        public WordsController(AppDbContext context)
        {
            _context = context;
        }

        // POST: api/words
        [HttpPost]
        public async Task<ActionResult<WordResponseDto>> CreateWord([FromBody] CreateWordDto createWordDto)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
            
            var userId = GetUserId();
            
            // Check if the text exists and belongs to the user
            var text = await _context.Texts
                .Include(t => t.Language)
                .FirstOrDefaultAsync(t => t.TextId == createWordDto.TextId && t.UserId == userId);
                
            if (text == null)
            {
                return NotFound("Text not found or does not belong to the user");
            }

            // Check if the word already exists for this user and language
            var existingWord = await _context.Words
                .Include(w => w.Translation)
                .FirstOrDefaultAsync(w => 
                    w.Term == createWordDto.Term && 
                    w.UserId == userId &&
                    w.LanguageId == text.LanguageId);

            if (existingWord != null)
            {
                // Create text-word relationship if it doesn't exist
                var existingTextWord = await _context.Set<TextWord>()
                    .FirstOrDefaultAsync(tw => tw.TextId == text.TextId && tw.WordId == existingWord.WordId);

                if (existingTextWord == null)
                {
                    _context.Set<TextWord>().Add(new TextWord
                    {
                        TextId = text.TextId,
                        WordId = existingWord.WordId,
                        CreatedAt = DateTime.UtcNow
                    });
                }

                // Update status if the new status is higher
                if (createWordDto.Status > existingWord.Status)
                {
                    existingWord.Status = createWordDto.Status;
                }

                // Update translation if provided
                if (existingWord.Translation == null)
                {
                    existingWord.Translation = new WordTranslation
                    {
                        WordId = existingWord.WordId,
                        Translation = createWordDto.Translation,
                        CreatedAt = DateTime.UtcNow
                    };
                }
                else if (createWordDto.Translation != existingWord.Translation.Translation)
                {
                    existingWord.Translation.Translation = createWordDto.Translation;
                    existingWord.Translation.UpdatedAt = DateTime.UtcNow;
                }

                await _context.SaveChangesAsync();

                return Ok(new WordResponseDto
                {
                    WordId = existingWord.WordId,
                    Term = existingWord.Term,
                    Status = existingWord.Status,
                    Translation = existingWord.Translation.Translation,
                    IsNew = false
                });
            }

            // Create new word
            var word = new Word
            {
                Term = createWordDto.Term,
                Status = createWordDto.Status,
                UserId = userId,
                LanguageId = text.LanguageId,
                CreatedAt = DateTime.UtcNow
            };

            _context.Words.Add(word);
            await _context.SaveChangesAsync();

            // Create text-word relationship
            var textWord = new TextWord
            {
                TextId = text.TextId,
                WordId = word.WordId,
                CreatedAt = DateTime.UtcNow
            };

            _context.Set<TextWord>().Add(textWord);

            // Create translation
            var wordTranslation = new WordTranslation
            {
                WordId = word.WordId,
                Translation = createWordDto.Translation,
                CreatedAt = DateTime.UtcNow
            };

            _context.WordTranslations.Add(wordTranslation);
            await _context.SaveChangesAsync();

            return CreatedAtAction(nameof(GetWord), new { id = word.WordId }, new WordResponseDto
            {
                WordId = word.WordId,
                Term = word.Term,
                Status = word.Status,
                Translation = wordTranslation.Translation,
                IsNew = true
            });
        }

        // GET: api/words/5
        [HttpGet("{id}")]
        public async Task<ActionResult<WordResponseDto>> GetWord(int id)
        {
            var userId = GetUserId();
            
            var word = await _context.Words
                .Include(w => w.Translation)
                .FirstOrDefaultAsync(w => w.WordId == id && w.UserId == userId);
                
            if (word == null)
            {
                return NotFound();
            }
            
            return new WordResponseDto
            {
                WordId = word.WordId,
                Term = word.Term,
                Status = word.Status,
                Translation = word.Translation?.Translation,
                IsNew = word.Status == 1
            };
        }

        // GET: api/words/language/5
        [HttpGet("language/{languageId}")]
        public async Task<ActionResult<IEnumerable<WordResponseDto>>> GetWordsByLanguage(int languageId)
        {
            var userId = GetUserId();
            
            var words = await _context.Words
                .Where(w => w.LanguageId == languageId && w.UserId == userId)
                .Include(w => w.Translation)
                .Select(w => new WordResponseDto
                {
                    WordId = w.WordId,
                    Term = w.Term,
                    Status = w.Status,
                    Translation = w.Translation != null ? w.Translation.Translation : "",
                    IsNew = w.Status == 1
                })
                .ToListAsync();
                
            return words;
        }

        // PUT: api/words/5
        [HttpPut("{id}")]
        public async Task<IActionResult> UpdateWord(int id, [FromBody] UpdateWordDto updateWordDto)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
            
            var userId = GetUserId();
            
            var word = await _context.Words
                .Include(w => w.Translation)
                .FirstOrDefaultAsync(w => w.WordId == id && w.UserId == userId);
                
            if (word == null)
            {
                return NotFound();
            }
            
            // Update word status
            word.Status = updateWordDto.Status;
            
            // Update translation
            if (word.Translation == null)
            {
                word.Translation = new WordTranslation
                {
                    WordId = word.WordId,
                    Translation = updateWordDto.Translation,
                    CreatedAt = DateTime.UtcNow
                };
            }
            else
            {
                word.Translation.Translation = updateWordDto.Translation;
                word.Translation.UpdatedAt = DateTime.UtcNow;
            }
            
            await _context.SaveChangesAsync();
            
            return NoContent();
        }

        private Guid GetUserId()
        {
            var userIdClaim = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (string.IsNullOrEmpty(userIdClaim))
            {
                throw new UnauthorizedAccessException("User ID not found in token");
            }
            
            return Guid.Parse(userIdClaim);
        }
    }

    public class CreateWordDto
    {
        [Required]
        public int TextId { get; set; }
        
        [Required]
        [StringLength(100)]
        public string Term { get; set; } = string.Empty;
        
        [Required]
        [Range(1, 5)]
        public int Status { get; set; }
        
        // Translation can be empty
        public string Translation { get; set; } = string.Empty;
    }

    public class UpdateWordDto
    {
        [Required]
        [Range(1, 5)]
        public int Status { get; set; }
        
        // Translation can be empty
        public string Translation { get; set; } = string.Empty;
    }

    public class WordResponseDto
    {
        public int WordId { get; set; }
        public string Term { get; set; } = string.Empty;
        public int Status { get; set; }
        public string Translation { get; set; } = string.Empty;
        public bool IsNew { get; set; }
    }
}

================
File: server/LinguaReadApi/Data/AppDbContext.cs
================
using Microsoft.EntityFrameworkCore;
using LinguaReadApi.Models;

namespace LinguaReadApi.Data
{
    public class AppDbContext : DbContext
    {
        public AppDbContext(DbContextOptions<AppDbContext> options) : base(options)
        {
        }
        
        public DbSet<User> Users { get; set; }
        public DbSet<Language> Languages { get; set; }
        public DbSet<Text> Texts { get; set; }
        public DbSet<Word> Words { get; set; }
        public DbSet<WordTranslation> WordTranslations { get; set; }
        public DbSet<TextWord> TextWords { get; set; }
        public DbSet<Book> Books { get; set; }
        public DbSet<UserActivity> UserActivities { get; set; }
        
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);
            
            // Configure relationships
            
            // User - Text: One-to-Many
            modelBuilder.Entity<Text>()
                .HasOne(t => t.User)
                .WithMany(u => u.Texts)
                .HasForeignKey(t => t.UserId)
                .OnDelete(DeleteBehavior.Cascade);
                
            // Language - Text: One-to-Many
            modelBuilder.Entity<Text>()
                .HasOne(t => t.Language)
                .WithMany(l => l.Texts)
                .HasForeignKey(t => t.LanguageId)
                .OnDelete(DeleteBehavior.Restrict);
            
            // Book - Text: One-to-Many
            modelBuilder.Entity<Text>()
                .HasOne(t => t.Book)
                .WithMany(b => b.Texts)
                .HasForeignKey(t => t.BookId)
                .OnDelete(DeleteBehavior.Restrict)
                .IsRequired(false);
            
            // User - Book: One-to-Many
            modelBuilder.Entity<Book>()
                .HasOne(b => b.User)
                .WithMany(u => u.Books)
                .HasForeignKey(b => b.UserId)
                .OnDelete(DeleteBehavior.Cascade);
            
            // Language - Book: One-to-Many
            modelBuilder.Entity<Book>()
                .HasOne(b => b.Language)
                .WithMany()
                .HasForeignKey(b => b.LanguageId)
                .OnDelete(DeleteBehavior.Restrict);
                
            // Word - Language: Many-to-One
            modelBuilder.Entity<Word>()
                .HasOne(w => w.Language)
                .WithMany(l => l.Words)
                .HasForeignKey(w => w.LanguageId)
                .OnDelete(DeleteBehavior.Restrict);
                
            // Word - User: Many-to-One
            modelBuilder.Entity<Word>()
                .HasOne(w => w.User)
                .WithMany()
                .HasForeignKey(w => w.UserId)
                .OnDelete(DeleteBehavior.Cascade);
                
            // Word - WordTranslation: One-to-One
            modelBuilder.Entity<Word>()
                .HasOne(w => w.Translation)
                .WithOne(wt => wt.Word)
                .HasForeignKey<WordTranslation>(wt => wt.WordId)
                .OnDelete(DeleteBehavior.Cascade);
                
            // Text - Word: Many-to-Many through TextWord
            modelBuilder.Entity<TextWord>()
                .HasKey(tw => tw.TextWordId);
                
            modelBuilder.Entity<TextWord>()
                .HasOne(tw => tw.Text)
                .WithMany(t => t.TextWords)
                .HasForeignKey(tw => tw.TextId)
                .OnDelete(DeleteBehavior.Cascade);
                
            modelBuilder.Entity<TextWord>()
                .HasOne(tw => tw.Word)
                .WithMany(w => w.TextWords)
                .HasForeignKey(tw => tw.WordId)
                .OnDelete(DeleteBehavior.Restrict);
                
            // Configure Book.LastReadText relationship
            modelBuilder.Entity<Book>()
                .HasOne(b => b.LastReadText)
                .WithMany()
                .HasForeignKey(b => b.LastReadTextId)
                .IsRequired(false)
                .OnDelete(DeleteBehavior.SetNull);
                
            // Configure unique constraints
            modelBuilder.Entity<User>()
                .HasIndex(u => u.Email)
                .IsUnique();
            
            // UserActivity - Language: Many-to-One
            modelBuilder.Entity<UserActivity>()
                .HasOne(ua => ua.Language)
                .WithMany()
                .HasForeignKey(ua => ua.LanguageId)
                .OnDelete(DeleteBehavior.Restrict);
        }
    }
}

================
File: server/LinguaReadApi/Data/ApplicationDbContext.cs
================
using Microsoft.EntityFrameworkCore;
using LinguaReadApi.Models;

namespace LinguaReadApi.Data
{
    public class ApplicationDbContext : DbContext
    {
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            // Configure Language relationships
            modelBuilder.Entity<Language>()
                .HasMany(l => l.Books)
                .WithOne(b => b.Language)
                .HasForeignKey(b => b.LanguageId)
                .OnDelete(DeleteBehavior.Restrict);

            modelBuilder.Entity<Language>()
                .HasMany(l => l.Texts)
                .WithOne(t => t.Language)
                .HasForeignKey(t => t.LanguageId)
                .OnDelete(DeleteBehavior.Restrict);

            modelBuilder.Entity<Language>()
                .HasMany(l => l.Words)
                .WithOne(w => w.Language)
                .HasForeignKey(w => w.LanguageId)
                .OnDelete(DeleteBehavior.Restrict);

            // Configure User relationships
            modelBuilder.Entity<User>()
                .HasMany(u => u.Books)
                .WithOne(b => b.User)
                .HasForeignKey(b => b.UserId)
                .OnDelete(DeleteBehavior.Cascade);

            modelBuilder.Entity<User>()
                .HasMany(u => u.Texts)
                .WithOne(t => t.User)
                .HasForeignKey(t => t.UserId)
                .OnDelete(DeleteBehavior.Cascade);

            modelBuilder.Entity<User>()
                .HasMany(u => u.Words)
                .WithOne(w => w.User)
                .HasForeignKey(w => w.UserId)
                .OnDelete(DeleteBehavior.Cascade);

            // Configure unique email constraint
            modelBuilder.Entity<User>()
                .HasIndex(u => u.Email)
                .IsUnique();

            // Configure Book-Text relationship
            modelBuilder.Entity<Book>()
                .HasMany(b => b.Texts)
                .WithOne(t => t.Book)
                .HasForeignKey(t => t.BookId)
                .OnDelete(DeleteBehavior.Restrict);

            // Configure Book-LastReadText relationship
            modelBuilder.Entity<Book>()
                .HasOne(b => b.LastReadText)
                .WithMany()
                .HasForeignKey(b => b.LastReadTextId)
                .OnDelete(DeleteBehavior.SetNull);

            // Configure Word-Translation one-to-one relationship
            modelBuilder.Entity<Word>()
                .HasOne(w => w.Translation)
                .WithOne(wt => wt.Word)
                .HasForeignKey<WordTranslation>(wt => wt.WordId)
                .OnDelete(DeleteBehavior.Cascade);

            // Configure TextWord relationships
            modelBuilder.Entity<TextWord>()
                .HasOne(tw => tw.Text)
                .WithMany(t => t.TextWords)
                .HasForeignKey(tw => tw.TextId)
                .OnDelete(DeleteBehavior.Cascade);

            modelBuilder.Entity<TextWord>()
                .HasOne(tw => tw.Word)
                .WithMany(w => w.TextWords)
                .HasForeignKey(tw => tw.WordId)
                .OnDelete(DeleteBehavior.Restrict);
        }
    }
}

================
File: server/LinguaReadApi/Data/DbInitializer.cs
================
using System;
using System.Linq;
using LinguaReadApi.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;

namespace LinguaReadApi.Data
{
    public static class DbInitializer
    {
        public static void Initialize(IServiceProvider serviceProvider)
        {
            using (var context = new AppDbContext(
                serviceProvider.GetRequiredService<DbContextOptions<AppDbContext>>()))
            {
                // Look for any languages
                if (context.Languages.Any())
                {
                    return; // DB has been seeded
                }

                // Seed languages
                var languages = new Language[]
                {
                    new Language { Name = "English", Code = "en" },
                    new Language { Name = "Spanish", Code = "es" },
                    new Language { Name = "French", Code = "fr" },
                    new Language { Name = "German", Code = "de" },
                    new Language { Name = "Italian", Code = "it" },
                    new Language { Name = "Portuguese", Code = "pt" },
                    new Language { Name = "Russian", Code = "ru" },
                    new Language { Name = "Japanese", Code = "ja" },
                    new Language { Name = "Chinese", Code = "zh" },
                    new Language { Name = "Korean", Code = "ko" }
                };

                context.Languages.AddRange(languages);
                context.SaveChanges();
            }
        }
    }
}

================
File: server/LinguaReadApi/LinguaReadApi.csproj
================
<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="BCrypt.Net-Next" Version="4.0.3" />
    <PackageReference Include="Microsoft.AspNetCore.Authentication.JwtBearer" Version="8.0.3" />
    <PackageReference Include="Microsoft.AspNetCore.OpenApi" Version="8.0.11" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="9.0.2">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="9.0.2">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Include="Npgsql" Version="9.0.3" />
    <PackageReference Include="Npgsql.EntityFrameworkCore.PostgreSQL" Version="9.0.4" />
    <PackageReference Include="Swashbuckle.AspNetCore" Version="6.6.2" />
    <PackageReference Include="System.IdentityModel.Tokens.Jwt" Version="8.6.0" />
  </ItemGroup>

</Project>

================
File: server/LinguaReadApi/LinguaReadApi.http
================
@LinguaReadApi_HostAddress = http://localhost:5088

GET {{LinguaReadApi_HostAddress}}/weatherforecast/
Accept: application/json

###

================
File: server/LinguaReadApi/Models/Book.cs
================
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace LinguaReadApi.Models
{
    public class Book
    {
        [Key]
        public int BookId { get; set; }
        
        [Required]
        [StringLength(200)]
        public string Title { get; set; } = string.Empty;
        
        [StringLength(1000)]
        public string Description { get; set; } = string.Empty;
        
        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
        
        // Last read part tracking
        public int? LastReadPartId { get; set; }
        
        // Reading statistics
        public int TotalWords { get; set; } = 0;
        public int KnownWords { get; set; } = 0;
        public int LearningWords { get; set; } = 0;
        public DateTime? LastReadAt { get; set; }
        public bool IsFinished { get; set; } = false;
        
        // Track which texts have been read
        [NotMapped] // Not stored directly in the database
        public List<int> ReadTextIds { get; set; } = new List<int>();
        
        // Foreign keys
        [ForeignKey("User")]
        public Guid UserId { get; set; }
        
        [ForeignKey("Language")]
        public int LanguageId { get; set; }
        
        [ForeignKey("LastReadText")]
        public int? LastReadTextId { get; set; }
        
        // Navigation properties
        public virtual User User { get; set; } = null!;
        public virtual Language Language { get; set; } = null!;
        public virtual Text LastReadText { get; set; } = null!;
        public virtual ICollection<Text> Texts { get; set; } = new List<Text>();
    }
}

================
File: server/LinguaReadApi/Models/Language.cs
================
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace LinguaReadApi.Models
{
    public class Language
    {
        [Key]
        public int LanguageId { get; set; }
        
        [Required]
        [StringLength(50)]
        public string Name { get; set; } = string.Empty;
        
        [Required]
        [StringLength(10)]
        public string Code { get; set; } = string.Empty;
        
        // Statistics tracking
        public int WordsRead { get; set; } = 0;
        
        // Navigation properties
        public virtual ICollection<Book> Books { get; set; } = new List<Book>();
        public virtual ICollection<Text> Texts { get; set; } = new List<Text>();
        public virtual ICollection<Word> Words { get; set; } = new List<Word>();
    }
}

================
File: server/LinguaReadApi/Models/Text.cs
================
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace LinguaReadApi.Models
{
    public class Text
    {
        [Key]
        public int TextId { get; set; }
        
        [Required]
        [StringLength(200)]
        public string Title { get; set; } = string.Empty;
        
        [Required]
        public string Content { get; set; } = string.Empty;
        
        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
        
        // Position within a book (if part of a book)
        public int? PartNumber { get; set; }
        
        // Foreign keys
        [ForeignKey("User")]
        public Guid UserId { get; set; }
        
        [ForeignKey("Language")]
        public int LanguageId { get; set; }
        
        // Optional Book relationship
        [ForeignKey("Book")]
        public int? BookId { get; set; }
        
        // Navigation properties
        public virtual User User { get; set; } = null!;
        public virtual Language Language { get; set; } = null!;
        public virtual Book Book { get; set; } = null!;
        public virtual ICollection<TextWord> TextWords { get; set; } = new List<TextWord>();
    }
}

================
File: server/LinguaReadApi/Models/User.cs
================
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace LinguaReadApi.Models
{
    public class User
    {
        [Key]
        public Guid UserId { get; set; }
        
        [Required]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;
        
        [Required]
        public string PasswordHash { get; set; } = string.Empty;
        
        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
        
        // Navigation properties
        public virtual ICollection<Text> Texts { get; set; } = new List<Text>();
        public virtual ICollection<Book> Books { get; set; } = new List<Book>();
        public virtual ICollection<Word> Words { get; set; } = new List<Word>();
    }
}

================
File: server/LinguaReadApi/Models/UserActivity.cs
================
using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace LinguaReadApi.Models
{
    public class UserActivity
    {
        [Key]
        public int ActivityId { get; set; }
        
        [Required]
        public Guid UserId { get; set; }
        
        [Required]
        public int LanguageId { get; set; }
        
        [Required]
        [StringLength(50)]
        public string ActivityType { get; set; } = string.Empty;
        
        [Required]
        public int WordCount { get; set; }
        
        [Required]
        public DateTime Timestamp { get; set; }
        
        // Navigation properties
        public virtual Language? Language { get; set; }
    }
}

================
File: server/LinguaReadApi/Models/Word.cs
================
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace LinguaReadApi.Models
{
    public class Word
    {
        [Key]
        public int WordId { get; set; }
        
        [Required]
        [StringLength(100)]
        public string Term { get; set; } = string.Empty;
        
        [Required]
        [Range(1, 5)]
        public int Status { get; set; } = 1; // 1: New/Learning, 5: Mastered
        
        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
        
        [ForeignKey("Language")]
        public int LanguageId { get; set; }
        
        [ForeignKey("User")]
        public Guid UserId { get; set; }
        
        // Navigation properties
        public virtual Language Language { get; set; } = null!;
        public virtual User User { get; set; } = null!;
        public virtual WordTranslation Translation { get; set; } = null!;
        public virtual ICollection<TextWord> TextWords { get; set; } = new List<TextWord>();
    }

    public class TextWord
    {
        [Key]
        public int TextWordId { get; set; }
        
        [ForeignKey("Text")]
        public int TextId { get; set; }
        
        [ForeignKey("Word")]
        public int WordId { get; set; }
        
        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
        
        // Navigation properties
        public virtual Text Text { get; set; } = null!;
        public virtual Word Word { get; set; } = null!;
    }
}

================
File: server/LinguaReadApi/Models/WordTranslation.cs
================
using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace LinguaReadApi.Models
{
    public class WordTranslation
    {
        [Key]
        [ForeignKey("Word")]
        public int WordId { get; set; }
        
        [Required]
        public string Translation { get; set; } = string.Empty;
        
        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
        public DateTime? UpdatedAt { get; set; }
        
        // Navigation property
        public virtual Word Word { get; set; } = null!;
    }
}

================
File: server/LinguaReadApi/package.json
================
{
  "dependencies": {
    "expo": "^49.0.23",
    "expo-cli": "^6.3.12"
  }
}

================
File: server/LinguaReadApi/Program.cs
================
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Microsoft.IdentityModel.Tokens;
using System;
using System.Text;
using LinguaReadApi.Data;
using Microsoft.OpenApi.Models;
using LinguaReadApi.Services;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddControllers();

// Configure DbContext with PostgreSQL
builder.Services.AddDbContext<AppDbContext>(options =>
    options.UseNpgsql(builder.Configuration.GetConnectionString("DefaultConnection")));

// Register HttpClient
builder.Services.AddHttpClient();

// Register DeepL Translation Service
builder.Services.AddScoped<ITranslationService, DeepLTranslationService>();

// Register Gemini Translation Service for sentences
builder.Services.AddScoped<ISentenceTranslationService, GeminiTranslationService>();

// Configure JWT Authentication
builder.Services.AddAuthentication(options =>
{
    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
})
.AddJwtBearer(options =>
{
    options.RequireHttpsMetadata = false;
    options.SaveToken = true;
    options.TokenValidationParameters = new TokenValidationParameters
    {
        ValidateIssuer = true,
        ValidateAudience = true,
        ValidateLifetime = true,
        ValidateIssuerSigningKey = true,
        ValidIssuer = builder.Configuration["Jwt:Issuer"],
        ValidAudience = builder.Configuration["Jwt:Audience"],
        IssuerSigningKey = new SymmetricSecurityKey(
            Encoding.UTF8.GetBytes(builder.Configuration["Jwt:Key"] ?? throw new InvalidOperationException("JWT Key is not configured"))
        )
    };

    options.Events = new JwtBearerEvents
    {
        OnMessageReceived = context =>
        {
            var token = context.Request.Headers["Authorization"].FirstOrDefault()?.Split(" ").Last();
            Console.WriteLine($"Raw Authorization header: {context.Request.Headers["Authorization"]}");
            Console.WriteLine($"Extracted token: {token}");
            return Task.CompletedTask;
        },
        OnAuthenticationFailed = context =>
        {
            Console.WriteLine($"Authentication failed: {context.Exception.GetType().Name} - {context.Exception.Message}");
            return Task.CompletedTask;
        },
        OnTokenValidated = context =>
        {
            Console.WriteLine("Token validated successfully");
            return Task.CompletedTask;
        }
    };
});

// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

// Configure CORS
builder.Services.AddCors(options =>
{
    options.AddPolicy("AllowClientApp", policy =>
    {
        policy.WithOrigins("http://localhost:3000", "http://localhost:19006")
              .AllowAnyMethod()
              .AllowAnyHeader()
              .AllowCredentials()
              .SetIsOriginAllowed(origin => true); // Allow any origin in development
    });
});

var app = builder.Build();

// Seed the database
using (var scope = app.Services.CreateScope())
{
    var services = scope.ServiceProvider;
    try
    {
        DbInitializer.Initialize(services);
    }
    catch (Exception ex)
    {
        var logger = services.GetRequiredService<ILogger<Program>>();
        logger.LogError(ex, "An error occurred while seeding the database.");
    }
}

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI(c =>
    {
        c.SwaggerEndpoint("/swagger/v1/swagger.json", "LinguaRead API V1");
    });
}

// IMPORTANT: Order matters for middleware
app.UseRouting();

// Apply CORS before authentication
app.UseCors("AllowClientApp");

app.UseAuthentication();
app.UseAuthorization();

// Only use HTTPS redirection in production
if (!app.Environment.IsDevelopment())
{
    app.UseHttpsRedirection();
}

app.MapControllers();

// Configure Kestrel to use port 5000
app.Urls.Clear();
app.Urls.Add("http://localhost:5000");

app.Run();

================
File: server/LinguaReadApi/Properties/launchSettings.json
================
{
  "$schema": "http://json.schemastore.org/launchsettings.json",
  "iisSettings": {
    "windowsAuthentication": false,
    "anonymousAuthentication": true,
    "iisExpress": {
      "applicationUrl": "http://localhost:34813",
      "sslPort": 44358
    }
  },
  "profiles": {
    "http": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": true,
      "launchUrl": "swagger",
      "applicationUrl": "http://localhost:5000",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    },
    "https": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": true,
      "launchUrl": "swagger",
      "applicationUrl": "https://localhost:7015;http://localhost:5000",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    },
    "IIS Express": {
      "commandName": "IISExpress",
      "launchBrowser": true,
      "launchUrl": "swagger",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    }
  }
}

================
File: server/LinguaReadApi/Services/GeminiTranslationService.cs
================
using System;
using System.Net.Http;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;

namespace LinguaReadApi.Services
{
    public interface ISentenceTranslationService
    {
        Task<string> TranslateSentenceAsync(string text, string sourceLanguage, string targetLanguage);
    }

    public class GeminiTranslationService : ISentenceTranslationService
    {
        private readonly HttpClient _httpClient;
        private readonly string _apiKey;
        private readonly string _baseUrl;
        private readonly ILogger<GeminiTranslationService> _logger;

        public GeminiTranslationService(IConfiguration configuration, ILogger<GeminiTranslationService> logger)
        {
            _httpClient = new HttpClient();
            _apiKey = configuration["Gemini:ApiKey"] ?? throw new ArgumentNullException("Gemini:ApiKey is missing in configuration");
            _baseUrl = configuration["Gemini:BaseUrl"] ?? "https://generativelanguage.googleapis.com/v1beta";
            _logger = logger;
            
            _logger.LogInformation("GeminiTranslationService initialized");
            _logger.LogDebug($"Using base URL: {_baseUrl}");
        }

        public async Task<string> TranslateSentenceAsync(string text, string sourceLanguage, string targetLanguage)
        {
            if (string.IsNullOrWhiteSpace(text))
            {
                _logger.LogWarning("Empty text provided for translation");
                return string.Empty;
            }

            try
            {
                _logger.LogInformation($"Translating text ({text.Length} chars) from {sourceLanguage} to {targetLanguage}");
                
                // Prepare a clear prompt specifically for translation
                string prompt = $"Translate the following text from {sourceLanguage} to {targetLanguage}. Maintain all formatting, punctuation, and special characters. Return ONLY the translated text with no additional text.\n\nText to translate: {text}";

                // Create request payload according to Gemini API specs
                var requestPayload = new GeminiRequest
                {
                    Contents = new[]
                    {
                        new Content
                        {
                            Parts = new[]
                            {
                                new Part { Text = prompt }
                            }
                        }
                    },
                    GenerationConfig = new GenerationConfig
                    {
                        Temperature = 0.1,
                        TopK = 32,
                        TopP = 1.0,
                        MaxOutputTokens = 8192,
                        ResponseMimeType = "text/plain"
                    }
                };

                // Serialize with proper casing
                var options = new JsonSerializerOptions
                {
                    PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
                    WriteIndented = false
                };
                
                string jsonPayload = JsonSerializer.Serialize(requestPayload, options);
                _logger.LogDebug($"Request payload: {jsonPayload}");

                // Create the request
                var endpoint = $"{_baseUrl}/models/gemini-2.0-flash:generateContent?key={_apiKey}";
                var content = new StringContent(jsonPayload, Encoding.UTF8, "application/json");
                
                // Send the request
                var response = await _httpClient.PostAsync(endpoint, content);
                var responseContent = await response.Content.ReadAsStringAsync();
                
                // Check if the request was successful
                if (!response.IsSuccessStatusCode)
                {
                    _logger.LogError($"Gemini API error: {response.StatusCode}, {responseContent}");
                    return $"Translation error: {response.StatusCode}";
                }

                _logger.LogDebug($"Gemini API response: {responseContent}");
                
                // Parse using proper models
                var geminiResponse = JsonSerializer.Deserialize<GeminiResponse>(responseContent, options);
                
                if (geminiResponse?.Candidates != null && 
                    geminiResponse.Candidates.Length > 0 && 
                    geminiResponse.Candidates[0].Content?.Parts != null &&
                    geminiResponse.Candidates[0].Content.Parts.Length > 0)
                {
                    var translatedText = geminiResponse.Candidates[0].Content.Parts[0].Text;
                    _logger.LogInformation($"Translation successful, length: {translatedText?.Length ?? 0}");
                    return translatedText ?? string.Empty;
                }
                
                _logger.LogWarning("Could not extract translation from response");
                return "Translation failed: Could not extract result";
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error during translation");
                return $"Translation error: {ex.Message}";
            }
        }
    }

    // Response and request models following Gemini API specs
    public class GeminiRequest
    {
        [JsonPropertyName("contents")]
        public Content[] Contents { get; set; }

        [JsonPropertyName("generationConfig")]
        public GenerationConfig GenerationConfig { get; set; }
    }

    public class GenerationConfig
    {
        [JsonPropertyName("temperature")]
        public double Temperature { get; set; }

        [JsonPropertyName("topK")]
        public int TopK { get; set; }

        [JsonPropertyName("topP")]
        public double TopP { get; set; }

        [JsonPropertyName("maxOutputTokens")]
        public int MaxOutputTokens { get; set; }
        
        [JsonPropertyName("responseMimeType")]
        public string ResponseMimeType { get; set; }
    }

    public class Content
    {
        [JsonPropertyName("parts")]
        public Part[] Parts { get; set; }
    }

    public class Part
    {
        [JsonPropertyName("text")]
        public string Text { get; set; }
    }

    public class GeminiResponse
    {
        [JsonPropertyName("candidates")]
        public Candidate[] Candidates { get; set; }
    }

    public class Candidate
    {
        [JsonPropertyName("content")]
        public Content Content { get; set; }
    }
}

================
File: server/LinguaReadApi/Services/TranslationService.cs
================
using System;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using System.Text.Json;
using Microsoft.Extensions.Configuration;
using System.Collections.Generic;

namespace LinguaReadApi.Services
{
    public interface ITranslationService
    {
        Task<string> TranslateTextAsync(string text, string sourceLanguage, string targetLanguage);
    }

    public class DeepLTranslationService : ITranslationService
    {
        private readonly HttpClient _httpClient;
        private readonly string _apiKey;
        private readonly string _baseUrl;

        public DeepLTranslationService(IConfiguration configuration, HttpClient httpClient)
        {
            _httpClient = httpClient;
            _apiKey = configuration["DeepL:ApiKey"];
            _baseUrl = configuration["DeepL:BaseUrl"];

            if (string.IsNullOrEmpty(_apiKey))
                throw new ArgumentException("DeepL API key is missing in configuration");

            if (string.IsNullOrEmpty(_baseUrl))
                throw new ArgumentException("DeepL base URL is missing in configuration");
        }

        public async Task<string> TranslateTextAsync(string text, string sourceLanguage, string targetLanguage)
        {
            if (string.IsNullOrEmpty(text))
                return string.Empty;

            // Map language codes to DeepL format if needed
            sourceLanguage = MapLanguageCodeToDeepL(sourceLanguage);
            targetLanguage = MapLanguageCodeToDeepL(targetLanguage);

            var requestData = new
            {
                text = new[] { text },
                source_lang = sourceLanguage,
                target_lang = targetLanguage
            };

            var content = new StringContent(
                JsonSerializer.Serialize(requestData),
                Encoding.UTF8,
                "application/json");

            var request = new HttpRequestMessage(HttpMethod.Post, $"{_baseUrl}/translate")
            {
                Content = content
            };

            request.Headers.Add("Authorization", $"DeepL-Auth-Key {_apiKey}");

            var response = await _httpClient.SendAsync(request);
            response.EnsureSuccessStatusCode();

            var responseBody = await response.Content.ReadAsStringAsync();
            var translationResponse = JsonSerializer.Deserialize<DeepLResponse>(responseBody);

            if (translationResponse?.translations == null || translationResponse.translations.Length == 0)
                return string.Empty;

            return translationResponse.translations[0].text;
        }

        private string MapLanguageCodeToDeepL(string languageCode)
        {
            // DeepL uses different language codes than ISO
            return languageCode.ToUpper() switch
            {
                "EN" => "EN",
                "FR" => "FR",
                "DE" => "DE",
                "ES" => "ES",
                "IT" => "IT",
                "NL" => "NL",
                "PL" => "PL",
                "PT" => "PT",
                "RU" => "RU",
                "ZH" => "ZH",
                "JA" => "JA",
                _ => languageCode.ToUpper()
            };
        }

        private class DeepLResponse
        {
            public Translation[] translations { get; set; }

            public class Translation
            {
                public string text { get; set; }
                public string detected_source_language { get; set; }
            }
        }
    }
}

================
File: server/LinguaReadApi/Utilities/WordCountUtility.cs
================
using System;
using System.Collections.Generic;
using System.Linq;
using LinguaReadApi.Models;

namespace LinguaReadApi.Utilities
{
    public static class WordCountUtility
    {
        /// <summary>
        /// Counts the total number of words in a text by splitting on whitespace
        /// </summary>
        /// <param name="text">The text to count words in</param>
        /// <returns>The total word count</returns>
        public static int CountTotalWords(string text)
        {
            if (string.IsNullOrWhiteSpace(text))
                return 0;
                
            return text.Split(new[] { ' ', '\t', '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries).Length;
        }
        
        /// <summary>
        /// Updates the words read count for a language
        /// </summary>
        /// <param name="language">The language to update</param>
        /// <param name="wordCount">The number of words to add</param>
        public static void UpdateLanguageWordCount(Language language, int wordCount)
        {
            if (language == null)
                throw new ArgumentNullException(nameof(language));
                
            language.WordsRead += wordCount;
            
            // NOTE: After calling this method, you must explicitly mark the language entity
            // as modified in your DbContext by using:
            // _context.Entry(language).State = EntityState.Modified;
        }
        
        /// <summary>
        /// Counts the total number of words across multiple texts
        /// </summary>
        /// <param name="texts">The collection of texts</param>
        /// <returns>The total word count across all texts</returns>
        public static int CountWordsInTexts(IEnumerable<Text> texts)
        {
            if (texts == null)
                return 0;
                
            return texts.Sum(text => CountTotalWords(text.Content));
        }
        
        /// <summary>
        /// Gets distinct words from a text content
        /// </summary>
        /// <param name="content">The text content</param>
        /// <returns>A HashSet of distinct words</returns>
        public static HashSet<string> GetDistinctWords(string content)
        {
            if (string.IsNullOrWhiteSpace(content))
                return new HashSet<string>();
                
            var words = content.Split(new[] { ' ', '\t', '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries)
                .Select(word => word.Trim().ToLower());
                
            return new HashSet<string>(words);
        }
    }
}



================================================================
End of Codebase
================================================================
