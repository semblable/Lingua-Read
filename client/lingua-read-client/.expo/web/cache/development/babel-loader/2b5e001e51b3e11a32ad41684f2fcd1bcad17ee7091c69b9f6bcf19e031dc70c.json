{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kamil\\\\Dropbox\\\\Lingua_Read\\\\client\\\\lingua-read-client\\\\src\\\\pages\\\\TextDisplay.js\";\nimport React, { useEffect, useState, useCallback, useRef } from 'react';\nimport { Container, Card, Spinner, Alert, Button, Modal, Form, Row, Col, Badge, ProgressBar } from 'react-bootstrap';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { getText, createWord, updateWord, updateLastRead, completeLesson, getBook, translateText, translateSentence, translateFullText } from '../utils/api';\nimport TranslationPopup from '../components/TranslationPopup';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst styles = {\n  highlightedWord: {\n    cursor: 'pointer',\n    padding: '0 2px',\n    margin: '0 1px',\n    borderRadius: '3px'\n  },\n  wordStatus0: {\n    color: '#000',\n    backgroundColor: 'transparent'\n  },\n  wordStatus1: {\n    color: '#fff',\n    backgroundColor: '#ff6666'\n  },\n  wordStatus2: {\n    color: '#333',\n    backgroundColor: '#ff9933'\n  },\n  wordStatus3: {\n    color: '#333',\n    backgroundColor: '#ffdd66'\n  },\n  wordStatus4: {\n    color: '#333',\n    backgroundColor: '#99dd66'\n  },\n  wordStatus5: {\n    color: '#333',\n    backgroundColor: '#66cc66'\n  },\n  untrackedWord: {\n    cursor: 'pointer',\n    color: '#007bff',\n    textDecoration: 'underline'\n  },\n  textContainer: {\n    height: 'calc(100vh - 120px)',\n    overflowY: 'auto',\n    padding: '15px',\n    borderRight: '1px solid #eee'\n  },\n  translationPanel: {\n    height: 'calc(100vh - 120px)',\n    padding: '15px'\n  },\n  wordPanel: {\n    marginTop: '20px',\n    padding: '15px',\n    backgroundColor: '#f8f9fa',\n    borderRadius: '8px'\n  },\n  modalHeader: {\n    backgroundColor: '#f8f9fa',\n    borderBottom: '1px solid #dee2e6'\n  }\n};\nconst TextDisplay = () => {\n  const {\n    textId\n  } = useParams();\n  const navigate = useNavigate();\n  const textContentRef = useRef(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [text, setText] = useState(null);\n  const [book, setBook] = useState(null);\n  const [words, setWords] = useState([]);\n  const [selectedWord, setSelectedWord] = useState('');\n  const [translation, setTranslation] = useState('');\n  const [isTranslating, setIsTranslating] = useState(false);\n  const [processingWord, setProcessingWord] = useState(false);\n  const [displayedWord, setDisplayedWord] = useState(null);\n  const [saveSuccess, setSaveSuccess] = useState(false);\n  const [completing, setCompleting] = useState(false);\n  const [stats, setStats] = useState(null);\n  const [showStatsModal, setShowStatsModal] = useState(false);\n  const [nextTextId, setNextTextId] = useState(null);\n  const [selectedSentence, setSelectedSentence] = useState('');\n  const [sentenceTranslation, setSentenceTranslation] = useState('');\n  const [isSentenceTranslating, setIsSentenceTranslating] = useState(false);\n  const [showTranslationPopup, setShowTranslationPopup] = useState(false);\n  const [fullTextTranslation, setFullTextTranslation] = useState('');\n  const [isFullTextTranslating, setIsFullTextTranslating] = useState(false);\n  useEffect(() => {\n    const fetchText = async () => {\n      setLoading(true);\n      try {\n        const data = await getText(textId);\n        setText(data);\n        setBook(data.book);\n        setWords(data.words || []);\n        if (data.languageId) {\n          await fetchAllLanguageWords(data.languageId);\n        }\n        if (data.bookId) {\n          try {\n            await updateLastRead(data.bookId, data.textId);\n            const bookData = await getBook(data.bookId);\n            if (bookData && bookData.parts) {\n              const currentPartIndex = bookData.parts.findIndex(part => part.textId === parseInt(textId));\n              if (currentPartIndex >= 0 && currentPartIndex < bookData.parts.length - 1) {\n                setNextTextId(bookData.parts[currentPartIndex + 1].textId);\n              }\n            }\n          } catch (err) {\n            console.error('Failed to update last read position:', err);\n          }\n        }\n      } catch (err) {\n        setError(err.message || 'Failed to load text');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchText();\n    return () => {\n      setText(null);\n      setWords([]);\n      setError('');\n      setNextTextId(null);\n    };\n  }, [textId]);\n  const fetchAllLanguageWords = async languageId => {\n    try {\n      const response = await fetch(`http://localhost:5000/api/words/language/${languageId}`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n          'Accept': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch language words');\n      }\n      const allLanguageWords = await response.json();\n      setWords(prevWords => {\n        const existingWordIds = new Set(prevWords.map(w => w.wordId));\n        const newWords = allLanguageWords.filter(w => !existingWordIds.has(w.wordId));\n        return [...prevWords, ...newWords];\n      });\n    } catch (error) {\n      console.error('Error fetching language words:', error);\n    }\n  };\n  const handleWordClick = async word => {\n    console.log(`Word clicked: \"${word}\"`);\n    console.log(`Character codes: ${Array.from(word).map(c => c.charCodeAt(0))}`);\n    setSelectedWord(word);\n    const wordLower = word.toLowerCase();\n    const existingWord = words.find(w => w.term && w.term.toLowerCase() === wordLower);\n    if (existingWord) {\n      console.log(`Word exists in database: ${existingWord.term}, translation: ${existingWord.translation || 'none'}`);\n      setTranslation(existingWord.translation || '');\n      setDisplayedWord({\n        term: existingWord.term,\n        translation: existingWord.translation || '',\n        status: existingWord.status\n      });\n      if (!existingWord.translation) {\n        try {\n          const bookLanguage = book?.language?.code || 'FR';\n          const userLanguage = 'EN';\n          console.log(`Attempting to translate existing word: ${word} from ${bookLanguage} to ${userLanguage}`);\n          setIsTranslating(true);\n          const result = await translateText(word, bookLanguage, userLanguage);\n          console.log('Translation result:', result);\n          if (result?.translatedText) {\n            console.log(`Translation successful: \"${result.translatedText}\"`);\n            setTranslation(result.translatedText);\n            setDisplayedWord(prev => Object.assign({}, prev, {\n              translation: result.translatedText\n            }));\n          } else {\n            console.log('Translation returned empty or undefined result');\n          }\n        } catch (err) {\n          console.error('Translation failed:', err);\n        } finally {\n          setIsTranslating(false);\n        }\n      }\n    } else {\n      console.log(`Word not found in database: ${word}`);\n      setTranslation('');\n      setDisplayedWord({\n        term: word,\n        translation: '',\n        status: 0\n      });\n      try {\n        const bookLanguage = book?.language?.code || 'FR';\n        const userLanguage = 'EN';\n        console.log(`Attempting to translate new word: ${word} from ${bookLanguage} to ${userLanguage}`);\n        setIsTranslating(true);\n        const result = await translateText(word, bookLanguage, userLanguage);\n        console.log('Translation result:', result);\n        if (result?.translatedText) {\n          console.log(`Translation successful: \"${result.translatedText}\"`);\n          setTranslation(result.translatedText);\n          setDisplayedWord(prev => Object.assign({}, prev, {\n            translation: result.translatedText\n          }));\n        } else {\n          console.log('Translation returned empty or undefined result');\n        }\n      } catch (err) {\n        console.error('Translation failed:', err);\n      } finally {\n        setIsTranslating(false);\n      }\n    }\n  };\n  const handleSaveWord = async status => {\n    if (!selectedWord || processingWord || isTranslating) return;\n    setSaveSuccess(false);\n    setProcessingWord(true);\n    try {\n      const numericStatus = parseInt(status, 10);\n      if (isNaN(numericStatus) || numericStatus < 1 || numericStatus > 5) {\n        throw new Error(`Invalid status: ${status}. Must be a number between 1-5.`);\n      }\n      const normalizedWord = selectedWord.normalize('NFC').toLowerCase();\n      const existingWord = words.find(w => w.term && w.term.normalize('NFC').toLowerCase() === normalizedWord);\n      if (existingWord) {\n        const updatedWord = await updateWord(existingWord.wordId, numericStatus, translation);\n        setWords(prevWords => prevWords.map(word => word.wordId === existingWord.wordId ? Object.assign({}, word, {\n          status: numericStatus,\n          translation\n        }) : word));\n        setDisplayedWord({\n          term: existingWord.term,\n          translation: translation,\n          status: numericStatus\n        });\n      } else {\n        const newWord = await createWord(textId, selectedWord, numericStatus, translation);\n        setWords(prevWords => [...prevWords, newWord]);\n        setDisplayedWord({\n          term: selectedWord,\n          translation: translation,\n          status: numericStatus\n        });\n      }\n      setSaveSuccess(true);\n      setTimeout(() => setSaveSuccess(false), 2000);\n    } catch (error) {\n      console.error('Error saving word:', error);\n      alert(`Failed to save word: ${error.message}`);\n    } finally {\n      setProcessingWord(false);\n    }\n  };\n  const handleSentenceSelection = () => {\n    console.log(\"Mouse up event detected\");\n    const selection = window.getSelection();\n    if (selection.isCollapsed) {\n      console.log(\"Selection is empty or collapsed\");\n      return;\n    }\n    let selectedText = selection.toString();\n    console.log(`Raw selected text: \"${selectedText}\"`);\n    console.log(`Character codes: ${Array.from(selectedText).map(c => c.charCodeAt(0))}`);\n    if (selectedText.length > 0) {\n      setSelectedSentence(selectedText);\n      if (selectedText.length >= 1) {\n        setShowTranslationPopup(true);\n        setIsFullTextTranslating(true);\n        setFullTextTranslation('');\n        translateSelectedTextInPopup(selectedText);\n      }\n    }\n  };\n  const translateSelectedTextInPopup = async selectedText => {\n    if (!selectedText) {\n      console.error(\"Missing text for translation\");\n      return;\n    }\n    const sourceLanguageCode = text?.languageCode || 'auto';\n    console.log(`Attempting to translate selected text from ${sourceLanguageCode} to en`);\n    console.log(`Text to translate: \"${selectedText}\"`);\n    try {\n      const response = await translateFullText(selectedText, sourceLanguageCode, 'en');\n      console.log('Translation response:', response);\n      if (response && response.translatedText) {\n        setFullTextTranslation(response.translatedText);\n        console.log(`Translation result: \"${response.translatedText}\"`);\n      } else {\n        console.error('Translation response missing translatedText:', response);\n        setFullTextTranslation('Translation failed: Invalid response');\n      }\n    } catch (error) {\n      console.error('Error translating text:', error);\n      setFullTextTranslation(`Translation failed: ${error.message || 'Unknown error'}`);\n    } finally {\n      setIsFullTextTranslating(false);\n    }\n  };\n  const handleFullTextTranslation = async () => {\n    if (!text || !text.content) {\n      console.error(\"No text content available for translation\");\n      return;\n    }\n    const sourceLanguageCode = text.languageCode || 'auto';\n    console.log(`Initiating full text translation from ${sourceLanguageCode} to en`);\n    console.log(`Text content length: ${text.content.length} characters`);\n    setShowTranslationPopup(true);\n    setIsFullTextTranslating(true);\n    setFullTextTranslation('');\n    try {\n      console.log(`Sending text for translation: \"${text.content.substring(0, 100)}...\"`);\n      const response = await translateFullText(text.content, sourceLanguageCode, 'en');\n      console.log('Full text translation response:', response);\n      if (response && response.translatedText) {\n        setFullTextTranslation(response.translatedText);\n        console.log(`Full translation received, length: ${response.translatedText.length} characters`);\n      } else {\n        console.error('Translation response missing translatedText:', response);\n        setFullTextTranslation('Translation failed: Invalid response');\n      }\n    } catch (error) {\n      console.error('Error translating full text:', error);\n      setFullTextTranslation(`Translation failed: ${error.message || 'Unknown error'}`);\n    } finally {\n      setIsFullTextTranslating(false);\n    }\n  };\n  const handleManualTranslation = () => {\n    if (selectedSentence && selectedSentence.length > 0) {\n      console.log(`Manually translating selected text: \"${selectedSentence}\"`);\n      setShowTranslationPopup(true);\n      setIsFullTextTranslating(true);\n      setFullTextTranslation('');\n      translateSelectedTextInPopup(selectedSentence);\n    } else {\n      console.log(\"No text selected for manual translation\");\n    }\n  };\n  useEffect(() => {\n    console.log(\"Setting up text selection event listener\");\n    const handleMouseUp = event => {\n      setTimeout(() => {\n        const selected = window.getSelection().toString();\n        if (selected && selected.length > 0) {\n          console.log(`Selection detected: \"${selected}\" (${selected.length} chars)`);\n          handleSentenceSelection();\n        }\n      }, 100);\n    };\n    document.addEventListener('mouseup', handleMouseUp);\n    return () => {\n      console.log(\"Removing text selection event listener\");\n      document.removeEventListener('mouseup', handleMouseUp);\n    };\n  }, [text]);\n  const renderTextContent = () => {\n    if (!text || !text.content) return null;\n    const processTextContent = content => {\n      const words = content.split(/([^\\p{L}''\\-]+)/gu);\n      console.log('Split words:', words);\n      return words.map((segment, index) => {\n        const trimmed = segment.trim();\n        if (trimmed.length === 0) {\n          return segment;\n        }\n        if (/[\\p{L}''\\-]/u.test(segment)) {\n          const wordOnly = segment;\n          if (wordOnly.length <= 1 && !/[\\p{L}]/u.test(wordOnly)) {\n            return segment;\n          }\n          const wordStatus = getWordStatus(wordOnly);\n          return _jsxDEV(\"span\", {\n            style: getWordStyle(wordStatus),\n            className: \"clickable-word\",\n            onClick: () => {\n              console.log(`Clicked on word: \"${wordOnly}\" (${Array.from(wordOnly).map(c => c.charCodeAt(0))})`);\n              handleWordClick(wordOnly);\n            },\n            children: segment\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 506,\n            columnNumber: 13\n          }, this);\n        }\n        return segment;\n      });\n    };\n    return _jsxDEV(\"div\", {\n      children: _jsxDEV(\"div\", {\n        ref: textContentRef,\n        className: \"text-content\",\n        style: {\n          fontSize: '1.1rem',\n          lineHeight: '1.6',\n          marginBottom: '70px'\n        },\n        children: processTextContent(text.content)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 527,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 526,\n      columnNumber: 7\n    }, this);\n  };\n  const renderSentenceTranslationPanel = () => {\n    if (!selectedSentence) {\n      return null;\n    }\n    return _jsxDEV(\"div\", {\n      className: \"mt-4 p-3 border rounded\",\n      children: [_jsxDEV(\"h5\", {\n        children: \"Selected Text:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 546,\n        columnNumber: 9\n      }, this), _jsxDEV(\"p\", {\n        children: selectedSentence\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 547,\n        columnNumber: 9\n      }, this), _jsxDEV(\"h5\", {\n        className: \"mt-3\",\n        children: \"Translation:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 549,\n        columnNumber: 9\n      }, this), isSentenceTranslating ? _jsxDEV(\"div\", {\n        className: \"d-flex align-items-center\",\n        children: [_jsxDEV(Spinner, {\n          animation: \"border\",\n          size: \"sm\",\n          className: \"me-2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 552,\n          columnNumber: 13\n        }, this), _jsxDEV(\"span\", {\n          children: \"Translating...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 553,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 551,\n        columnNumber: 11\n      }, this) : _jsxDEV(\"p\", {\n        children: sentenceTranslation || 'No translation available'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 556,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 545,\n      columnNumber: 7\n    }, this);\n  };\n  const renderSidePanel = () => {\n    if (!displayedWord) {\n      return _jsxDEV(\"p\", {\n        children: \"Click on a word in the text to see its information here.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 565,\n        columnNumber: 14\n      }, this);\n    }\n    return _jsxDEV(\"div\", {\n      children: [_jsxDEV(\"h3\", {\n        children: displayedWord.term\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 570,\n        columnNumber: 9\n      }, this), saveSuccess && _jsxDEV(Alert, {\n        variant: \"success\",\n        className: \"mt-2 mb-3\",\n        children: \"Word saved successfully!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 573,\n        columnNumber: 11\n      }, this), displayedWord.status > 0 ? _jsxDEV(\"div\", {\n        className: \"mb-3\",\n        children: _jsxDEV(\"div\", {\n          className: \"p-2 rounded mb-2\",\n          style: {\n            backgroundColor: styles[`wordStatus${displayedWord.status}`]?.backgroundColor || '#f8f9fa',\n            color: styles[`wordStatus${displayedWord.status}`]?.color || '#333'\n          },\n          children: [\"Status: \", displayedWord.status === 1 ? 'New' : displayedWord.status === 2 ? 'Learning' : displayedWord.status === 3 ? 'Familiar' : displayedWord.status === 4 ? 'Advanced' : 'Known']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 580,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 579,\n        columnNumber: 11\n      }, this) : _jsxDEV(\"div\", {\n        className: \"mb-3\",\n        children: _jsxDEV(\"div\", {\n          className: \"p-2 rounded mb-2 bg-info text-white\",\n          children: \"Status: Not tracked yet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 597,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 596,\n        columnNumber: 11\n      }, this), _jsxDEV(Form, {\n        children: _jsxDEV(Form.Group, {\n          className: \"mb-3\",\n          children: [_jsxDEV(Form.Label, {\n            children: \"Translation\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 605,\n            columnNumber: 13\n          }, this), _jsxDEV(\"div\", {\n            className: \"position-relative\",\n            children: [_jsxDEV(Form.Control, {\n              as: \"textarea\",\n              rows: 3,\n              value: translation,\n              onChange: e => setTranslation(e.target.value),\n              placeholder: \"Enter translation or notes\",\n              disabled: isTranslating\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 607,\n              columnNumber: 15\n            }, this), isTranslating && _jsxDEV(\"div\", {\n              className: \"position-absolute top-50 end-0 translate-middle-y me-3\",\n              children: [_jsxDEV(Spinner, {\n                animation: \"border\",\n                size: \"sm\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 617,\n                columnNumber: 19\n              }, this), _jsxDEV(\"span\", {\n                className: \"ms-2\",\n                children: \"Translating...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 618,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 616,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 606,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 604,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 603,\n        columnNumber: 9\n      }, this), _jsxDEV(\"div\", {\n        className: \"d-flex flex-wrap gap-2 mt-3\",\n        children: [_jsxDEV(Button, {\n          variant: \"danger\",\n          onClick: () => handleSaveWord(1),\n          disabled: processingWord || isTranslating || !selectedWord,\n          style: {\n            backgroundColor: styles.wordStatus1.backgroundColor,\n            color: 'white'\n          },\n          children: processingWord ? 'Saving...' : 'New (1)'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 626,\n          columnNumber: 11\n        }, this), _jsxDEV(Button, {\n          variant: \"warning\",\n          onClick: () => handleSaveWord(2),\n          disabled: processingWord || isTranslating || !selectedWord,\n          style: {\n            backgroundColor: styles.wordStatus2.backgroundColor,\n            color: 'black'\n          },\n          children: processingWord ? 'Saving...' : 'Learning (2)'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 634,\n          columnNumber: 11\n        }, this), _jsxDEV(Button, {\n          variant: \"info\",\n          onClick: () => handleSaveWord(3),\n          disabled: processingWord || isTranslating || !selectedWord,\n          style: {\n            backgroundColor: styles.wordStatus3.backgroundColor,\n            color: 'black'\n          },\n          children: processingWord ? 'Saving...' : 'Familiar (3)'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 642,\n          columnNumber: 11\n        }, this), _jsxDEV(Button, {\n          variant: \"info\",\n          onClick: () => handleSaveWord(4),\n          disabled: processingWord || isTranslating || !selectedWord,\n          style: {\n            backgroundColor: styles.wordStatus4.backgroundColor,\n            color: 'black'\n          },\n          children: processingWord ? 'Saving...' : 'Advanced (4)'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 650,\n          columnNumber: 11\n        }, this), _jsxDEV(Button, {\n          variant: \"success\",\n          onClick: () => handleSaveWord(5),\n          disabled: processingWord || isTranslating || !selectedWord,\n          style: {\n            backgroundColor: styles.wordStatus5.backgroundColor,\n            color: 'black'\n          },\n          children: processingWord ? 'Saving...' : 'Known (5)'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 658,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 625,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 569,\n      columnNumber: 7\n    }, this);\n  };\n  const handleCompleteLesson = async () => {\n    if (!text?.bookId) return;\n    setCompleting(true);\n    try {\n      const bookStats = await completeLesson(text.bookId, text.textId);\n      setStats(bookStats);\n      setShowStatsModal(true);\n    } catch (error) {\n      console.error('Error completing lesson:', error);\n      alert(`Failed to complete lesson: ${error.message}`);\n    } finally {\n      setCompleting(false);\n    }\n  };\n  const getWordStyle = status => {\n    return styles[`wordStatus${status}`] || styles.wordStatus0;\n  };\n  const getWordStatus = word => {\n    if (!word) return 0;\n    const wordLower = word.toLowerCase();\n    const foundWord = words.find(w => w.term && w.term.toLowerCase() === wordLower);\n    return foundWord ? foundWord.status : 0;\n  };\n  if (loading) {\n    return _jsxDEV(Container, {\n      className: \"py-5 text-center\",\n      children: _jsxDEV(Spinner, {\n        animation: \"border\",\n        role: \"status\",\n        children: _jsxDEV(\"span\", {\n          className: \"visually-hidden\",\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 711,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 710,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 709,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return _jsxDEV(Container, {\n      className: \"py-5\",\n      children: _jsxDEV(Alert, {\n        variant: \"danger\",\n        children: [error, _jsxDEV(\"div\", {\n          className: \"mt-3\",\n          children: _jsxDEV(Button, {\n            variant: \"outline-primary\",\n            onClick: () => navigate('/texts'),\n            children: \"Back to Texts\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 723,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 722,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 720,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 719,\n      columnNumber: 7\n    }, this);\n  }\n  if (!text) {\n    return _jsxDEV(Container, {\n      className: \"py-5\",\n      children: _jsxDEV(Alert, {\n        variant: \"warning\",\n        children: [\"Text not found\", _jsxDEV(\"div\", {\n          className: \"mt-3\",\n          children: _jsxDEV(Button, {\n            variant: \"outline-primary\",\n            onClick: () => navigate('/texts'),\n            children: \"Back to Texts\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 738,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 737,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 735,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 734,\n      columnNumber: 7\n    }, this);\n  }\n  return _jsxDEV(Container, {\n    fluid: true,\n    className: \"py-3\",\n    children: [_jsxDEV(Card, {\n      className: \"shadow-sm mb-3\",\n      children: _jsxDEV(Card.Body, {\n        children: _jsxDEV(\"div\", {\n          className: \"d-flex justify-content-between align-items-start\",\n          children: [_jsxDEV(\"div\", {\n            children: [_jsxDEV(\"h2\", {\n              children: text.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 753,\n              columnNumber: 15\n            }, this), _jsxDEV(\"p\", {\n              className: \"text-muted\",\n              children: [\"Language: \", text.languageName || 'Unknown', \" | Words: \", words.length, \" | Learning: \", words.filter(w => w.status <= 2).length, \" | Known: \", words.filter(w => w.status >= 4).length]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 754,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 752,\n            columnNumber: 13\n          }, this), _jsxDEV(\"div\", {\n            className: \"d-flex gap-2\",\n            children: [text?.bookId && _jsxDEV(_Fragment, {\n              children: _jsxDEV(Button, {\n                variant: \"outline-primary\",\n                onClick: () => navigate(`/books/${text.bookId}`),\n                children: \"Back to Book\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 765,\n                columnNumber: 19\n              }, this)\n            }, void 0, false), !text?.bookId && _jsxDEV(Button, {\n              variant: \"outline-secondary\",\n              onClick: () => navigate('/texts'),\n              children: \"Back to Texts\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 776,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 761,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 751,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 750,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 749,\n      columnNumber: 7\n    }, this), _jsxDEV(Row, {\n      children: [_jsxDEV(Col, {\n        md: 7,\n        style: styles.textContainer,\n        children: _jsxDEV(\"div\", {\n          className: \"d-flex flex-column\",\n          style: {\n            minHeight: 'calc(100vh - 140px)'\n          },\n          children: [_jsxDEV(\"div\", {\n            className: \"flex-grow-1\",\n            children: renderTextContent()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 792,\n            columnNumber: 13\n          }, this), text?.bookId && _jsxDEV(\"div\", {\n            className: \"mt-3 mb-3 pt-2 border-top text-end\",\n            children: _jsxDEV(Button, {\n              variant: \"success\",\n              onClick: handleCompleteLesson,\n              disabled: completing,\n              size: \"sm\",\n              children: [completing ? _jsxDEV(Spinner, {\n                animation: \"border\",\n                size: \"sm\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 805,\n                columnNumber: 33\n              }, this) : null, ' ', \"Complete Lesson\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 799,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 798,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 791,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 790,\n        columnNumber: 9\n      }, this), _jsxDEV(Col, {\n        md: 5,\n        style: styles.translationPanel,\n        children: _jsxDEV(Card, {\n          children: _jsxDEV(Card.Body, {\n            children: [_jsxDEV(\"h4\", {\n              children: \"Word Information\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 818,\n              columnNumber: 15\n            }, this), renderSidePanel()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 817,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 816,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 815,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 788,\n      columnNumber: 7\n    }, this), _jsxDEV(Modal, {\n      show: showStatsModal,\n      onHide: () => setShowStatsModal(false),\n      centered: true,\n      children: [_jsxDEV(Modal.Header, {\n        closeButton: true,\n        children: _jsxDEV(Modal.Title, {\n          children: \"Lesson Completed!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 832,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 831,\n        columnNumber: 9\n      }, this), _jsxDEV(Modal.Body, {\n        children: stats && _jsxDEV(\"div\", {\n          className: \"text-center\",\n          children: [_jsxDEV(\"h5\", {\n            children: \"Book Progress\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 837,\n            columnNumber: 15\n          }, this), _jsxDEV(\"div\", {\n            className: \"mb-3\",\n            children: _jsxDEV(\"div\", {\n              className: \"mb-2\",\n              children: _jsxDEV(ProgressBar, {\n                now: stats.CompletionPercentage || stats.completionPercentage,\n                label: `${(stats.CompletionPercentage || stats.completionPercentage || 0).toFixed(2)}%`,\n                variant: (stats.CompletionPercentage || stats.completionPercentage) < 25 ? 'danger' : (stats.CompletionPercentage || stats.completionPercentage) < 50 ? 'warning' : (stats.CompletionPercentage || stats.completionPercentage) < 75 ? 'info' : 'success'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 840,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 839,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 838,\n            columnNumber: 15\n          }, this), _jsxDEV(Row, {\n            className: \"text-center mb-3\",\n            children: [_jsxDEV(Col, {\n              children: [_jsxDEV(\"h6\", {\n                children: \"Known Words\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 854,\n                columnNumber: 19\n              }, this), _jsxDEV(Badge, {\n                bg: \"success\",\n                className: \"p-2\",\n                children: stats.knownWords\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 855,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 853,\n              columnNumber: 17\n            }, this), _jsxDEV(Col, {\n              children: [_jsxDEV(\"h6\", {\n                children: \"Learning Words\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 858,\n                columnNumber: 19\n              }, this), _jsxDEV(Badge, {\n                bg: \"warning\",\n                className: \"p-2\",\n                children: stats.learningWords\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 859,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 857,\n              columnNumber: 17\n            }, this), _jsxDEV(Col, {\n              children: [_jsxDEV(\"h6\", {\n                children: \"Total Words\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 862,\n                columnNumber: 19\n              }, this), _jsxDEV(Badge, {\n                bg: \"info\",\n                className: \"p-2\",\n                children: stats.totalWords\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 863,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 861,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 852,\n            columnNumber: 15\n          }, this), _jsxDEV(\"p\", {\n            className: \"mt-3\",\n            children: \"Keep going! You're making great progress with your language learning.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 867,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 836,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 834,\n        columnNumber: 9\n      }, this), _jsxDEV(Modal.Footer, {\n        children: [_jsxDEV(Button, {\n          variant: \"secondary\",\n          onClick: () => setShowStatsModal(false),\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 874,\n          columnNumber: 11\n        }, this), nextTextId && _jsxDEV(Button, {\n          variant: \"success\",\n          onClick: () => {\n            setShowStatsModal(false);\n            navigate(`/texts/${nextTextId}`);\n          },\n          children: \"Next Lesson\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 878,\n          columnNumber: 13\n        }, this), text?.bookId && _jsxDEV(Button, {\n          variant: \"primary\",\n          onClick: () => navigate(`/books/${text.bookId}`),\n          children: \"Back to Book\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 889,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 873,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 826,\n      columnNumber: 7\n    }, this), text && !loading && _jsxDEV(\"div\", {\n      className: \"mb-3\",\n      children: _jsxDEV(Button, {\n        variant: \"info\",\n        onClick: handleFullTextTranslation,\n        \"data-testid\": \"translate-full-text-btn\",\n        children: \"Translate Full Text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 902,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 901,\n      columnNumber: 9\n    }, this), selectedSentence && _jsxDEV(\"div\", {\n      className: \"mb-3 mt-3\",\n      children: _jsxDEV(Button, {\n        variant: \"outline-primary\",\n        onClick: handleManualTranslation,\n        \"data-testid\": \"translate-selected-text-btn\",\n        children: [\"Translate Selected Text: \\\"\", selectedSentence.length > 20 ? selectedSentence.substring(0, 20) + '...' : selectedSentence, \"\\\"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 915,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 914,\n      columnNumber: 9\n    }, this), renderSentenceTranslationPanel(), _jsxDEV(TranslationPopup, {\n      show: showTranslationPopup,\n      handleClose: () => setShowTranslationPopup(false),\n      originalText: selectedSentence.length > 0 ? selectedSentence : text?.content || '',\n      translatedText: fullTextTranslation,\n      isTranslating: isFullTextTranslating,\n      sourceLanguage: text?.languageCode || '',\n      targetLanguage: \"en\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 929,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 748,\n    columnNumber: 5\n  }, this);\n};\nexport default TextDisplay;","map":{"version":3,"names":["React","useEffect","useState","useCallback","useRef","Container","Card","Spinner","Alert","Button","Modal","Form","Row","Col","Badge","ProgressBar","useParams","useNavigate","getText","createWord","updateWord","updateLastRead","completeLesson","getBook","translateText","translateSentence","translateFullText","TranslationPopup","jsxDEV","_jsxDEV","Fragment","_Fragment","styles","highlightedWord","cursor","padding","margin","borderRadius","wordStatus0","color","backgroundColor","wordStatus1","wordStatus2","wordStatus3","wordStatus4","wordStatus5","untrackedWord","textDecoration","textContainer","height","overflowY","borderRight","translationPanel","wordPanel","marginTop","modalHeader","borderBottom","TextDisplay","textId","navigate","textContentRef","loading","setLoading","error","setError","text","setText","book","setBook","words","setWords","selectedWord","setSelectedWord","translation","setTranslation","isTranslating","setIsTranslating","processingWord","setProcessingWord","displayedWord","setDisplayedWord","saveSuccess","setSaveSuccess","completing","setCompleting","stats","setStats","showStatsModal","setShowStatsModal","nextTextId","setNextTextId","selectedSentence","setSelectedSentence","sentenceTranslation","setSentenceTranslation","isSentenceTranslating","setIsSentenceTranslating","showTranslationPopup","setShowTranslationPopup","fullTextTranslation","setFullTextTranslation","isFullTextTranslating","setIsFullTextTranslating","fetchText","data","languageId","fetchAllLanguageWords","bookId","bookData","parts","currentPartIndex","findIndex","part","parseInt","length","err","console","message","response","fetch","headers","localStorage","getItem","ok","Error","allLanguageWords","json","prevWords","existingWordIds","Set","map","w","wordId","newWords","filter","has","handleWordClick","word","log","Array","from","c","charCodeAt","wordLower","toLowerCase","existingWord","find","term","status","bookLanguage","language","code","userLanguage","result","translatedText","prev","Object","assign","handleSaveWord","numericStatus","isNaN","normalizedWord","normalize","updatedWord","newWord","setTimeout","alert","handleSentenceSelection","selection","window","getSelection","isCollapsed","selectedText","toString","translateSelectedTextInPopup","sourceLanguageCode","languageCode","handleFullTextTranslation","content","substring","handleManualTranslation","handleMouseUp","event","selected","document","addEventListener","removeEventListener","renderTextContent","processTextContent","split","segment","index","trimmed","trim","test","wordOnly","wordStatus","getWordStatus","style","getWordStyle","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","fontSize","lineHeight","marginBottom","renderSentenceTranslationPanel","animation","size","renderSidePanel","variant","Group","Label","Control","as","rows","value","onChange","e","target","placeholder","disabled","handleCompleteLesson","bookStats","foundWord","role","fluid","Body","title","languageName","md","minHeight","show","onHide","centered","Header","closeButton","Title","now","CompletionPercentage","completionPercentage","label","toFixed","bg","knownWords","learningWords","totalWords","Footer","handleClose","originalText","sourceLanguage","targetLanguage"],"sources":["C:/Users/kamil/Dropbox/Lingua_Read/client/lingua-read-client/src/pages/TextDisplay.js"],"sourcesContent":["import React, { useEffect, useState, useCallback, useRef } from 'react';\nimport { Container, Card, Spinner, Alert, Button, Modal, Form, Row, Col, Badge, ProgressBar } from 'react-bootstrap';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { getText, createWord, updateWord, updateLastRead, completeLesson, getBook, translateText, translateSentence, translateFullText } from '../utils/api';\nimport TranslationPopup from '../components/TranslationPopup';\n\n// CSS for word highlighting\nconst styles = {\n  highlightedWord: {\n    cursor: 'pointer',\n    padding: '0 2px',\n    margin: '0 1px',\n    borderRadius: '3px',\n  },\n  wordStatus0: { color: '#000', backgroundColor: 'transparent' }, // Not tracked yet\n  wordStatus1: { color: '#fff', backgroundColor: '#ff6666' },     // New (red)\n  wordStatus2: { color: '#333', backgroundColor: '#ff9933' },     // Learning (orange)\n  wordStatus3: { color: '#333', backgroundColor: '#ffdd66' },     // Familiar (yellow)\n  wordStatus4: { color: '#333', backgroundColor: '#99dd66' },     // Advanced (light green)\n  wordStatus5: { color: '#333', backgroundColor: '#66cc66' },     // Known (green)\n  untrackedWord: {\n    cursor: 'pointer',\n    color: '#007bff',\n    textDecoration: 'underline',\n  },\n  textContainer: {\n    height: 'calc(100vh - 120px)',\n    overflowY: 'auto',\n    padding: '15px',\n    borderRight: '1px solid #eee'\n  },\n  translationPanel: {\n    height: 'calc(100vh - 120px)',\n    padding: '15px',\n  },\n  wordPanel: {\n    marginTop: '20px',\n    padding: '15px',\n    backgroundColor: '#f8f9fa',\n    borderRadius: '8px',\n  },\n  // Modal header styling\n  modalHeader: {\n    backgroundColor: '#f8f9fa',\n    borderBottom: '1px solid #dee2e6',\n  }\n};\n\nconst TextDisplay = () => {\n  const { textId } = useParams();\n  const navigate = useNavigate();\n  const textContentRef = useRef(null);\n  \n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [text, setText] = useState(null);\n  const [book, setBook] = useState(null);\n  const [words, setWords] = useState([]);\n  \n  // Word editing state\n  const [selectedWord, setSelectedWord] = useState('');\n  const [translation, setTranslation] = useState('');\n  const [isTranslating, setIsTranslating] = useState(false);\n  const [processingWord, setProcessingWord] = useState(false);\n  // State to track the currently displayed word in the side panel\n  const [displayedWord, setDisplayedWord] = useState(null);\n  \n  // Add success message state\n  const [saveSuccess, setSaveSuccess] = useState(false);\n  \n  // Add states for lesson completion\n  const [completing, setCompleting] = useState(false);\n  const [stats, setStats] = useState(null);\n  const [showStatsModal, setShowStatsModal] = useState(false);\n  const [nextTextId, setNextTextId] = useState(null);\n\n  // States for sentence translation\n  const [selectedSentence, setSelectedSentence] = useState('');\n  const [sentenceTranslation, setSentenceTranslation] = useState('');\n  const [isSentenceTranslating, setIsSentenceTranslating] = useState(false);\n  \n  // States for full text translation popup\n  const [showTranslationPopup, setShowTranslationPopup] = useState(false);\n  const [fullTextTranslation, setFullTextTranslation] = useState('');\n  const [isFullTextTranslating, setIsFullTextTranslating] = useState(false);\n\n  useEffect(() => {\n    const fetchText = async () => {\n      setLoading(true);\n      try {\n        const data = await getText(textId);\n        setText(data);\n        setBook(data.book);\n        \n        // Initialize with words from the text\n        setWords(data.words || []);\n        \n        // Now also fetch words for this language globally\n        if (data.languageId) {\n          await fetchAllLanguageWords(data.languageId);\n        }\n        \n        // Update last read position if this text is part of a book\n        if (data.bookId) {\n          try {\n            await updateLastRead(data.bookId, data.textId);\n            \n            // Find the next text in the book if there is one\n            const bookData = await getBook(data.bookId);\n            if (bookData && bookData.parts) {\n              const currentPartIndex = bookData.parts.findIndex(part => part.textId === parseInt(textId));\n              if (currentPartIndex >= 0 && currentPartIndex < bookData.parts.length - 1) {\n                // There is a next part\n                setNextTextId(bookData.parts[currentPartIndex + 1].textId);\n              }\n            }\n          } catch (err) {\n            console.error('Failed to update last read position:', err);\n            // Non-critical error, so don't display to user\n          }\n        }\n      } catch (err) {\n        setError(err.message || 'Failed to load text');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchText();\n    \n    // Clear state when component unmounts\n    return () => {\n      setText(null);\n      setWords([]);\n      setError('');\n      setNextTextId(null);\n    };\n  }, [textId]);\n  \n  // Fetch all words for the current language\n  const fetchAllLanguageWords = async (languageId) => {\n    try {\n      // Call a new API endpoint to get all words for a language\n      const response = await fetch(`http://localhost:5000/api/words/language/${languageId}`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n          'Accept': 'application/json'\n        }\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch language words');\n      }\n      \n      const allLanguageWords = await response.json();\n      \n      // Merge with existing words, avoiding duplicates\n      setWords(prevWords => {\n        const existingWordIds = new Set(prevWords.map(w => w.wordId));\n        const newWords = allLanguageWords.filter(w => !existingWordIds.has(w.wordId));\n        return [...prevWords, ...newWords];\n      });\n      \n    } catch (error) {\n      console.error('Error fetching language words:', error);\n      // Don't set error state here as it's not critical\n    }\n  };\n\n  const handleWordClick = async (word) => {\n    console.log(`Word clicked: \"${word}\"`);\n    console.log(`Character codes: ${Array.from(word).map(c => c.charCodeAt(0))}`);\n    setSelectedWord(word);\n    \n    // Find if the word exists in our words list - use direct comparison instead of normalization\n    // which can potentially modify special characters\n    const wordLower = word.toLowerCase();\n    const existingWord = words.find(w => \n      w.term && \n      w.term.toLowerCase() === wordLower\n    );\n    \n    if (existingWord) {\n      console.log(`Word exists in database: ${existingWord.term}, translation: ${existingWord.translation || 'none'}`);\n      // If word exists, set its translation in the form and side panel\n      setTranslation(existingWord.translation || '');\n      setDisplayedWord({\n        term: existingWord.term,\n        translation: existingWord.translation || '',\n        status: existingWord.status\n      });\n      \n      // If no translation exists for this word, try to translate it automatically\n      if (!existingWord.translation) {\n        try {\n          // Access the book's language code from the state\n          const bookLanguage = book?.language?.code || 'FR'; // Default to French if language code is not available\n          const userLanguage = 'EN'; // Default to English as target language\n          \n          console.log(`Attempting to translate existing word: ${word} from ${bookLanguage} to ${userLanguage}`);\n          setIsTranslating(true);\n          const result = await translateText(word, bookLanguage, userLanguage);\n          console.log('Translation result:', result);\n          \n          if (result?.translatedText) {\n            console.log(`Translation successful: \"${result.translatedText}\"`);\n            setTranslation(result.translatedText);\n            // Update the displayed word with translation\n            setDisplayedWord(prev => ({\n              ...prev,\n              translation: result.translatedText\n            }));\n          } else {\n            console.log('Translation returned empty or undefined result');\n          }\n        } catch (err) {\n          console.error('Translation failed:', err);\n          // Don't show error to user, just silently fail and let them input translation manually\n        } finally {\n          setIsTranslating(false);\n        }\n      }\n    } else {\n      console.log(`Word not found in database: ${word}`);\n      // For new words, clear translation field first\n      setTranslation('');\n      setDisplayedWord({\n        term: word,\n        translation: '',\n        status: 0 // Untracked\n      });\n      \n      // Try to translate the new word automatically\n      try {\n        // Access the book's language code from the state\n        const bookLanguage = book?.language?.code || 'FR'; // Default to French if language code is not available\n        const userLanguage = 'EN'; // Default to English as target language\n        \n        console.log(`Attempting to translate new word: ${word} from ${bookLanguage} to ${userLanguage}`);\n        setIsTranslating(true);\n        const result = await translateText(word, bookLanguage, userLanguage);\n        console.log('Translation result:', result);\n        \n        if (result?.translatedText) {\n          console.log(`Translation successful: \"${result.translatedText}\"`);\n          setTranslation(result.translatedText);\n          // Update the displayed word with translation\n          setDisplayedWord(prev => ({\n            ...prev,\n            translation: result.translatedText\n          }));\n        } else {\n          console.log('Translation returned empty or undefined result');\n        }\n      } catch (err) {\n        console.error('Translation failed:', err);\n        // Don't show error to user, just silently fail and let them input translation manually\n      } finally {\n        setIsTranslating(false);\n      }\n    }\n  };\n\n  const handleSaveWord = async (status) => {\n    if (!selectedWord || processingWord || isTranslating) return;\n    \n    setSaveSuccess(false); // Reset success message\n    setProcessingWord(true);\n    \n    try {\n      // Convert status to numeric value\n      const numericStatus = parseInt(status, 10);\n      \n      if (isNaN(numericStatus) || numericStatus < 1 || numericStatus > 5) {\n        throw new Error(`Invalid status: ${status}. Must be a number between 1-5.`);\n      }\n      \n      // Find if the word already exists in our words list - use normalization\n      const normalizedWord = selectedWord.normalize('NFC').toLowerCase();\n      const existingWord = words.find(w => \n        w.term && \n        w.term.normalize('NFC').toLowerCase() === normalizedWord\n      );\n      \n      if (existingWord) {\n        // Update existing word\n        const updatedWord = await updateWord(existingWord.wordId, numericStatus, translation);\n        \n        // Update the words list\n        setWords(prevWords => \n          prevWords.map(word => \n            word.wordId === existingWord.wordId \n              ? { ...word, status: numericStatus, translation } \n              : word\n          )\n        );\n        \n        // Update the displayed word in the side panel\n        setDisplayedWord({\n          term: existingWord.term,\n          translation: translation,\n          status: numericStatus\n        });\n      } else {\n        // Create new word\n        const newWord = await createWord(textId, selectedWord, numericStatus, translation);\n        \n        // Add the new word to the words list\n        setWords(prevWords => [...prevWords, newWord]);\n        \n        // Update the displayed word in the side panel\n        setDisplayedWord({\n          term: selectedWord,\n          translation: translation,\n          status: numericStatus\n        });\n      }\n      \n      // Show success message\n      setSaveSuccess(true);\n      \n      // Hide success message after 2 seconds\n      setTimeout(() => setSaveSuccess(false), 2000);\n      \n    } catch (error) {\n      console.error('Error saving word:', error);\n      alert(`Failed to save word: ${error.message}`);\n    } finally {\n      setProcessingWord(false);\n    }\n  };\n\n  // Add function to handle sentence selection\n  const handleSentenceSelection = () => {\n    console.log(\"Mouse up event detected\");\n    \n    // Get the current selection\n    const selection = window.getSelection();\n    \n    // Skip if the selection is empty or if it's a collapsed selection (just a cursor)\n    if (selection.isCollapsed) {\n      console.log(\"Selection is empty or collapsed\");\n      return;\n    }\n    \n    // Get the selected text with original formatting preserved\n    let selectedText = selection.toString();\n    \n    // Ensure we're getting the raw, unmodified text\n    console.log(`Raw selected text: \"${selectedText}\"`);\n    console.log(`Character codes: ${Array.from(selectedText).map(c => c.charCodeAt(0))}`);\n    \n    if (selectedText.length > 0) {\n      // Store the unmodified text\n      setSelectedSentence(selectedText);\n      \n      // Only proceed with translation if we have enough text\n      if (selectedText.length >= 1) {\n        // Show the translation popup\n        setShowTranslationPopup(true);\n        setIsFullTextTranslating(true);\n        setFullTextTranslation('');\n        \n        // Use the full text translation API with the selected text\n        translateSelectedTextInPopup(selectedText);\n      }\n    }\n  };\n\n  // Function to translate selected text in popup\n  const translateSelectedTextInPopup = async (selectedText) => {\n    if (!selectedText) {\n      console.error(\"Missing text for translation\");\n      return;\n    }\n    \n    const sourceLanguageCode = text?.languageCode || 'auto';\n    console.log(`Attempting to translate selected text from ${sourceLanguageCode} to en`);\n    console.log(`Text to translate: \"${selectedText}\"`);\n    \n    try {\n      // Use full text translation for consistent experience\n      const response = await translateFullText(selectedText, sourceLanguageCode, 'en');\n      console.log('Translation response:', response);\n      \n      if (response && response.translatedText) {\n        setFullTextTranslation(response.translatedText);\n        console.log(`Translation result: \"${response.translatedText}\"`);\n      } else {\n        console.error('Translation response missing translatedText:', response);\n        setFullTextTranslation('Translation failed: Invalid response');\n      }\n    } catch (error) {\n      console.error('Error translating text:', error);\n      setFullTextTranslation(`Translation failed: ${error.message || 'Unknown error'}`);\n    } finally {\n      setIsFullTextTranslating(false);\n    }\n  };\n\n  // Function to request full text translation\n  const handleFullTextTranslation = async () => {\n    if (!text || !text.content) {\n      console.error(\"No text content available for translation\");\n      return;\n    }\n    \n    const sourceLanguageCode = text.languageCode || 'auto';\n    console.log(`Initiating full text translation from ${sourceLanguageCode} to en`);\n    console.log(`Text content length: ${text.content.length} characters`);\n    \n    // Open popup first, then start translation\n    setShowTranslationPopup(true);\n    setIsFullTextTranslating(true);\n    setFullTextTranslation(''); // Clear any previous translation\n    \n    try {\n      console.log(`Sending text for translation: \"${text.content.substring(0, 100)}...\"`);\n      const response = await translateFullText(text.content, sourceLanguageCode, 'en');\n      console.log('Full text translation response:', response);\n      \n      if (response && response.translatedText) {\n        setFullTextTranslation(response.translatedText);\n        console.log(`Full translation received, length: ${response.translatedText.length} characters`);\n      } else {\n        console.error('Translation response missing translatedText:', response);\n        setFullTextTranslation('Translation failed: Invalid response');\n      }\n    } catch (error) {\n      console.error('Error translating full text:', error);\n      setFullTextTranslation(`Translation failed: ${error.message || 'Unknown error'}`);\n    } finally {\n      setIsFullTextTranslating(false);\n    }\n  };\n\n  // Add manual translation for selected text button in the UI\n  const handleManualTranslation = () => {\n    if (selectedSentence && selectedSentence.length > 0) {\n      console.log(`Manually translating selected text: \"${selectedSentence}\"`);\n      setShowTranslationPopup(true);\n      setIsFullTextTranslating(true);\n      setFullTextTranslation('');\n      translateSelectedTextInPopup(selectedSentence);\n    } else {\n      console.log(\"No text selected for manual translation\");\n    }\n  };\n\n  // Improved event listener setup\n  useEffect(() => {\n    console.log(\"Setting up text selection event listener\");\n    \n    // Function to handle text selection via mouseup event\n    const handleMouseUp = (event) => {\n      // Give a small delay to ensure selection is complete\n      setTimeout(() => {\n        const selected = window.getSelection().toString();\n        if (selected && selected.length > 0) {\n          console.log(`Selection detected: \"${selected}\" (${selected.length} chars)`);\n          handleSentenceSelection();\n        }\n      }, 100);\n    };\n    \n    // Add the event listener to the document\n    document.addEventListener('mouseup', handleMouseUp);\n    \n    // Cleanup\n    return () => {\n      console.log(\"Removing text selection event listener\");\n      document.removeEventListener('mouseup', handleMouseUp);\n    };\n  }, [text]); // Only re-attach when text changes\n\n  const renderTextContent = () => {\n    if (!text || !text.content) return null;\n    \n    // Process the content to create formatted text\n    const processTextContent = (content) => {\n      // Use Unicode-aware regex that includes all letters from any language\n      // This regex splits by spaces and punctuation except apostrophes and hyphens,\n      // but preserves all Unicode letter characters including accented letters\n      const words = content.split(/([^\\p{L}''\\-]+)/gu);\n      \n      console.log('Split words:', words);\n      \n      return words.map((segment, index) => {\n        const trimmed = segment.trim();\n        if (trimmed.length === 0) {\n          return segment; // Return spaces and punctuation as is\n        }\n        \n        // If this is a word (contains letters from any language, apostrophes or hyphens)\n        if (/[\\p{L}''\\-]/u.test(segment)) {\n          const wordOnly = segment;\n          \n          // Skip very short segments that don't contain at least one letter\n          if (wordOnly.length <= 1 && !/[\\p{L}]/u.test(wordOnly)) {\n            return segment;\n          }\n          \n          const wordStatus = getWordStatus(wordOnly);\n          \n          return (\n            <span\n              key={index}\n              style={getWordStyle(wordStatus)}\n              className=\"clickable-word\"\n              onClick={() => {\n                console.log(`Clicked on word: \"${wordOnly}\" (${Array.from(wordOnly).map(c => c.charCodeAt(0))})`);\n                handleWordClick(wordOnly);\n              }}\n            >\n              {segment}\n            </span>\n          );\n        }\n        \n        // Return non-word segments as is\n        return segment;\n      });\n    };\n    \n    return (\n      <div>\n        <div \n          ref={textContentRef}\n          className=\"text-content\" \n          style={{ fontSize: '1.1rem', lineHeight: '1.6', marginBottom: '70px' }}\n        >\n          {processTextContent(text.content)}\n        </div>\n      </div>\n    );\n  };\n\n  // Render the sentence translation panel\n  const renderSentenceTranslationPanel = () => {\n    if (!selectedSentence) {\n      return null;\n    }\n\n    return (\n      <div className=\"mt-4 p-3 border rounded\">\n        <h5>Selected Text:</h5>\n        <p>{selectedSentence}</p>\n        \n        <h5 className=\"mt-3\">Translation:</h5>\n        {isSentenceTranslating ? (\n          <div className=\"d-flex align-items-center\">\n            <Spinner animation=\"border\" size=\"sm\" className=\"me-2\" />\n            <span>Translating...</span>\n          </div>\n        ) : (\n          <p>{sentenceTranslation || 'No translation available'}</p>\n        )}\n      </div>\n    );\n  };\n\n  // Replacement for the previous modal content in the side panel\n  const renderSidePanel = () => {\n    if (!displayedWord) {\n      return <p>Click on a word in the text to see its information here.</p>;\n    }\n\n    return (\n      <div>\n        <h3>{displayedWord.term}</h3>\n        \n        {saveSuccess && (\n          <Alert variant=\"success\" className=\"mt-2 mb-3\">\n            Word saved successfully!\n          </Alert>\n        )}\n        \n        {displayedWord.status > 0 ? (\n          <div className=\"mb-3\">\n            <div \n              className=\"p-2 rounded mb-2\" \n              style={{\n                backgroundColor: styles[`wordStatus${displayedWord.status}`]?.backgroundColor || '#f8f9fa',\n                color: styles[`wordStatus${displayedWord.status}`]?.color || '#333',\n              }}\n            >\n              Status: {\n                displayedWord.status === 1 ? 'New' :\n                displayedWord.status === 2 ? 'Learning' :\n                displayedWord.status === 3 ? 'Familiar' :\n                displayedWord.status === 4 ? 'Advanced' : 'Known'\n              }\n            </div>\n          </div>\n        ) : (\n          <div className=\"mb-3\">\n            <div className=\"p-2 rounded mb-2 bg-info text-white\">\n              Status: Not tracked yet\n            </div>\n          </div>\n        )}\n        \n        <Form>\n          <Form.Group className=\"mb-3\">\n            <Form.Label>Translation</Form.Label>\n            <div className=\"position-relative\">\n              <Form.Control\n                as=\"textarea\"\n                rows={3}\n                value={translation}\n                onChange={(e) => setTranslation(e.target.value)}\n                placeholder=\"Enter translation or notes\"\n                disabled={isTranslating}\n              />\n              {isTranslating && (\n                <div className=\"position-absolute top-50 end-0 translate-middle-y me-3\">\n                  <Spinner animation=\"border\" size=\"sm\" />\n                  <span className=\"ms-2\">Translating...</span>\n                </div>\n              )}\n            </div>\n          </Form.Group>\n        </Form>\n        \n        <div className=\"d-flex flex-wrap gap-2 mt-3\">\n          <Button \n            variant=\"danger\" \n            onClick={() => handleSaveWord(1)}\n            disabled={processingWord || isTranslating || !selectedWord}\n            style={{ backgroundColor: styles.wordStatus1.backgroundColor, color: 'white' }}\n          >\n            {processingWord ? 'Saving...' : 'New (1)'}\n          </Button>\n          <Button \n            variant=\"warning\" \n            onClick={() => handleSaveWord(2)}\n            disabled={processingWord || isTranslating || !selectedWord}\n            style={{ backgroundColor: styles.wordStatus2.backgroundColor, color: 'black' }}\n          >\n            {processingWord ? 'Saving...' : 'Learning (2)'}\n          </Button>\n          <Button \n            variant=\"info\" \n            onClick={() => handleSaveWord(3)}\n            disabled={processingWord || isTranslating || !selectedWord}\n            style={{ backgroundColor: styles.wordStatus3.backgroundColor, color: 'black' }}\n          >\n            {processingWord ? 'Saving...' : 'Familiar (3)'}\n          </Button>\n          <Button \n            variant=\"info\" \n            onClick={() => handleSaveWord(4)}\n            disabled={processingWord || isTranslating || !selectedWord}\n            style={{ backgroundColor: styles.wordStatus4.backgroundColor, color: 'black' }}\n          >\n            {processingWord ? 'Saving...' : 'Advanced (4)'}\n          </Button>\n          <Button \n            variant=\"success\" \n            onClick={() => handleSaveWord(5)}\n            disabled={processingWord || isTranslating || !selectedWord}\n            style={{ backgroundColor: styles.wordStatus5.backgroundColor, color: 'black' }}\n          >\n            {processingWord ? 'Saving...' : 'Known (5)'}\n          </Button>\n        </div>\n      </div>\n    );\n  };\n\n  const handleCompleteLesson = async () => {\n    if (!text?.bookId) return;\n    \n    setCompleting(true);\n    \n    try {\n      const bookStats = await completeLesson(text.bookId, text.textId);\n      setStats(bookStats);\n      setShowStatsModal(true);\n    } catch (error) {\n      console.error('Error completing lesson:', error);\n      alert(`Failed to complete lesson: ${error.message}`);\n    } finally {\n      setCompleting(false);\n    }\n  };\n\n  // Get style based on word status\n  const getWordStyle = (status) => {\n    return styles[`wordStatus${status}`] || styles.wordStatus0;\n  };\n\n  // Helper function to get the status of a word\n  const getWordStatus = (word) => {\n    if (!word) return 0;\n    \n    // Make case-insensitive search without normalization that could alter special characters\n    const wordLower = word.toLowerCase();\n    const foundWord = words.find(w => \n      w.term && \n      w.term.toLowerCase() === wordLower\n    );\n    \n    return foundWord ? foundWord.status : 0;\n  };\n\n  if (loading) {\n    return (\n      <Container className=\"py-5 text-center\">\n        <Spinner animation=\"border\" role=\"status\">\n          <span className=\"visually-hidden\">Loading...</span>\n        </Spinner>\n      </Container>\n    );\n  }\n\n  if (error) {\n    return (\n      <Container className=\"py-5\">\n        <Alert variant=\"danger\">\n          {error}\n          <div className=\"mt-3\">\n            <Button variant=\"outline-primary\" onClick={() => navigate('/texts')}>\n              Back to Texts\n            </Button>\n          </div>\n        </Alert>\n      </Container>\n    );\n  }\n\n  if (!text) {\n    return (\n      <Container className=\"py-5\">\n        <Alert variant=\"warning\">\n          Text not found\n          <div className=\"mt-3\">\n            <Button variant=\"outline-primary\" onClick={() => navigate('/texts')}>\n              Back to Texts\n            </Button>\n          </div>\n        </Alert>\n      </Container>\n    );\n  }\n\n  return (\n    <Container fluid className=\"py-3\">\n      <Card className=\"shadow-sm mb-3\">\n        <Card.Body>\n          <div className=\"d-flex justify-content-between align-items-start\">\n            <div>\n              <h2>{text.title}</h2>\n              <p className=\"text-muted\">\n                Language: {text.languageName || 'Unknown'} | \n                Words: {words.length} | \n                Learning: {words.filter(w => w.status <= 2).length} | \n                Known: {words.filter(w => w.status >= 4).length}\n              </p>\n            </div>\n            <div className=\"d-flex gap-2\">\n              {/* If text is part of a book, show complete lesson button and navigation */}\n              {text?.bookId && (\n                <>\n                  <Button \n                    variant=\"outline-primary\" \n                    onClick={() => navigate(`/books/${text.bookId}`)}\n                  >\n                    Back to Book\n                  </Button>\n                </>\n              )}\n              \n              {/* If text is standalone (not part of a book) */}\n              {!text?.bookId && (\n                <Button \n                  variant=\"outline-secondary\" \n                  onClick={() => navigate('/texts')}\n                >\n                  Back to Texts\n                </Button>\n              )}\n            </div>\n          </div>\n        </Card.Body>\n      </Card>\n\n      <Row>\n        {/* Text reading panel (left side) */}\n        <Col md={7} style={styles.textContainer}>\n          <div className=\"d-flex flex-column\" style={{ minHeight: 'calc(100vh - 140px)' }}>\n            <div className=\"flex-grow-1\">\n              {renderTextContent()}\n            </div>\n            \n            {/* Complete Lesson button below the text */}\n            {text?.bookId && (\n              <div className=\"mt-3 mb-3 pt-2 border-top text-end\">\n                <Button \n                  variant=\"success\" \n                  onClick={handleCompleteLesson}\n                  disabled={completing}\n                  size=\"sm\"\n                >\n                  {completing ? <Spinner animation=\"border\" size=\"sm\" /> : null}\n                  {' '}\n                  Complete Lesson\n                </Button>\n              </div>\n            )}\n          </div>\n        </Col>\n\n        {/* Translation panel (right side) */}\n        <Col md={5} style={styles.translationPanel}>\n          <Card>\n            <Card.Body>\n              <h4>Word Information</h4>\n              {renderSidePanel()}\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n\n      {/* Statistics Modal */}\n      <Modal \n        show={showStatsModal} \n        onHide={() => setShowStatsModal(false)}\n        centered\n      >\n        <Modal.Header closeButton>\n          <Modal.Title>Lesson Completed!</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          {stats && (\n            <div className=\"text-center\">\n              <h5>Book Progress</h5>\n              <div className=\"mb-3\">\n                <div className=\"mb-2\">\n                  <ProgressBar \n                    now={stats.CompletionPercentage || stats.completionPercentage} \n                    label={`${(stats.CompletionPercentage || stats.completionPercentage || 0).toFixed(2)}%`} \n                    variant={\n                      (stats.CompletionPercentage || stats.completionPercentage) < 25 ? 'danger' : \n                      (stats.CompletionPercentage || stats.completionPercentage) < 50 ? 'warning' : \n                      (stats.CompletionPercentage || stats.completionPercentage) < 75 ? 'info' : 'success'\n                    }\n                  />\n                </div>\n              </div>\n              \n              <Row className=\"text-center mb-3\">\n                <Col>\n                  <h6>Known Words</h6>\n                  <Badge bg=\"success\" className=\"p-2\">{stats.knownWords}</Badge>\n                </Col>\n                <Col>\n                  <h6>Learning Words</h6>\n                  <Badge bg=\"warning\" className=\"p-2\">{stats.learningWords}</Badge>\n                </Col>\n                <Col>\n                  <h6>Total Words</h6>\n                  <Badge bg=\"info\" className=\"p-2\">{stats.totalWords}</Badge>\n                </Col>\n              </Row>\n              \n              <p className=\"mt-3\">\n                Keep going! You're making great progress with your language learning.\n              </p>\n            </div>\n          )}\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={() => setShowStatsModal(false)}>\n            Close\n          </Button>\n          {nextTextId && (\n            <Button \n              variant=\"success\" \n              onClick={() => {\n                setShowStatsModal(false);\n                navigate(`/texts/${nextTextId}`);\n              }}\n            >\n              Next Lesson\n            </Button>\n          )}\n          {text?.bookId && (\n            <Button \n              variant=\"primary\" \n              onClick={() => navigate(`/books/${text.bookId}`)}\n            >\n              Back to Book\n            </Button>\n          )}\n        </Modal.Footer>\n      </Modal>\n\n      {/* Add the Translate Full Text button */}\n      {text && !loading && (\n        <div className=\"mb-3\">\n          <Button \n            variant=\"info\" \n            onClick={handleFullTextTranslation}\n            data-testid=\"translate-full-text-btn\"\n          >\n            Translate Full Text\n          </Button>\n        </div>\n      )}\n      \n      {/* Add button to translate selected text manually */}\n      {selectedSentence && (\n        <div className=\"mb-3 mt-3\">\n          <Button \n            variant=\"outline-primary\" \n            onClick={handleManualTranslation}\n            data-testid=\"translate-selected-text-btn\"\n          >\n            Translate Selected Text: \"{selectedSentence.length > 20 ? selectedSentence.substring(0, 20) + '...' : selectedSentence}\"\n          </Button>\n        </div>\n      )}\n      \n      {/* Add the sentence translation panel */}\n      {renderSentenceTranslationPanel()}\n      \n      {/* Add the full text translation popup */}\n      <TranslationPopup\n        show={showTranslationPopup}\n        handleClose={() => setShowTranslationPopup(false)}\n        originalText={selectedSentence.length > 0 ? selectedSentence : (text?.content || '')}\n        translatedText={fullTextTranslation}\n        isTranslating={isFullTextTranslating}\n        sourceLanguage={text?.languageCode || ''}\n        targetLanguage=\"en\"\n      />\n    </Container>\n  );\n};\n\nexport default TextDisplay; "],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}