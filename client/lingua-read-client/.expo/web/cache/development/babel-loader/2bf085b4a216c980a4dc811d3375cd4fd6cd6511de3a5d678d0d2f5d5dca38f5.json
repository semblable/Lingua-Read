{"ast":null,"code":"import Platform from \"react-native-web/dist/exports/Platform\";\nimport storage from './storage';\nconst API_URL = Platform.OS === 'web' ? 'http://localhost:5000/api' : 'http://192.168.0.48:5000/api';\nconst getToken = () => {\n  try {\n    return storage.getItem('token');\n  } catch (error) {\n    console.error('Error retrieving token:', error);\n    return null;\n  }\n};\nconst storeToken = token => {\n  try {\n    return storage.setItem('token', token);\n  } catch (error) {\n    console.error('Error storing token:', error);\n    return false;\n  }\n};\nconst fetchApi = async (endpoint, options = {}) => {\n  try {\n    const token = getToken();\n    console.log('Token from storage:', token ? `Token found (${token.length} chars)` : 'No token');\n    const headers = {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    };\n    if (token && typeof token === 'string' && token.trim() !== '') {\n      const cleanToken = token.trim();\n      headers.Authorization = `Bearer ${cleanToken}`;\n      console.log('Authorization header setup for:', endpoint);\n    } else {\n      console.log('No valid token available for request to:', endpoint);\n      if (endpoint !== '/auth/login' && endpoint !== '/auth/register' && endpoint !== '/languages') {\n        throw new Error('Authentication required');\n      }\n    }\n    if (options.headers) {\n      Object.assign(headers, options.headers);\n    }\n    const requestConfig = Object.assign({}, options, {\n      headers,\n      mode: 'cors',\n      credentials: 'include'\n    });\n    console.log('Making request:', {\n      url: `${API_URL}${endpoint}`,\n      method: requestConfig.method || 'GET',\n      body: requestConfig.body ? JSON.parse(requestConfig.body) : undefined\n    });\n    const response = await fetch(`${API_URL}${endpoint}`, requestConfig);\n    console.log('Response status:', response.status);\n    let data;\n    const contentType = response.headers.get('content-type');\n    if (contentType && contentType.includes('application/json')) {\n      try {\n        data = await response.json();\n      } catch (e) {\n        console.error('Error parsing JSON response:', e);\n        const text = await response.text();\n        console.log('Raw response text:', text);\n        throw new Error('Invalid JSON response from server');\n      }\n    } else {\n      const text = await response.text();\n      console.log('Non-JSON response:', text);\n      data = {\n        message: text || response.statusText\n      };\n    }\n    if (!response.ok) {\n      console.error('API error:', data);\n      throw new Error(data.message || response.statusText || 'Something went wrong');\n    }\n    console.log('Response data:', data);\n    return data;\n  } catch (error) {\n    console.error('Request failed:', error);\n    throw error;\n  }\n};\nexport const testApiConnection = async () => {\n  try {\n    console.log('Testing API connection to server');\n    const response = await fetch(`${API_URL}/languages`, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json'\n      },\n      mode: 'cors'\n    });\n    console.log('API response status:', response.status);\n    return response.ok;\n  } catch (error) {\n    console.error('API connection error:', error);\n    return false;\n  }\n};\nexport const registerUser = (email, password) => {\n  return fetchApi('/auth/register', {\n    method: 'POST',\n    body: JSON.stringify({\n      email,\n      password\n    })\n  });\n};\nexport const loginUser = async (email, password) => {\n  try {\n    console.log('Attempting login for:', email);\n    const response = await fetch(`${API_URL}/auth/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      }),\n      mode: 'cors'\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      console.error('Login failed:', error);\n      throw new Error(error.message || 'Login failed');\n    }\n    const data = await response.json();\n    console.log('Login response:', {\n      success: true,\n      hasToken: !!data.token,\n      tokenLength: data.token ? data.token.length : 0\n    });\n    if (!data.token) {\n      throw new Error('No authentication token received');\n    }\n    const cleanToken = data.token.trim();\n    console.log('Storing token:', {\n      length: cleanToken.length,\n      firstChars: cleanToken.substring(0, 10) + '...'\n    });\n    const stored = storeToken(cleanToken);\n    if (!stored) {\n      throw new Error('Failed to store authentication token');\n    }\n    return data;\n  } catch (error) {\n    console.error('Login error:', error);\n    throw error;\n  }\n};\nexport const getLanguages = () => {\n  return fetchApi('/languages');\n};\nexport const getTexts = () => {\n  return fetchApi('/texts');\n};\nexport const getText = textId => {\n  return fetchApi(`/texts/${textId}`);\n};\nexport const createText = (title, content, languageId) => {\n  return fetchApi('/texts', {\n    method: 'POST',\n    body: JSON.stringify({\n      title,\n      content,\n      languageId\n    })\n  });\n};\nexport const getBooks = () => {\n  return fetchApi('/books');\n};\nexport const getBook = bookId => {\n  return fetchApi(`/books/${bookId}`);\n};\nexport const createBook = (title, description, languageId, content, splitMethod = 'paragraph', maxSegmentSize = 3000) => {\n  return fetchApi('/books', {\n    method: 'POST',\n    body: JSON.stringify({\n      title,\n      description,\n      languageId,\n      content,\n      splitMethod,\n      maxSegmentSize\n    })\n  });\n};\nexport const updateLastRead = (bookId, textId) => {\n  return fetchApi(`/books/${bookId}/lastread`, {\n    method: 'PUT',\n    body: JSON.stringify({\n      textId\n    })\n  });\n};\nexport const completeLesson = (bookId, textId) => {\n  return fetchApi(`/books/${bookId}/complete-lesson`, {\n    method: 'PUT',\n    body: JSON.stringify({\n      textId\n    })\n  });\n};\nexport const finishBook = bookId => {\n  return fetchApi(`/books/${bookId}/finish`, {\n    method: 'PUT'\n  });\n};\nexport const getUserStatistics = () => {\n  return fetchApi('/users/statistics');\n};\nexport const getReadingActivity = (period = 'all') => {\n  return fetchApi(`/users/reading-activity?period=${period}`);\n};\nexport const createWord = async (textId, term, status, translation) => {\n  try {\n    if (!textId) throw new Error('Text ID is required');\n    if (!term || term.trim() === '') throw new Error('Word term is required');\n    if (status === undefined || status === null) throw new Error('Status is required');\n    const statusNum = parseInt(status, 10);\n    if (isNaN(statusNum) || statusNum < 1 || statusNum > 5) {\n      throw new Error(`Invalid status value: ${status}. Must be an integer between 1-5.`);\n    }\n    const payload = {\n      textId: parseInt(textId, 10),\n      term: term.trim(),\n      status: statusNum,\n      translation: translation || ''\n    };\n    console.log('Creating word with payload:', payload);\n    console.log(`Character codes for term: ${Array.from(payload.term).map(c => c.charCodeAt(0))}`);\n    const response = await fetchApi('/words', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json; charset=utf-8'\n      },\n      body: JSON.stringify(payload)\n    });\n    return response;\n  } catch (error) {\n    console.error('Error creating word:', error);\n    throw error;\n  }\n};\nexport const updateWord = async (wordId, status, translation) => {\n  try {\n    if (!wordId) throw new Error('Word ID is required');\n    if (status === undefined || status === null) throw new Error('Status is required');\n    const statusNum = parseInt(status, 10);\n    if (isNaN(statusNum) || statusNum < 1 || statusNum > 5) {\n      throw new Error(`Invalid status value: ${status}. Must be an integer between 1-5.`);\n    }\n    const payload = {\n      status: statusNum,\n      translation: translation || ''\n    };\n    console.log('Updating word with payload:', Object.assign({\n      wordId\n    }, payload));\n    const response = await fetchApi(`/words/${wordId}`, {\n      method: 'PUT',\n      body: JSON.stringify(payload)\n    });\n    return response;\n  } catch (error) {\n    console.error('Error in updateWord:', error);\n    throw error;\n  }\n};\nexport const translateText = async (text, sourceLanguageCode, targetLanguageCode) => {\n  console.log(`Translating ${text} from ${sourceLanguageCode} to ${targetLanguageCode}`);\n  try {\n    const payload = {\n      text,\n      sourceLanguageCode,\n      targetLanguageCode\n    };\n    return await fetchApi('/translation', {\n      method: 'POST',\n      body: JSON.stringify(payload)\n    });\n  } catch (error) {\n    console.error('Translation failed:', error);\n    throw error;\n  }\n};\nexport const translateSentence = async (text, sourceLanguageCode, targetLanguageCode) => {\n  console.log(`[API] Translating sentence from ${sourceLanguageCode} to ${targetLanguageCode}:`);\n  console.log(`[API] Text to translate (${text.length} chars): \"${text.substring(0, 50)}${text.length > 50 ? '...' : ''}\"`);\n  try {\n    if (!text || text.trim() === '') {\n      throw new Error('Text is required for translation');\n    }\n    const payload = {\n      text,\n      sourceLanguageCode: sourceLanguageCode || 'auto',\n      targetLanguageCode: targetLanguageCode || 'en'\n    };\n    console.log('[API] Sending sentence translation request');\n    const response = await fetchApi('/sentencetranslation', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json; charset=utf-8'\n      },\n      body: JSON.stringify(payload)\n    });\n    console.log('[API] Sentence translation response received:', response);\n    return response;\n  } catch (error) {\n    console.error('[API] Sentence translation failed:', error);\n    throw error;\n  }\n};\nexport const translateFullText = async (text, sourceLanguageCode, targetLanguageCode) => {\n  console.log(`[API] Translating full text from ${sourceLanguageCode} to ${targetLanguageCode}`);\n  console.log(`[API] Full text length: ${text.length} characters`);\n  console.log(`[API] Start of text: \"${text.substring(0, 50)}${text.length > 50 ? '...' : ''}\"`);\n  try {\n    if (!text || text.trim() === '') {\n      throw new Error('Text is required for translation');\n    }\n    const payload = {\n      text,\n      sourceLanguageCode: sourceLanguageCode || 'auto',\n      targetLanguageCode: targetLanguageCode || 'en'\n    };\n    console.log('[API] Sending full text translation request');\n    const response = await fetchApi('/sentencetranslation/full-text', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json; charset=utf-8'\n      },\n      body: JSON.stringify(payload)\n    });\n    console.log('[API] Full text translation response received:', response);\n    return response;\n  } catch (error) {\n    console.error('[API] Full text translation failed:', error);\n    throw error;\n  }\n};\nexport const getSupportedLanguages = () => {\n  return fetchApi('/translation/languages');\n};","map":{"version":3,"names":["storage","API_URL","Platform","OS","getToken","getItem","error","console","storeToken","token","setItem","fetchApi","endpoint","options","log","length","headers","trim","cleanToken","Authorization","Error","Object","assign","requestConfig","mode","credentials","url","method","body","JSON","parse","undefined","response","fetch","status","data","contentType","get","includes","json","e","text","message","statusText","ok","testApiConnection","registerUser","email","password","stringify","loginUser","success","hasToken","tokenLength","firstChars","substring","stored","getLanguages","getTexts","getText","textId","createText","title","content","languageId","getBooks","getBook","bookId","createBook","description","splitMethod","maxSegmentSize","updateLastRead","completeLesson","finishBook","getUserStatistics","getReadingActivity","period","createWord","term","translation","statusNum","parseInt","isNaN","payload","Array","from","map","c","charCodeAt","updateWord","wordId","translateText","sourceLanguageCode","targetLanguageCode","translateSentence","translateFullText","getSupportedLanguages"],"sources":["C:/Users/kamil/Dropbox/Lingua_Read/client/lingua-read-client/src/utils/api.js"],"sourcesContent":["// Import Platform from react-native\nimport { Platform } from 'react-native';\nimport storage from './storage';\n\n// Dynamically set API URL based on platform\n// For web development use localhost, for mobile use your computer's IP address\nconst API_URL = Platform.OS === 'web' \n  ? 'http://localhost:5000/api' \n  : 'http://192.168.0.48:5000/api'; // Your Ethernet adapter IP address\n\n// Helper function to get token from storage\nconst getToken = () => {\n  try {\n    return storage.getItem('token');\n  } catch (error) {\n    console.error('Error retrieving token:', error);\n    return null;\n  }\n};\n\n// Helper function to store token\nconst storeToken = (token) => {\n  try {\n    return storage.setItem('token', token);\n  } catch (error) {\n    console.error('Error storing token:', error);\n    return false;\n  }\n};\n\n// Helper function for making API requests\nconst fetchApi = async (endpoint, options = {}) => {\n  try {\n    const token = getToken();\n    console.log('Token from storage:', token ? `Token found (${token.length} chars)` : 'No token');\n    \n    const headers = {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    };\n\n    // Only add Authorization header if token exists and is a string\n    if (token && typeof token === 'string' && token.trim() !== '') {\n      const cleanToken = token.trim();\n      headers.Authorization = `Bearer ${cleanToken}`;\n      console.log('Authorization header setup for:', endpoint);\n    } else {\n      console.log('No valid token available for request to:', endpoint);\n      if (endpoint !== '/auth/login' && endpoint !== '/auth/register' && endpoint !== '/languages') {\n        throw new Error('Authentication required');\n      }\n    }\n\n    // Add any additional headers from options\n    if (options.headers) {\n      Object.assign(headers, options.headers);\n    }\n\n    const requestConfig = {\n      ...options,\n      headers,\n      mode: 'cors',\n      credentials: 'include'\n    };\n\n    // Log the complete request for debugging\n    console.log('Making request:', {\n      url: `${API_URL}${endpoint}`,\n      method: requestConfig.method || 'GET',\n      body: requestConfig.body ? JSON.parse(requestConfig.body) : undefined\n    });\n    \n    const response = await fetch(`${API_URL}${endpoint}`, requestConfig);\n    console.log('Response status:', response.status);\n\n    let data;\n    const contentType = response.headers.get('content-type');\n    if (contentType && contentType.includes('application/json')) {\n      try {\n        data = await response.json();\n      } catch (e) {\n        console.error('Error parsing JSON response:', e);\n        const text = await response.text();\n        console.log('Raw response text:', text);\n        throw new Error('Invalid JSON response from server');\n      }\n    } else {\n      const text = await response.text();\n      console.log('Non-JSON response:', text);\n      data = { message: text || response.statusText };\n    }\n\n    if (!response.ok) {\n      console.error('API error:', data);\n      throw new Error(data.message || response.statusText || 'Something went wrong');\n    }\n\n    console.log('Response data:', data);\n    return data;\n  } catch (error) {\n    console.error('Request failed:', error);\n    throw error;\n  }\n};\n\n// Simple test function to check API connectivity\nexport const testApiConnection = async () => {\n  try {\n    console.log('Testing API connection to server');\n    const response = await fetch(`${API_URL}/languages`, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json'\n      },\n      mode: 'cors'\n    });\n    console.log('API response status:', response.status);\n    return response.ok;\n  } catch (error) {\n    console.error('API connection error:', error);\n    return false;\n  }\n};\n\n// Auth API\nexport const registerUser = (email, password) => {\n  return fetchApi('/auth/register', {\n    method: 'POST',\n    body: JSON.stringify({ email, password })\n  });\n};\n\nexport const loginUser = async (email, password) => {\n  try {\n    console.log('Attempting login for:', email);\n    const response = await fetch(`${API_URL}/auth/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify({ email, password }),\n      mode: 'cors'\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      console.error('Login failed:', error);\n      throw new Error(error.message || 'Login failed');\n    }\n\n    const data = await response.json();\n    console.log('Login response:', {\n      success: true,\n      hasToken: !!data.token,\n      tokenLength: data.token ? data.token.length : 0\n    });\n\n    if (!data.token) {\n      throw new Error('No authentication token received');\n    }\n\n    // Store the token\n    const cleanToken = data.token.trim();\n    console.log('Storing token:', {\n      length: cleanToken.length,\n      firstChars: cleanToken.substring(0, 10) + '...'\n    });\n    \n    const stored = storeToken(cleanToken);\n    if (!stored) {\n      throw new Error('Failed to store authentication token');\n    }\n\n    return data;\n  } catch (error) {\n    console.error('Login error:', error);\n    throw error;\n  }\n};\n\n// Languages API\nexport const getLanguages = () => {\n  return fetchApi('/languages');\n};\n\n// Texts API\nexport const getTexts = () => {\n  return fetchApi('/texts');\n};\n\nexport const getText = (textId) => {\n  return fetchApi(`/texts/${textId}`);\n};\n\nexport const createText = (title, content, languageId) => {\n  return fetchApi('/texts', {\n    method: 'POST',\n    body: JSON.stringify({ title, content, languageId })\n  });\n};\n\n// Books API\nexport const getBooks = () => {\n  return fetchApi('/books');\n};\n\nexport const getBook = (bookId) => {\n  return fetchApi(`/books/${bookId}`);\n};\n\nexport const createBook = (title, description, languageId, content, splitMethod = 'paragraph', maxSegmentSize = 3000) => {\n  return fetchApi('/books', {\n    method: 'POST',\n    body: JSON.stringify({ \n      title, \n      description, \n      languageId, \n      content,\n      splitMethod,\n      maxSegmentSize\n    })\n  });\n};\n\nexport const updateLastRead = (bookId, textId) => {\n  return fetchApi(`/books/${bookId}/lastread`, {\n    method: 'PUT',\n    body: JSON.stringify({ textId })\n  });\n};\n\nexport const completeLesson = (bookId, textId) => {\n  return fetchApi(`/books/${bookId}/complete-lesson`, {\n    method: 'PUT',\n    body: JSON.stringify({ textId })\n  });\n};\n\nexport const finishBook = (bookId) => {\n  return fetchApi(`/books/${bookId}/finish`, {\n    method: 'PUT'\n  });\n};\n\n// User Statistics API\nexport const getUserStatistics = () => {\n  return fetchApi('/users/statistics');\n};\n\nexport const getReadingActivity = (period = 'all') => {\n  return fetchApi(`/users/reading-activity?period=${period}`);\n};\n\n// Words API\nexport const createWord = async (textId, term, status, translation) => {\n  try {\n    // Validate inputs\n    if (!textId) throw new Error('Text ID is required');\n    if (!term || term.trim() === '') throw new Error('Word term is required');\n    if (status === undefined || status === null) throw new Error('Status is required');\n\n    // Convert status to integer explicitly \n    const statusNum = parseInt(status, 10);\n    if (isNaN(statusNum) || statusNum < 1 || statusNum > 5) {\n      throw new Error(`Invalid status value: ${status}. Must be an integer between 1-5.`);\n    }\n\n    // Ensure correct types and format for the server\n    // Note: We're not using any normalization on the term to preserve special characters\n    const payload = {\n      textId: parseInt(textId, 10),\n      term: term.trim(), // Just trim whitespace but don't modify the characters\n      status: statusNum,\n      translation: translation || '' // Allow empty translation\n    };\n\n    console.log('Creating word with payload:', payload);\n    console.log(`Character codes for term: ${Array.from(payload.term).map(c => c.charCodeAt(0))}`);\n    \n    const response = await fetchApi('/words', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json; charset=utf-8'\n      },\n      body: JSON.stringify(payload)\n    });\n    \n    return response;\n  } catch (error) {\n    console.error('Error creating word:', error);\n    throw error;\n  }\n};\n\nexport const updateWord = async (wordId, status, translation) => {\n  try {\n    // Validate inputs\n    if (!wordId) throw new Error('Word ID is required');\n    if (status === undefined || status === null) throw new Error('Status is required');\n\n    // Convert status to integer explicitly\n    const statusNum = parseInt(status, 10);\n    if (isNaN(statusNum) || statusNum < 1 || statusNum > 5) {\n      throw new Error(`Invalid status value: ${status}. Must be an integer between 1-5.`);\n    }\n\n    // Ensure correct types and format for the server\n    const payload = {\n      status: statusNum,\n      translation: translation || '' // Allow empty translation\n    };\n\n    console.log('Updating word with payload:', { wordId, ...payload });\n    \n    const response = await fetchApi(`/words/${wordId}`, {\n      method: 'PUT',\n      body: JSON.stringify(payload)\n    });\n    \n    return response;\n  } catch (error) {\n    console.error('Error in updateWord:', error);\n    throw error;\n  }\n};\n\n// Translation API\nexport const translateText = async (text, sourceLanguageCode, targetLanguageCode) => {\n  console.log(`Translating ${text} from ${sourceLanguageCode} to ${targetLanguageCode}`);\n  try {\n    const payload = { text, sourceLanguageCode, targetLanguageCode };\n    return await fetchApi('/translation', {\n      method: 'POST',\n      body: JSON.stringify(payload)\n    });\n  } catch (error) {\n    console.error('Translation failed:', error);\n    throw error;\n  }\n};\n\n// Sentence Translation API (using Gemini)\nexport const translateSentence = async (text, sourceLanguageCode, targetLanguageCode) => {\n  console.log(`[API] Translating sentence from ${sourceLanguageCode} to ${targetLanguageCode}:`);\n  console.log(`[API] Text to translate (${text.length} chars): \"${text.substring(0, 50)}${text.length > 50 ? '...' : ''}\"`);\n  \n  try {\n    if (!text || text.trim() === '') {\n      throw new Error('Text is required for translation');\n    }\n    \n    // Ensure the text is properly UTF-8 encoded\n    const payload = { \n      text, \n      sourceLanguageCode: sourceLanguageCode || 'auto', \n      targetLanguageCode: targetLanguageCode || 'en' \n    };\n    \n    console.log('[API] Sending sentence translation request');\n    \n    const response = await fetchApi('/sentencetranslation', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json; charset=utf-8'\n      },\n      body: JSON.stringify(payload)\n    });\n    \n    console.log('[API] Sentence translation response received:', response);\n    return response;\n  } catch (error) {\n    console.error('[API] Sentence translation failed:', error);\n    throw error;\n  }\n};\n\n// Full text translation for popup (using Gemini)\nexport const translateFullText = async (text, sourceLanguageCode, targetLanguageCode) => {\n  console.log(`[API] Translating full text from ${sourceLanguageCode} to ${targetLanguageCode}`);\n  console.log(`[API] Full text length: ${text.length} characters`);\n  console.log(`[API] Start of text: \"${text.substring(0, 50)}${text.length > 50 ? '...' : ''}\"`);\n  \n  try {\n    if (!text || text.trim() === '') {\n      throw new Error('Text is required for translation');\n    }\n    \n    // Ensure the text is properly UTF-8 encoded\n    const payload = { \n      text, \n      sourceLanguageCode: sourceLanguageCode || 'auto', \n      targetLanguageCode: targetLanguageCode || 'en' \n    };\n    \n    console.log('[API] Sending full text translation request');\n    \n    const response = await fetchApi('/sentencetranslation/full-text', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json; charset=utf-8'\n      },\n      body: JSON.stringify(payload)\n    });\n    \n    console.log('[API] Full text translation response received:', response);\n    return response;\n  } catch (error) {\n    console.error('[API] Full text translation failed:', error);\n    throw error;\n  }\n};\n\nexport const getSupportedLanguages = () => {\n  return fetchApi('/translation/languages');\n};"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}